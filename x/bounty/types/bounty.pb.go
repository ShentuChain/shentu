// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/bounty/v1/bounty.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProgramStatus int32

const (
	ProgramStatusInactive ProgramStatus = 0
	ProgramStatusActive   ProgramStatus = 1
	ProgramStatusClosed   ProgramStatus = 2
)

var ProgramStatus_name = map[int32]string{
	0: "PROGRAM_STATUS_INACTIVE",
	1: "PROGRAM_STATUS_ACTIVE",
	2: "PROGRAM_STATUS_CLOSED",
}

var ProgramStatus_value = map[string]int32{
	"PROGRAM_STATUS_INACTIVE": 0,
	"PROGRAM_STATUS_ACTIVE":   1,
	"PROGRAM_STATUS_CLOSED":   2,
}

func (x ProgramStatus) String() string {
	return proto.EnumName(ProgramStatus_name, int32(x))
}

func (ProgramStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{0}
}

type SeverityLevel int32

const (
	Unspecified   SeverityLevel = 0
	Critical      SeverityLevel = 1
	High          SeverityLevel = 2
	Medium        SeverityLevel = 3
	Low           SeverityLevel = 4
	Informational SeverityLevel = 5
)

var SeverityLevel_name = map[int32]string{
	0: "SEVERITY_LEVEL_UNSPECIFIED",
	1: "SEVERITY_LEVEL_CRITICAL",
	2: "SEVERITY_LEVEL_HIGH",
	3: "SEVERITY_LEVEL_MEDIUM",
	4: "SEVERITY_LEVEL_LOW",
	5: "SEVERITY_LEVEL_INFORMATIONAL",
}

var SeverityLevel_value = map[string]int32{
	"SEVERITY_LEVEL_UNSPECIFIED":   0,
	"SEVERITY_LEVEL_CRITICAL":      1,
	"SEVERITY_LEVEL_HIGH":          2,
	"SEVERITY_LEVEL_MEDIUM":        3,
	"SEVERITY_LEVEL_LOW":           4,
	"SEVERITY_LEVEL_INFORMATIONAL": 5,
}

func (x SeverityLevel) String() string {
	return proto.EnumName(SeverityLevel_name, int32(x))
}

func (SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{1}
}

type FindingStatus int32

const (
	FindingStatusSubmitted FindingStatus = 0
	FindingStatusActive    FindingStatus = 1
	FindingStatusConfirmed FindingStatus = 2
	FindingStatusPaid      FindingStatus = 3
	FindingStatusClosed    FindingStatus = 4
)

var FindingStatus_name = map[int32]string{
	0: "FINDING_STATUS_SUBMITTED",
	1: "FINDING_STATUS_ACTIVE",
	2: "FINDING_STATUS_CONFIRMED",
	3: "FINDING_STATUS_PAID",
	4: "FINDING_STATUS_CLOSED",
}

var FindingStatus_value = map[string]int32{
	"FINDING_STATUS_SUBMITTED": 0,
	"FINDING_STATUS_ACTIVE":    1,
	"FINDING_STATUS_CONFIRMED": 2,
	"FINDING_STATUS_PAID":      3,
	"FINDING_STATUS_CLOSED":    4,
}

func (x FindingStatus) String() string {
	return proto.EnumName(FindingStatus_name, int32(x))
}

func (FindingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{2}
}

type Program struct {
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"id" yaml:"id"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// JSON by ProgramDetail
	Description    string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	AdminAddress   string        `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty" yaml:"admin_address"`
	MemberAccounts []string      `protobuf:"bytes,5,rep,name=member_accounts,json=memberAccounts,proto3" json:"member_accounts,omitempty" yaml:"member_accounts"`
	Status         ProgramStatus `protobuf:"varint,6,opt,name=status,proto3,enum=shentu.bounty.v1.ProgramStatus" json:"status,omitempty" yaml:"status"`
	BountyLevels   []BountyLevel `protobuf:"bytes,7,rep,name=bounty_levels,json=bountyLevels,proto3" json:"bounty_levels" yaml:"bounty_levels"`
}

func (m *Program) Reset()         { *m = Program{} }
func (m *Program) String() string { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()    {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{0}
}
func (m *Program) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Program.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(m, src)
}
func (m *Program) XXX_Size() int {
	return m.Size()
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

type Finding struct {
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	FindingId string `protobuf:"bytes,2,opt,name=finding_id,json=findingId,proto3" json:"id" yaml:"id"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// JSON by FindingDetail
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// hash(desc + pos + submitter)
	FindingHash      string        `protobuf:"bytes,5,opt,name=finding_hash,json=findingHash,proto3" json:"finding_hash,omitempty" yaml:"finding_hash"`
	SubmitterAddress string        `protobuf:"bytes,6,opt,name=submitter_address,json=submitterAddress,proto3" json:"submitter_address,omitempty" yaml:"submitter_address"`
	SeverityLevel    SeverityLevel `protobuf:"varint,7,opt,name=severity_level,json=severityLevel,proto3,enum=shentu.bounty.v1.SeverityLevel" json:"severity_level,omitempty" yaml:"severity_level"`
	Status           FindingStatus `protobuf:"varint,8,opt,name=status,proto3,enum=shentu.bounty.v1.FindingStatus" json:"status,omitempty" yaml:"status"`
	CreateTime       time.Time     `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3,stdtime" json:"create_time" yaml:"create_time"`
}

func (m *Finding) Reset()         { *m = Finding{} }
func (m *Finding) String() string { return proto.CompactTextString(m) }
func (*Finding) ProtoMessage()    {}
func (*Finding) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{1}
}
func (m *Finding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Finding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Finding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Finding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Finding.Merge(m, src)
}
func (m *Finding) XXX_Size() int {
	return m.Size()
}
func (m *Finding) XXX_DiscardUnknown() {
	xxx_messageInfo_Finding.DiscardUnknown(m)
}

var xxx_messageInfo_Finding proto.InternalMessageInfo

type BountyLevel struct {
	SeverityLevel SeverityLevel `protobuf:"varint,1,opt,name=severity_level,json=severityLevel,proto3,enum=shentu.bounty.v1.SeverityLevel" json:"severity_level,omitempty" yaml:"severity_level"`
	Poc           bool          `protobuf:"varint,2,opt,name=poc,proto3" json:"poc,omitempty"`
	MinBounty     types1.Coin   `protobuf:"bytes,3,opt,name=min_bounty,json=minBounty,proto3" json:"min_bounty" yaml:"min_bounty"`
	MaxBounty     types1.Coin   `protobuf:"bytes,4,opt,name=max_bounty,json=maxBounty,proto3" json:"max_bounty" yaml:"max_bounty"`
}

func (m *BountyLevel) Reset()         { *m = BountyLevel{} }
func (m *BountyLevel) String() string { return proto.CompactTextString(m) }
func (*BountyLevel) ProtoMessage()    {}
func (*BountyLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{2}
}
func (m *BountyLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BountyLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BountyLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BountyLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BountyLevel.Merge(m, src)
}
func (m *BountyLevel) XXX_Size() int {
	return m.Size()
}
func (m *BountyLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_BountyLevel.DiscardUnknown(m)
}

var xxx_messageInfo_BountyLevel proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("shentu.bounty.v1.ProgramStatus", ProgramStatus_name, ProgramStatus_value)
	proto.RegisterEnum("shentu.bounty.v1.SeverityLevel", SeverityLevel_name, SeverityLevel_value)
	proto.RegisterEnum("shentu.bounty.v1.FindingStatus", FindingStatus_name, FindingStatus_value)
	proto.RegisterType((*Program)(nil), "shentu.bounty.v1.Program")
	proto.RegisterType((*Finding)(nil), "shentu.bounty.v1.Finding")
	proto.RegisterType((*BountyLevel)(nil), "shentu.bounty.v1.BountyLevel")
}

func init() { proto.RegisterFile("shentu/bounty/v1/bounty.proto", fileDescriptor_36e6d679af1b94c6) }

var fileDescriptor_36e6d679af1b94c6 = []byte{
	// 1131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6e, 0xe2, 0xd6,
	0x1b, 0xc5, 0x40, 0xfe, 0x70, 0x09, 0x33, 0xce, 0x4d, 0x48, 0x1c, 0x2b, 0x83, 0xfd, 0xf3, 0x4f,
	0x95, 0xd2, 0x59, 0x18, 0x85, 0xa9, 0xaa, 0x51, 0xa4, 0x2e, 0x80, 0x90, 0xc4, 0x2d, 0x7f, 0x22,
	0x43, 0x52, 0xb5, 0x5d, 0x50, 0x83, 0x2f, 0x70, 0x25, 0x6c, 0x23, 0xdb, 0xd0, 0xe4, 0x0d, 0x46,
	0xac, 0xa6, 0x0f, 0x80, 0x34, 0x55, 0x9f, 0xa1, 0x7d, 0x86, 0x59, 0xce, 0x72, 0x56, 0xee, 0x28,
	0xd9, 0x54, 0x5d, 0xf2, 0x04, 0x95, 0x7d, 0x2f, 0x13, 0xec, 0x24, 0xfd, 0x23, 0x75, 0x77, 0xef,
	0xf7, 0x9d, 0x73, 0x6c, 0x7f, 0xdf, 0xe1, 0x08, 0xf0, 0xcc, 0x19, 0x20, 0xd3, 0x1d, 0xe7, 0x3b,
	0xd6, 0xd8, 0x74, 0xaf, 0xf3, 0x93, 0x43, 0x7a, 0x92, 0x47, 0xb6, 0xe5, 0x5a, 0x90, 0x25, 0x6d,
	0x99, 0x16, 0x27, 0x87, 0xfc, 0x76, 0xdf, 0xea, 0x5b, 0x41, 0x33, 0xef, 0x9f, 0x08, 0x8e, 0x17,
	0xfa, 0x96, 0xd5, 0x1f, 0xa2, 0x7c, 0x70, 0xeb, 0x8c, 0x7b, 0x79, 0x17, 0x1b, 0xc8, 0x71, 0x35,
	0x63, 0x44, 0x01, 0xb9, 0xae, 0xe5, 0x18, 0x96, 0x93, 0xef, 0x68, 0x0e, 0xca, 0x4f, 0x0e, 0x3b,
	0xc8, 0xd5, 0x0e, 0xf3, 0x5d, 0x0b, 0x9b, 0xb4, 0xbf, 0x47, 0xfa, 0x6d, 0xa2, 0x4c, 0x2e, 0x8b,
	0x56, 0x54, 0x5b, 0x33, 0xe9, 0xeb, 0x49, 0xef, 0x13, 0x60, 0xed, 0xdc, 0xb6, 0xfa, 0xb6, 0x66,
	0xc0, 0x02, 0x00, 0x23, 0x72, 0x6c, 0x63, 0x9d, 0x63, 0x44, 0xe6, 0x20, 0x55, 0xda, 0xfa, 0xc3,
	0x13, 0xe2, 0x58, 0x9f, 0x7b, 0x42, 0xea, 0x5a, 0x33, 0x86, 0x47, 0x12, 0xd6, 0x25, 0x35, 0x45,
	0x61, 0x8a, 0x0e, 0xff, 0x0f, 0x92, 0xa6, 0x66, 0x20, 0x2e, 0x1e, 0xa0, 0x9f, 0xce, 0x3d, 0x21,
	0x4d, 0x70, 0x7e, 0x55, 0x52, 0x83, 0x26, 0x7c, 0x09, 0xd2, 0x3a, 0x72, 0xba, 0x36, 0x1e, 0xb9,
	0xd8, 0x32, 0xb9, 0x44, 0x80, 0xdd, 0x99, 0x7b, 0x02, 0x24, 0xd8, 0xa5, 0xa6, 0xa4, 0x2e, 0x43,
	0xe1, 0x17, 0x20, 0xa3, 0xe9, 0x06, 0x36, 0xdb, 0x9a, 0xae, 0xdb, 0xc8, 0x71, 0xb8, 0x64, 0xc0,
	0xe5, 0xe6, 0x9e, 0xb0, 0x4d, 0xb8, 0xa1, 0xb6, 0xa4, 0x6e, 0x04, 0xf7, 0x22, 0xb9, 0xc2, 0x32,
	0x78, 0x6a, 0x20, 0xa3, 0x83, 0xec, 0xb6, 0xd6, 0xed, 0xfa, 0x0b, 0x70, 0xb8, 0x15, 0x31, 0x71,
	0x90, 0x2a, 0xf1, 0x73, 0x4f, 0xd8, 0x21, 0x02, 0x11, 0x80, 0xa4, 0x3e, 0x21, 0x95, 0x22, 0x2d,
	0xc0, 0x2f, 0xc1, 0xaa, 0xe3, 0x6a, 0xee, 0xd8, 0xe1, 0x56, 0x45, 0xe6, 0xe0, 0x49, 0x41, 0x90,
	0xa3, 0x2b, 0x95, 0xe9, 0x04, 0x9b, 0x01, 0xac, 0xb4, 0x39, 0xf7, 0x84, 0x0c, 0x11, 0x27, 0x44,
	0x49, 0xa5, 0x0a, 0xf0, 0x7b, 0x90, 0x21, 0xac, 0xf6, 0x10, 0x4d, 0xd0, 0xd0, 0xe1, 0xd6, 0xc4,
	0xc4, 0x41, 0xba, 0xf0, 0xec, 0xbe, 0x64, 0x29, 0x38, 0x55, 0x7d, 0x54, 0x69, 0xff, 0xad, 0x27,
	0xc4, 0xee, 0x3e, 0x39, 0xa4, 0x20, 0xa9, 0x1b, 0x9d, 0x3b, 0xa8, 0x73, 0xb4, 0xfe, 0xea, 0x8d,
	0x10, 0xfb, 0xfd, 0x8d, 0x10, 0x93, 0x3e, 0x24, 0xc1, 0xda, 0x09, 0x36, 0x75, 0x6c, 0xf6, 0xe1,
	0x67, 0x0f, 0xac, 0x36, 0x3b, 0xf7, 0x84, 0x4d, 0xa2, 0x78, 0xd7, 0x0b, 0x2d, 0xb7, 0x00, 0x40,
	0x8f, 0x08, 0xf8, 0xac, 0xf8, 0x5f, 0x18, 0x82, 0xc2, 0x14, 0x1d, 0x6e, 0x83, 0x15, 0x17, 0xbb,
	0x43, 0x44, 0xb6, 0xac, 0x92, 0x4b, 0xd4, 0x01, 0xc9, 0x7f, 0xee, 0x80, 0x23, 0xb0, 0xb1, 0x78,
	0x87, 0x81, 0xe6, 0x0c, 0xb8, 0x95, 0x80, 0xba, 0x3b, 0xf7, 0x84, 0x2d, 0x42, 0x5d, 0xee, 0x4a,
	0x6a, 0x9a, 0x5e, 0xcf, 0x34, 0x67, 0x00, 0x15, 0xb0, 0xe9, 0x8c, 0x3b, 0x06, 0x76, 0x5d, 0x7f,
	0xc1, 0xd4, 0x41, 0xab, 0x81, 0xc0, 0xfe, 0xdc, 0x13, 0x38, 0xba, 0xa3, 0x28, 0x44, 0x52, 0xd9,
	0x8f, 0xb5, 0x85, 0x93, 0x34, 0xf0, 0xc4, 0x41, 0x13, 0x64, 0xe3, 0xc5, 0xe0, 0xb9, 0xb5, 0xc7,
	0xcc, 0xd0, 0xa4, 0x38, 0xb2, 0xbb, 0xbd, 0xb9, 0x27, 0x64, 0xe9, 0x83, 0x42, 0x02, 0x92, 0x9a,
	0x71, 0x96, 0x91, 0x4b, 0x3e, 0x5b, 0x7f, 0x4c, 0x9a, 0xae, 0xf3, 0xef, 0x7d, 0xf6, 0x1d, 0x48,
	0x77, 0x6d, 0xa4, 0xb9, 0xa8, 0xed, 0xc7, 0x08, 0x97, 0x12, 0x99, 0x83, 0x74, 0x81, 0x97, 0x49,
	0x0e, 0xc8, 0x8b, 0x1c, 0x90, 0x5b, 0x8b, 0x8c, 0x29, 0xe5, 0xa8, 0xc5, 0xe8, 0x3e, 0x96, 0xc8,
	0xd2, 0xeb, 0xdf, 0x04, 0x46, 0x05, 0xa4, 0xe2, 0x13, 0x96, 0x2c, 0xf6, 0x6b, 0x1c, 0xa4, 0x97,
	0x8c, 0xfa, 0xc0, 0x94, 0x98, 0xff, 0x7a, 0x4a, 0x2c, 0x48, 0x8c, 0xac, 0x6e, 0x60, 0xc6, 0x75,
	0xd5, 0x3f, 0xc2, 0x26, 0x00, 0x7e, 0x04, 0x10, 0xe9, 0xc0, 0x76, 0xe9, 0xc2, 0x9e, 0x4c, 0x03,
	0xd0, 0x4f, 0x4b, 0x99, 0xa6, 0xa5, 0x5c, 0xb6, 0xb0, 0x59, 0xda, 0xa3, 0x5f, 0x4a, 0xad, 0x7f,
	0x47, 0x95, 0xd4, 0x94, 0x81, 0x4d, 0xf2, 0x39, 0x81, 0xa8, 0x76, 0xb5, 0x10, 0x4d, 0xfe, 0x5b,
	0xd1, 0x8f, 0x54, 0x5f, 0x54, 0xbb, 0x22, 0xa2, 0x77, 0x83, 0x7b, 0xfe, 0x0b, 0x03, 0x32, 0xa1,
	0xd0, 0x80, 0x9f, 0x83, 0xdd, 0x73, 0xb5, 0x71, 0xaa, 0x16, 0x6b, 0xed, 0x66, 0xab, 0xd8, 0xba,
	0x68, 0xb6, 0x95, 0x7a, 0xb1, 0xdc, 0x52, 0x2e, 0x2b, 0x6c, 0x8c, 0xdf, 0x9b, 0xce, 0xc4, 0x6c,
	0x08, 0xaf, 0x98, 0x5a, 0xd7, 0xc5, 0x13, 0x04, 0x0b, 0x20, 0x1b, 0xe1, 0x51, 0x16, 0xc3, 0xef,
	0x4e, 0x67, 0xe2, 0x56, 0x88, 0x55, 0x7c, 0x8c, 0x53, 0xae, 0x36, 0x9a, 0x95, 0x63, 0x36, 0xfe,
	0x00, 0xa7, 0x3c, 0xb4, 0x1c, 0xa4, 0xf3, 0xc9, 0x57, 0x3f, 0xe7, 0x62, 0xcf, 0x7f, 0x8c, 0x83,
	0x4c, 0x68, 0x73, 0x30, 0x0f, 0xf8, 0x66, 0xe5, 0xb2, 0xa2, 0x2a, 0xad, 0x6f, 0xda, 0xd5, 0xca,
	0x65, 0xa5, 0xda, 0xbe, 0xa8, 0x37, 0xcf, 0x2b, 0x65, 0xe5, 0x44, 0xa9, 0x1c, 0xb3, 0x31, 0xfe,
	0xe9, 0x74, 0x26, 0xa6, 0x2f, 0x4c, 0x67, 0x84, 0xba, 0xb8, 0x87, 0x91, 0x0e, 0x3f, 0x05, 0xbb,
	0x11, 0x42, 0x59, 0x55, 0x5a, 0x4a, 0xb9, 0x58, 0x65, 0x19, 0x7e, 0x63, 0x3a, 0x13, 0xd7, 0xcb,
	0x36, 0x76, 0x71, 0x57, 0x1b, 0xc2, 0xff, 0x81, 0xad, 0x08, 0xf4, 0x4c, 0x39, 0x3d, 0x63, 0xe3,
	0xfc, 0xfa, 0x74, 0x26, 0x26, 0xcf, 0x70, 0x7f, 0x00, 0x3f, 0x01, 0xd9, 0x08, 0xa4, 0x56, 0x39,
	0x56, 0x2e, 0x6a, 0x6c, 0x82, 0x07, 0xd3, 0x99, 0xb8, 0x5a, 0x43, 0x3a, 0x1e, 0x1b, 0x50, 0x00,
	0x30, 0x02, 0xab, 0x36, 0xbe, 0x66, 0x93, 0xfc, 0xda, 0x74, 0x26, 0x26, 0xaa, 0xd6, 0x0f, 0xf0,
	0x05, 0xd8, 0x8f, 0x00, 0x94, 0xfa, 0x49, 0x43, 0xad, 0x15, 0x5b, 0x4a, 0xa3, 0x5e, 0xac, 0xb2,
	0x2b, 0xfc, 0xe6, 0x74, 0x26, 0x66, 0x14, 0xb3, 0x67, 0xd9, 0x86, 0xe6, 0x27, 0x93, 0x36, 0xa4,
	0x33, 0xf9, 0x29, 0x0e, 0x32, 0xa1, 0x1f, 0x26, 0x7c, 0x09, 0xb8, 0x13, 0xa5, 0x7e, 0xac, 0xd4,
	0x4f, 0x17, 0xf3, 0x6d, 0x5e, 0x94, 0x6a, 0x4a, 0xab, 0x15, 0x4c, 0x84, 0x9f, 0xce, 0xc4, 0x9d,
	0x10, 0xa1, 0x49, 0xd3, 0xc6, 0x4f, 0xdc, 0x6c, 0x84, 0x19, 0xde, 0x66, 0x88, 0x46, 0xb7, 0x79,
	0xff, 0x69, 0xe5, 0x46, 0xfd, 0x44, 0x51, 0x6b, 0xc1, 0x42, 0xef, 0x3f, 0xad, 0x6c, 0x99, 0x3d,
	0x6c, 0x1b, 0x48, 0x87, 0x32, 0xd8, 0x8a, 0x30, 0xcf, 0x8b, 0xca, 0x31, 0x9b, 0xe0, 0xb3, 0xd3,
	0x99, 0xb8, 0x19, 0x22, 0x9d, 0x6b, 0xf8, 0xa1, 0xb7, 0xa3, 0xbe, 0x49, 0x3e, 0xf0, 0x76, 0xcb,
	0xbe, 0x29, 0x7d, 0xf5, 0xf6, 0x26, 0xc7, 0xbc, 0xbb, 0xc9, 0x31, 0x1f, 0x6e, 0x72, 0xcc, 0xeb,
	0xdb, 0x5c, 0xec, 0xdd, 0x6d, 0x2e, 0xf6, 0xfe, 0x36, 0x17, 0xfb, 0xf6, 0xb0, 0x8f, 0xdd, 0xc1,
	0xb8, 0x23, 0x77, 0x2d, 0x23, 0x4f, 0x42, 0xa2, 0x67, 0x8d, 0x4d, 0x3d, 0x18, 0x31, 0x2d, 0xe4,
	0xaf, 0x16, 0x7f, 0xae, 0xdc, 0xeb, 0x11, 0x72, 0x3a, 0xab, 0x41, 0x7e, 0xbd, 0xf8, 0x33, 0x00,
	0x00, 0xff, 0xff, 0x31, 0x8a, 0x1a, 0x89, 0x7a, 0x09, 0x00, 0x00,
}

func (m *Program) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Program) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Program) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BountyLevels) > 0 {
		for iNdEx := len(m.BountyLevels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BountyLevels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Status != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MemberAccounts) > 0 {
		for iNdEx := len(m.MemberAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MemberAccounts[iNdEx])
			copy(dAtA[i:], m.MemberAccounts[iNdEx])
			i = encodeVarintBounty(dAtA, i, uint64(len(m.MemberAccounts[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Finding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Finding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Finding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreateTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBounty(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	if m.Status != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.SeverityLevel != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.SeverityLevel))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SubmitterAddress) > 0 {
		i -= len(m.SubmitterAddress)
		copy(dAtA[i:], m.SubmitterAddress)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.SubmitterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FindingHash) > 0 {
		i -= len(m.FindingHash)
		copy(dAtA[i:], m.FindingHash)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.FindingHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FindingId) > 0 {
		i -= len(m.FindingId)
		copy(dAtA[i:], m.FindingId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.FindingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProgramId) > 0 {
		i -= len(m.ProgramId)
		copy(dAtA[i:], m.ProgramId)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.ProgramId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BountyLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BountyLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BountyLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MaxBounty.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBounty(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.MinBounty.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBounty(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Poc {
		i--
		if m.Poc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SeverityLevel != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.SeverityLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBounty(dAtA []byte, offset int, v uint64) int {
	offset -= sovBounty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Program) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if len(m.MemberAccounts) > 0 {
		for _, s := range m.MemberAccounts {
			l = len(s)
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovBounty(uint64(m.Status))
	}
	if len(m.BountyLevels) > 0 {
		for _, e := range m.BountyLevels {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	return n
}

func (m *Finding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProgramId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.FindingId)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.FindingHash)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.SubmitterAddress)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.SeverityLevel != 0 {
		n += 1 + sovBounty(uint64(m.SeverityLevel))
	}
	if m.Status != 0 {
		n += 1 + sovBounty(uint64(m.Status))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreateTime)
	n += 1 + l + sovBounty(uint64(l))
	return n
}

func (m *BountyLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeverityLevel != 0 {
		n += 1 + sovBounty(uint64(m.SeverityLevel))
	}
	if m.Poc {
		n += 2
	}
	l = m.MinBounty.Size()
	n += 1 + l + sovBounty(uint64(l))
	l = m.MaxBounty.Size()
	n += 1 + l + sovBounty(uint64(l))
	return n
}

func sovBounty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBounty(x uint64) (n int) {
	return sovBounty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Program) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Program: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Program: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAccounts = append(m.MemberAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProgramStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountyLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BountyLevels = append(m.BountyLevels, BountyLevel{})
			if err := m.BountyLevels[len(m.BountyLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Finding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Finding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Finding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FindingHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityLevel", wireType)
			}
			m.SeverityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityLevel |= SeverityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= FindingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BountyLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BountyLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BountyLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityLevel", wireType)
			}
			m.SeverityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityLevel |= SeverityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Poc = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBounty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBounty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBounty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBounty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBounty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBounty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBounty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBounty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBounty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBounty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBounty = fmt.Errorf("proto: unexpected end of group")
)
