// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/bounty/v1/bounty.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SeverityLevel int32

const (
	SeverityLevelCritical      SeverityLevel = 0
	SeverityLevelMajor         SeverityLevel = 1
	SeverityLevelMedium        SeverityLevel = 2
	SeverityLevelMinor         SeverityLevel = 3
	SeverityLevelOptimization  SeverityLevel = 4
	SeverityLevelInformational SeverityLevel = 5
)

var SeverityLevel_name = map[int32]string{
	0: "SEVERITY_LEVEL_CRITICAL",
	1: "SEVERITY_LEVEL_MAJOR",
	2: "SEVERITY_LEVEL_MEDIUM",
	3: "SEVERITY_LEVEL_MINOR",
	4: "SEVERITY_LEVEL_OPTIMIZATION",
	5: "SEVERITY_LEVEL_INFORMATIONAL",
}

var SeverityLevel_value = map[string]int32{
	"SEVERITY_LEVEL_CRITICAL":      0,
	"SEVERITY_LEVEL_MAJOR":         1,
	"SEVERITY_LEVEL_MEDIUM":        2,
	"SEVERITY_LEVEL_MINOR":         3,
	"SEVERITY_LEVEL_OPTIMIZATION":  4,
	"SEVERITY_LEVEL_INFORMATIONAL": 5,
}

func (x SeverityLevel) String() string {
	return proto.EnumName(SeverityLevel_name, int32(x))
}

func (SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{0}
}

type FindingStatus int32

const (
	FindingStatusUnConfirmed FindingStatus = 0
	FindingStatusValid       FindingStatus = 1
	FindingStatusInvalid     FindingStatus = 2
)

var FindingStatus_name = map[int32]string{
	0: "FINDING_STATUS_UNCONFIRMED",
	1: "FINDING_STATUS_VALID",
	2: "FINDING_STATUS_INVALID",
}

var FindingStatus_value = map[string]int32{
	"FINDING_STATUS_UNCONFIRMED": 0,
	"FINDING_STATUS_VALID":       1,
	"FINDING_STATUS_INVALID":     2,
}

func (x FindingStatus) String() string {
	return proto.EnumName(FindingStatus_name, int32(x))
}

func (FindingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{1}
}

type Program struct {
	ProgramId         uint64                                 `protobuf:"varint,1,opt,name=program_id,json=programId,proto3" json:"id" yaml:"id"`
	CreatorAddress    string                                 `protobuf:"bytes,2,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty" yaml:"creator_address"`
	SubmissionEndTime time.Time                              `protobuf:"bytes,3,opt,name=submission_end_time,json=submissionEndTime,proto3,stdtime" json:"submission_end_time" yaml:"submission_end_time"`
	Description       string                                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	EncryptionKey     *types.Any                             `protobuf:"bytes,5,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty" yaml:"encryption_key"`
	Deposit           []types1.Coin                          `protobuf:"bytes,6,rep,name=deposit,proto3" json:"deposit" yaml:"deposit"`
	CommissionRate    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=commission_rate,json=commissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_rate"`
	Active            bool                                   `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty" yaml:"active"`
}

func (m *Program) Reset()         { *m = Program{} }
func (m *Program) String() string { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()    {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{0}
}
func (m *Program) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Program.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(m, src)
}
func (m *Program) XXX_Size() int {
	return m.Size()
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

func (m *Program) GetProgramId() uint64 {
	if m != nil {
		return m.ProgramId
	}
	return 0
}

func (m *Program) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

func (m *Program) GetSubmissionEndTime() time.Time {
	if m != nil {
		return m.SubmissionEndTime
	}
	return time.Time{}
}

func (m *Program) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Program) GetEncryptionKey() *types.Any {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *Program) GetDeposit() []types1.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *Program) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type EciesPubKey struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *EciesPubKey) Reset()         { *m = EciesPubKey{} }
func (m *EciesPubKey) String() string { return proto.CompactTextString(m) }
func (*EciesPubKey) ProtoMessage()    {}
func (*EciesPubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{1}
}
func (m *EciesPubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EciesPubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EciesPubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EciesPubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EciesPubKey.Merge(m, src)
}
func (m *EciesPubKey) XXX_Size() int {
	return m.Size()
}
func (m *EciesPubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_EciesPubKey.DiscardUnknown(m)
}

var xxx_messageInfo_EciesPubKey proto.InternalMessageInfo

func (m *EciesPubKey) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type Finding struct {
	FindingId        uint64        `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"id" yaml:"id"`
	Title            string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	EncryptedDesc    *types.Any    `protobuf:"bytes,3,opt,name=encrypted_desc,json=encryptedDesc,proto3" json:"encrypted_desc,omitempty" yaml:"encrypted_desc"`
	Pid              uint64        `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty" yaml:"pid"`
	SeverityLevel    SeverityLevel `protobuf:"varint,5,opt,name=severity_level,json=severityLevel,proto3,enum=shentu.bounty.v1.SeverityLevel" json:"severity_level,omitempty" yaml:"severity_level"`
	EncryptedPoc     *types.Any    `protobuf:"bytes,6,opt,name=encrypted_poc,json=encryptedPoc,proto3" json:"encrypted_poc,omitempty" yaml:"encrypted_poc"`
	SubmitterAddress string        `protobuf:"bytes,7,opt,name=submitter_address,json=submitterAddress,proto3" json:"submitter_address,omitempty" yaml:"submitter_address"`
	FindingStatus    FindingStatus `protobuf:"varint,8,opt,name=finding_status,json=findingStatus,proto3,enum=shentu.bounty.v1.FindingStatus" json:"finding_status,omitempty" yaml:"finding_status"`
}

func (m *Finding) Reset()         { *m = Finding{} }
func (m *Finding) String() string { return proto.CompactTextString(m) }
func (*Finding) ProtoMessage()    {}
func (*Finding) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{2}
}
func (m *Finding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Finding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Finding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Finding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Finding.Merge(m, src)
}
func (m *Finding) XXX_Size() int {
	return m.Size()
}
func (m *Finding) XXX_DiscardUnknown() {
	xxx_messageInfo_Finding.DiscardUnknown(m)
}

var xxx_messageInfo_Finding proto.InternalMessageInfo

func (m *Finding) GetFindingId() uint64 {
	if m != nil {
		return m.FindingId
	}
	return 0
}

func (m *Finding) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Finding) GetEncryptedDesc() *types.Any {
	if m != nil {
		return m.EncryptedDesc
	}
	return nil
}

func (m *Finding) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Finding) GetSeverityLevel() SeverityLevel {
	if m != nil {
		return m.SeverityLevel
	}
	return SeverityLevelCritical
}

func (m *Finding) GetEncryptedPoc() *types.Any {
	if m != nil {
		return m.EncryptedPoc
	}
	return nil
}

func (m *Finding) GetSubmitterAddress() string {
	if m != nil {
		return m.SubmitterAddress
	}
	return ""
}

func (m *Finding) GetFindingStatus() FindingStatus {
	if m != nil {
		return m.FindingStatus
	}
	return FindingStatusUnConfirmed
}

type EciesEncryptedDesc struct {
	Desc []byte `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *EciesEncryptedDesc) Reset()         { *m = EciesEncryptedDesc{} }
func (m *EciesEncryptedDesc) String() string { return proto.CompactTextString(m) }
func (*EciesEncryptedDesc) ProtoMessage()    {}
func (*EciesEncryptedDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{3}
}
func (m *EciesEncryptedDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EciesEncryptedDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EciesEncryptedDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EciesEncryptedDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EciesEncryptedDesc.Merge(m, src)
}
func (m *EciesEncryptedDesc) XXX_Size() int {
	return m.Size()
}
func (m *EciesEncryptedDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_EciesEncryptedDesc.DiscardUnknown(m)
}

var xxx_messageInfo_EciesEncryptedDesc proto.InternalMessageInfo

func (m *EciesEncryptedDesc) GetDesc() []byte {
	if m != nil {
		return m.Desc
	}
	return nil
}

type EciesEncryptedPoc struct {
	Poc []byte `protobuf:"bytes,1,opt,name=poc,proto3" json:"poc,omitempty"`
}

func (m *EciesEncryptedPoc) Reset()         { *m = EciesEncryptedPoc{} }
func (m *EciesEncryptedPoc) String() string { return proto.CompactTextString(m) }
func (*EciesEncryptedPoc) ProtoMessage()    {}
func (*EciesEncryptedPoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{4}
}
func (m *EciesEncryptedPoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EciesEncryptedPoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EciesEncryptedPoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EciesEncryptedPoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EciesEncryptedPoc.Merge(m, src)
}
func (m *EciesEncryptedPoc) XXX_Size() int {
	return m.Size()
}
func (m *EciesEncryptedPoc) XXX_DiscardUnknown() {
	xxx_messageInfo_EciesEncryptedPoc.DiscardUnknown(m)
}

var xxx_messageInfo_EciesEncryptedPoc proto.InternalMessageInfo

func (m *EciesEncryptedPoc) GetPoc() []byte {
	if m != nil {
		return m.Poc
	}
	return nil
}

func init() {
	proto.RegisterEnum("shentu.bounty.v1.SeverityLevel", SeverityLevel_name, SeverityLevel_value)
	proto.RegisterEnum("shentu.bounty.v1.FindingStatus", FindingStatus_name, FindingStatus_value)
	proto.RegisterType((*Program)(nil), "shentu.bounty.v1.Program")
	proto.RegisterType((*EciesPubKey)(nil), "shentu.bounty.v1.EciesPubKey")
	proto.RegisterType((*Finding)(nil), "shentu.bounty.v1.Finding")
	proto.RegisterType((*EciesEncryptedDesc)(nil), "shentu.bounty.v1.EciesEncryptedDesc")
	proto.RegisterType((*EciesEncryptedPoc)(nil), "shentu.bounty.v1.EciesEncryptedPoc")
}

func init() { proto.RegisterFile("shentu/bounty/v1/bounty.proto", fileDescriptor_36e6d679af1b94c6) }

var fileDescriptor_36e6d679af1b94c6 = []byte{
	// 1134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4d, 0x6f, 0xe3, 0xc4,
	0x1b, 0x4f, 0xda, 0x6c, 0xbb, 0x3b, 0x6d, 0xb2, 0xe9, 0x6c, 0xb7, 0xeb, 0xfa, 0xbf, 0x1b, 0x5b,
	0x3e, 0x54, 0xf9, 0x57, 0x5a, 0x87, 0x16, 0x84, 0x96, 0x82, 0x10, 0x79, 0x2b, 0x32, 0xcd, 0x4b,
	0xe5, 0xa6, 0x45, 0xec, 0xc5, 0x72, 0xec, 0x49, 0x76, 0xd8, 0xd8, 0x63, 0xd9, 0x4e, 0x44, 0xf8,
	0x04, 0x28, 0xa7, 0xfd, 0x02, 0x91, 0x90, 0xf8, 0x0a, 0xdc, 0xf8, 0x02, 0x2b, 0x4e, 0x2b, 0x4e,
	0x88, 0x83, 0x41, 0xed, 0x01, 0x84, 0x38, 0xa0, 0x7c, 0x02, 0xe4, 0x19, 0xa7, 0xb5, 0x4d, 0x05,
	0x9c, 0x32, 0xf3, 0x3c, 0xbf, 0xdf, 0xe3, 0xe7, 0xe5, 0x37, 0x8f, 0x02, 0x9e, 0x78, 0x2f, 0x90,
	0xed, 0x8f, 0x2b, 0x7d, 0x32, 0xb6, 0xfd, 0x69, 0x65, 0x72, 0x10, 0x9d, 0x64, 0xc7, 0x25, 0x3e,
	0x81, 0x45, 0xe6, 0x96, 0x23, 0xe3, 0xe4, 0x80, 0xdf, 0x1e, 0x92, 0x21, 0xa1, 0xce, 0x4a, 0x78,
	0x62, 0x38, 0x5e, 0x18, 0x12, 0x32, 0x1c, 0xa1, 0x0a, 0xbd, 0xf5, 0xc7, 0x83, 0x8a, 0x8f, 0x2d,
	0xe4, 0xf9, 0xba, 0xe5, 0x44, 0x80, 0x92, 0x41, 0x3c, 0x8b, 0x78, 0x95, 0xbe, 0xee, 0xa1, 0xca,
	0xe4, 0xa0, 0x8f, 0x7c, 0xfd, 0xa0, 0x62, 0x10, 0x6c, 0x47, 0xfe, 0x5d, 0xe6, 0xd7, 0x58, 0x64,
	0x76, 0x59, 0xba, 0xd2, 0xb1, 0x75, 0x3b, 0x4a, 0x4f, 0xfa, 0x33, 0x07, 0xd6, 0x4f, 0x5d, 0x32,
	0x74, 0x75, 0x0b, 0x1e, 0x02, 0xe0, 0xb0, 0xa3, 0x86, 0x4d, 0x2e, 0x2b, 0x66, 0xcb, 0xb9, 0xda,
	0x83, 0xdf, 0x03, 0x61, 0x05, 0x9b, 0x8b, 0x40, 0xb8, 0x37, 0xd5, 0xad, 0xd1, 0x91, 0x84, 0x4d,
	0x49, 0xbd, 0x17, 0xc1, 0x14, 0x13, 0xd6, 0xc1, 0x7d, 0xc3, 0x45, 0xba, 0x4f, 0x5c, 0x4d, 0x37,
	0x4d, 0x17, 0x79, 0x1e, 0xb7, 0x22, 0x66, 0xcb, 0xf7, 0x6a, 0xfc, 0x22, 0x10, 0x76, 0x18, 0x25,
	0x05, 0x90, 0xd4, 0x42, 0x64, 0xa9, 0x32, 0x03, 0x74, 0xc1, 0x03, 0x6f, 0xdc, 0xb7, 0xb0, 0xe7,
	0x61, 0x62, 0x6b, 0xc8, 0x36, 0xb5, 0xb0, 0x78, 0x6e, 0x55, 0xcc, 0x96, 0x37, 0x0e, 0x79, 0x99,
	0x65, 0x2f, 0x2f, 0xb3, 0x97, 0x7b, 0xcb, 0xce, 0xd4, 0xf6, 0x5e, 0x07, 0x42, 0x66, 0x11, 0x08,
	0x3c, 0xfb, 0xd0, 0x2d, 0x41, 0xa4, 0x57, 0x3f, 0x0b, 0x59, 0x75, 0xeb, 0xc6, 0xd3, 0xb4, 0xcd,
	0x90, 0x0f, 0x9f, 0x81, 0x0d, 0x13, 0x79, 0x86, 0x8b, 0x1d, 0x1f, 0x13, 0x9b, 0xcb, 0xd1, 0xa4,
	0x77, 0x16, 0x81, 0x00, 0x59, 0xac, 0x98, 0x53, 0x52, 0xe3, 0x50, 0x38, 0x04, 0x05, 0x64, 0x1b,
	0xee, 0x94, 0xde, 0xb4, 0x97, 0x68, 0xca, 0xdd, 0xa1, 0x89, 0x6e, 0xff, 0x2d, 0xd1, 0xaa, 0x3d,
	0xad, 0xed, 0x2f, 0x02, 0xe1, 0x21, 0x0b, 0x99, 0x64, 0x49, 0xdf, 0x7f, 0xfb, 0x34, 0xdf, 0xbc,
	0x36, 0x9d, 0xa0, 0xa9, 0x9a, 0x47, 0xf1, 0x2b, 0x3c, 0x01, 0xeb, 0x26, 0x72, 0x88, 0x87, 0x7d,
	0x6e, 0x4d, 0x5c, 0x2d, 0x6f, 0x1c, 0xee, 0xca, 0xd1, 0x58, 0x43, 0x0d, 0xc8, 0x91, 0x06, 0xe4,
	0x3a, 0xc1, 0x76, 0x6d, 0x27, 0xea, 0x44, 0x61, 0x99, 0x3d, 0xe5, 0x49, 0xea, 0x32, 0x02, 0xfc,
	0x14, 0xdc, 0x37, 0x88, 0xb5, 0x6c, 0x8f, 0xab, 0xfb, 0x88, 0x5b, 0xa7, 0x35, 0xcb, 0x21, 0xf3,
	0xa7, 0x40, 0xd8, 0x1b, 0x62, 0xff, 0xc5, 0xb8, 0x2f, 0x1b, 0xc4, 0x8a, 0xd4, 0x13, 0xfd, 0x3c,
	0xf5, 0xcc, 0x97, 0x15, 0x7f, 0xea, 0x20, 0x4f, 0x6e, 0x20, 0x43, 0x2d, 0xdc, 0x84, 0x51, 0x75,
	0x1f, 0xc1, 0xff, 0x83, 0x35, 0xdd, 0xf0, 0xf1, 0x04, 0x71, 0x77, 0xc5, 0x6c, 0xf9, 0x6e, 0x6d,
	0x6b, 0x11, 0x08, 0x79, 0x96, 0x05, 0xb3, 0x4b, 0x6a, 0x04, 0x38, 0xca, 0xfd, 0xf6, 0xb5, 0x90,
	0x91, 0xde, 0x03, 0x1b, 0x4d, 0x03, 0x23, 0xef, 0x74, 0xdc, 0x0f, 0xab, 0x7c, 0x04, 0xd6, 0x9d,
	0x71, 0x9f, 0xf6, 0x31, 0x94, 0xdc, 0xa6, 0xba, 0xe6, 0x50, 0xc7, 0xd1, 0xd6, 0x0f, 0xe9, 0x06,
	0x49, 0x7f, 0xe4, 0xc0, 0xfa, 0x31, 0xb6, 0x4d, 0x6c, 0x0f, 0x43, 0xb5, 0x0e, 0xd8, 0xf1, 0xdf,
	0xd4, 0x1a, 0xc1, 0x14, 0x13, 0xee, 0x81, 0x3b, 0x3e, 0xf6, 0x47, 0x28, 0xd2, 0x68, 0x71, 0x11,
	0x08, 0x9b, 0x0c, 0x48, 0xcd, 0x92, 0xca, 0xdc, 0xb1, 0x11, 0x23, 0x53, 0x0b, 0x67, 0x1f, 0x69,
	0xf1, 0xbf, 0x8e, 0x38, 0x62, 0xc5, 0x47, 0x8c, 0xcc, 0x06, 0xf2, 0x8c, 0xeb, 0x11, 0xb3, 0x2b,
	0x14, 0xc1, 0xaa, 0x83, 0x4d, 0xaa, 0xbe, 0x5c, 0xad, 0xb0, 0x08, 0x04, 0xc0, 0xe2, 0x38, 0x61,
	0xe2, 0xa1, 0x0b, 0xea, 0xa0, 0xe0, 0xa1, 0x09, 0x72, 0xb1, 0x3f, 0xd5, 0x46, 0x68, 0x82, 0x46,
	0x54, 0x6d, 0x85, 0x43, 0x41, 0x4e, 0x2f, 0x16, 0xf9, 0x2c, 0xc2, 0xb5, 0x42, 0x58, 0x6d, 0xf7,
	0x26, 0xab, 0x64, 0x00, 0x49, 0xcd, 0x7b, 0x71, 0x24, 0x34, 0xc0, 0x4d, 0x56, 0x9a, 0x43, 0x0c,
	0x6e, 0xed, 0x1f, 0x8a, 0x2d, 0x2f, 0x02, 0x61, 0x3b, 0x5d, 0xac, 0x43, 0x68, 0xad, 0x9b, 0xd7,
	0xb5, 0x9e, 0x12, 0x43, 0xdd, 0x44, 0xb1, 0x1b, 0x54, 0x00, 0x7b, 0x84, 0xbe, 0x8f, 0x6e, 0x56,
	0x05, 0x53, 0xe0, 0xe3, 0x45, 0x20, 0x70, 0xb1, 0x17, 0x1c, 0x87, 0x48, 0x6a, 0xf1, 0xda, 0xb6,
	0x5c, 0x17, 0x3a, 0x28, 0x2c, 0x27, 0xef, 0xf9, 0xba, 0x3f, 0xf6, 0xa8, 0xf2, 0x6e, 0x6d, 0x49,
	0x24, 0x96, 0x33, 0x0a, 0x8b, 0xb7, 0x24, 0x19, 0x40, 0x52, 0xf3, 0x83, 0x38, 0x32, 0x52, 0xea,
	0xfb, 0x00, 0x52, 0xa5, 0x26, 0x46, 0x08, 0x21, 0xc8, 0x51, 0x49, 0x30, 0xb5, 0xd2, 0x73, 0x42,
	0xab, 0x0c, 0x26, 0x3d, 0x03, 0x5b, 0x49, 0x72, 0xd8, 0x85, 0x22, 0x58, 0x0d, 0x1b, 0xcc, 0xa8,
	0xe1, 0x31, 0xad, 0xf2, 0x53, 0x62, 0xec, 0xff, 0xba, 0x02, 0xf2, 0x89, 0x59, 0xc2, 0x77, 0xc1,
	0xa3, 0xb3, 0xe6, 0x45, 0x53, 0x55, 0x7a, 0x9f, 0x69, 0xad, 0xe6, 0x45, 0xb3, 0xa5, 0xd5, 0x55,
	0xa5, 0xa7, 0xd4, 0xab, 0xad, 0x62, 0x86, 0xdf, 0x9d, 0xcd, 0xc5, 0x87, 0x09, 0x7c, 0xdd, 0xc5,
	0x3e, 0x36, 0xf4, 0x11, 0x7c, 0x0b, 0x6c, 0xa7, 0x78, 0xed, 0xea, 0x27, 0x5d, 0xb5, 0x98, 0xe5,
	0x77, 0x66, 0x73, 0x11, 0x26, 0x48, 0x6d, 0xfd, 0x73, 0xe2, 0xc2, 0x43, 0xf0, 0x30, 0xcd, 0x68,
	0x36, 0x94, 0xf3, 0x76, 0x71, 0x85, 0x7f, 0x34, 0x9b, 0x8b, 0x0f, 0x92, 0x14, 0x64, 0xe2, 0xb1,
	0x75, 0xdb, 0x57, 0x94, 0x4e, 0x57, 0x2d, 0xae, 0xde, 0xf6, 0x15, 0x6c, 0x13, 0x17, 0x7e, 0x08,
	0xfe, 0x97, 0x62, 0x74, 0x4f, 0x7b, 0x4a, 0x5b, 0x79, 0x5e, 0xed, 0x29, 0xdd, 0x4e, 0x31, 0xc7,
	0x3f, 0x99, 0xcd, 0xc5, 0xdd, 0x04, 0xb1, 0xeb, 0xf8, 0xd8, 0xc2, 0x5f, 0xea, 0x74, 0x05, 0x7f,
	0x04, 0x1e, 0xa7, 0xf8, 0x4a, 0xe7, 0xb8, 0xab, 0xb6, 0x29, 0xbd, 0xda, 0x2a, 0xde, 0xe1, 0x4b,
	0xb3, 0xb9, 0xc8, 0x27, 0x02, 0x28, 0xf6, 0x80, 0xb8, 0x16, 0xe5, 0xeb, 0x23, 0x3e, 0xf7, 0xd5,
	0x37, 0xa5, 0xcc, 0xfe, 0x77, 0x59, 0x90, 0x4f, 0x48, 0x04, 0x7e, 0x00, 0xf8, 0x63, 0xa5, 0xd3,
	0x50, 0x3a, 0x1f, 0x6b, 0x67, 0xbd, 0x6a, 0xef, 0xfc, 0x4c, 0x3b, 0xef, 0xd4, 0xbb, 0x9d, 0x63,
	0x45, 0x6d, 0x37, 0x1b, 0xc5, 0x0c, 0xff, 0x78, 0x36, 0x17, 0xb9, 0x04, 0xe5, 0xdc, 0xae, 0x13,
	0x7b, 0x80, 0x5d, 0x0b, 0x99, 0x61, 0x27, 0x52, 0xec, 0x8b, 0x6a, 0x4b, 0x69, 0x2c, 0xfb, 0x9d,
	0xe0, 0x5d, 0xe8, 0x23, 0x6c, 0xc2, 0x77, 0xc0, 0x4e, 0x8a, 0xa1, 0x74, 0x18, 0x67, 0x85, 0xe7,
	0x66, 0x73, 0x71, 0x3b, 0xc1, 0x51, 0xec, 0x49, 0xc8, 0x62, 0xd9, 0xd7, 0x4e, 0x5e, 0x5f, 0x96,
	0xb2, 0x6f, 0x2e, 0x4b, 0xd9, 0x5f, 0x2e, 0x4b, 0xd9, 0x57, 0x57, 0xa5, 0xcc, 0x9b, 0xab, 0x52,
	0xe6, 0xc7, 0xab, 0x52, 0xe6, 0xf9, 0x41, 0x6c, 0x97, 0xb3, 0x37, 0x31, 0x20, 0x63, 0xdb, 0xa4,
	0xc5, 0x47, 0x86, 0xca, 0x17, 0xcb, 0x7f, 0x2c, 0x74, 0xb5, 0xf7, 0xd7, 0xe8, 0x2b, 0x7f, 0xfb,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x44, 0xe4, 0x27, 0xcf, 0x08, 0x00, 0x00,
}

func (m *Program) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Program) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Program) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBounty(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EncryptionKey != nil {
		{
			size, err := m.EncryptionKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBounty(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SubmissionEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmissionEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintBounty(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProgramId != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.ProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EciesPubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EciesPubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EciesPubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Finding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Finding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Finding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FindingStatus != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.FindingStatus))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SubmitterAddress) > 0 {
		i -= len(m.SubmitterAddress)
		copy(dAtA[i:], m.SubmitterAddress)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.SubmitterAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EncryptedPoc != nil {
		{
			size, err := m.EncryptedPoc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBounty(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SeverityLevel != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.SeverityLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.Pid != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x20
	}
	if m.EncryptedDesc != nil {
		{
			size, err := m.EncryptedDesc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBounty(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.FindingId != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.FindingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EciesEncryptedDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EciesEncryptedDesc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EciesEncryptedDesc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EciesEncryptedPoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EciesEncryptedPoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EciesEncryptedPoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Poc) > 0 {
		i -= len(m.Poc)
		copy(dAtA[i:], m.Poc)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Poc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBounty(dAtA []byte, offset int, v uint64) int {
	offset -= sovBounty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Program) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProgramId != 0 {
		n += 1 + sovBounty(uint64(m.ProgramId))
	}
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmissionEndTime)
	n += 1 + l + sovBounty(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.EncryptionKey != nil {
		l = m.EncryptionKey.Size()
		n += 1 + l + sovBounty(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	l = m.CommissionRate.Size()
	n += 1 + l + sovBounty(uint64(l))
	if m.Active {
		n += 2
	}
	return n
}

func (m *EciesPubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	return n
}

func (m *Finding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FindingId != 0 {
		n += 1 + sovBounty(uint64(m.FindingId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.EncryptedDesc != nil {
		l = m.EncryptedDesc.Size()
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovBounty(uint64(m.Pid))
	}
	if m.SeverityLevel != 0 {
		n += 1 + sovBounty(uint64(m.SeverityLevel))
	}
	if m.EncryptedPoc != nil {
		l = m.EncryptedPoc.Size()
		n += 1 + l + sovBounty(uint64(l))
	}
	l = len(m.SubmitterAddress)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.FindingStatus != 0 {
		n += 1 + sovBounty(uint64(m.FindingStatus))
	}
	return n
}

func (m *EciesEncryptedDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	return n
}

func (m *EciesEncryptedPoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Poc)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	return n
}

func sovBounty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBounty(x uint64) (n int) {
	return sovBounty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Program) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Program: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Program: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			m.ProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SubmissionEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionKey == nil {
				m.EncryptionKey = &types.Any{}
			}
			if err := m.EncryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types1.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EciesPubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EciesPubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EciesPubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Finding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Finding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Finding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			m.FindingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FindingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptedDesc == nil {
				m.EncryptedDesc = &types.Any{}
			}
			if err := m.EncryptedDesc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityLevel", wireType)
			}
			m.SeverityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityLevel |= SeverityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptedPoc == nil {
				m.EncryptedPoc = &types.Any{}
			}
			if err := m.EncryptedPoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingStatus", wireType)
			}
			m.FindingStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FindingStatus |= FindingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EciesEncryptedDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EciesEncryptedDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EciesEncryptedDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = append(m.Desc[:0], dAtA[iNdEx:postIndex]...)
			if m.Desc == nil {
				m.Desc = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EciesEncryptedPoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EciesEncryptedPoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EciesEncryptedPoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poc", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poc = append(m.Poc[:0], dAtA[iNdEx:postIndex]...)
			if m.Poc == nil {
				m.Poc = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBounty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBounty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBounty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBounty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBounty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBounty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBounty = fmt.Errorf("proto: unexpected end of group")
)
