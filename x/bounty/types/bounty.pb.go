// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/bounty/v1/bounty.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Program struct {
	ProgramId         uint64                                 `protobuf:"varint,1,opt,name=program_id,json=programId,proto3" json:"id" yaml:"id"`
	CreatorAddress    string                                 `protobuf:"bytes,2,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty" yaml:"creator_address"`
	SubmissionEndTime time.Time                              `protobuf:"bytes,3,opt,name=submission_end_time,json=submissionEndTime,proto3,stdtime" json:"submission_end_time" yaml:"submission_end_time"`
	Description       string                                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	EncryptionKey     *types.Any                             `protobuf:"bytes,5,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty" yaml:"encryption_key"`
	Deposit           []types1.Coin                          `protobuf:"bytes,6,rep,name=deposit,proto3" json:"deposit" yaml:"deposit"`
	CommissionRate    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=commission_rate,json=commissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_rate"`
}

func (m *Program) Reset()         { *m = Program{} }
func (m *Program) String() string { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()    {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e6d679af1b94c6, []int{0}
}
func (m *Program) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Program.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(m, src)
}
func (m *Program) XXX_Size() int {
	return m.Size()
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

func (m *Program) GetProgramId() uint64 {
	if m != nil {
		return m.ProgramId
	}
	return 0
}

func (m *Program) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

func (m *Program) GetSubmissionEndTime() time.Time {
	if m != nil {
		return m.SubmissionEndTime
	}
	return time.Time{}
}

func (m *Program) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Program) GetEncryptionKey() *types.Any {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *Program) GetDeposit() []types1.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func init() {
	proto.RegisterType((*Program)(nil), "shentu.bounty.v1.Program")
}

func init() { proto.RegisterFile("shentu/bounty/v1/bounty.proto", fileDescriptor_36e6d679af1b94c6) }

var fileDescriptor_36e6d679af1b94c6 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcf, 0x6e, 0xd3, 0x3e,
	0x1c, 0x6f, 0xb6, 0xfe, 0x36, 0x2d, 0xd5, 0xaf, 0x83, 0xac, 0x54, 0x59, 0x24, 0x92, 0x2a, 0x87,
	0xa9, 0x97, 0x39, 0x4a, 0xb9, 0xa0, 0xdd, 0x96, 0xc1, 0x01, 0xf5, 0x32, 0x45, 0x48, 0x48, 0x5c,
	0x22, 0x27, 0xf6, 0x32, 0x6b, 0x8b, 0x1d, 0xc5, 0x4e, 0x45, 0xde, 0x62, 0x8f, 0xc0, 0x43, 0xf0,
	0x10, 0x13, 0xe2, 0xb0, 0x23, 0xe2, 0x10, 0x50, 0x7b, 0x41, 0x1c, 0xfb, 0x04, 0x28, 0xb1, 0xa3,
	0x96, 0xc1, 0x29, 0xf6, 0xf7, 0xf3, 0xc7, 0xfe, 0x7c, 0xbf, 0xb1, 0xfe, 0x9c, 0x5f, 0x63, 0x2a,
	0x4a, 0x2f, 0x66, 0x25, 0x15, 0x95, 0xb7, 0xf0, 0xd5, 0x0a, 0xe4, 0x05, 0x13, 0xcc, 0x78, 0x22,
	0x61, 0xa0, 0x8a, 0x0b, 0xdf, 0x1a, 0xa5, 0x2c, 0x65, 0x2d, 0xe8, 0x35, 0x2b, 0xc9, 0xb3, 0x8e,
	0x53, 0xc6, 0xd2, 0x5b, 0xec, 0xb5, 0xbb, 0xb8, 0xbc, 0xf2, 0x20, 0x55, 0x16, 0x96, 0xf3, 0x18,
	0x12, 0x24, 0xc3, 0x5c, 0xc0, 0x2c, 0x57, 0x04, 0x3b, 0x61, 0x3c, 0x63, 0xdc, 0x8b, 0x21, 0xc7,
	0xde, 0xc2, 0x8f, 0xb1, 0x80, 0xbe, 0x97, 0x30, 0x42, 0x3b, 0x6f, 0x89, 0x47, 0xf2, 0x50, 0xb9,
	0x91, 0x90, 0xfb, 0xa5, 0xaf, 0xef, 0x5f, 0x16, 0x2c, 0x2d, 0x60, 0x66, 0xcc, 0x74, 0x3d, 0x97,
	0xcb, 0x88, 0x20, 0x53, 0x9b, 0x68, 0xd3, 0x7e, 0x70, 0xf4, 0xab, 0x76, 0x76, 0x08, 0x5a, 0xd7,
	0xce, 0x41, 0x05, 0xb3, 0xdb, 0x33, 0x97, 0x20, 0x37, 0x3c, 0x50, 0xb4, 0x37, 0xc8, 0xb8, 0xd0,
	0x0f, 0x93, 0x02, 0x43, 0xc1, 0x8a, 0x08, 0x22, 0x54, 0x60, 0xce, 0xcd, 0x9d, 0x89, 0x36, 0x3d,
	0x08, 0xac, 0x75, 0xed, 0x8c, 0xa5, 0xe4, 0x11, 0xc1, 0x0d, 0x87, 0xaa, 0x72, 0x2e, 0x0b, 0x46,
	0xa1, 0x1f, 0xf1, 0x32, 0xce, 0x08, 0xe7, 0x84, 0xd1, 0x08, 0x53, 0x14, 0x35, 0x09, 0xcd, 0xdd,
	0x89, 0x36, 0x1d, 0xcc, 0x2c, 0x20, 0xe3, 0x83, 0x2e, 0x3e, 0x78, 0xdb, 0xc5, 0x0f, 0x4e, 0xee,
	0x6b, 0xa7, 0xb7, 0xae, 0x1d, 0x4b, 0x1e, 0xf4, 0x0f, 0x13, 0xf7, 0xee, 0xbb, 0xa3, 0x85, 0x4f,
	0x37, 0xc8, 0x6b, 0x8a, 0x1a, 0xbd, 0xf1, 0x52, 0x1f, 0x20, 0xcc, 0x93, 0x82, 0xe4, 0x82, 0x30,
	0x6a, 0xf6, 0xdb, 0x4b, 0x8f, 0xd7, 0xb5, 0x63, 0x48, 0xaf, 0x2d, 0xd0, 0x0d, 0xb7, 0xa9, 0x06,
	0xd5, 0x87, 0x98, 0x26, 0x45, 0xd5, 0xee, 0xa2, 0x1b, 0x5c, 0x99, 0xff, 0xb5, 0x17, 0x1d, 0xfd,
	0x75, 0xd1, 0x73, 0x5a, 0x05, 0xfe, 0xba, 0x76, 0x9e, 0x49, 0xcb, 0x3f, 0x55, 0xee, 0xe7, 0x4f,
	0xa7, 0x23, 0x35, 0x8b, 0xb6, 0xce, 0xc0, 0x65, 0x19, 0xcf, 0x71, 0x15, 0xfe, 0xbf, 0x21, 0xce,
	0x71, 0x65, 0xcc, 0xf5, 0x7d, 0x84, 0x73, 0xc6, 0x89, 0x30, 0xf7, 0x26, 0xbb, 0xd3, 0xc1, 0xec,
	0x18, 0x28, 0x59, 0x33, 0x6f, 0xa0, 0xe6, 0x0d, 0x2e, 0x18, 0xa1, 0xc1, 0x58, 0x35, 0x64, 0xd8,
	0x85, 0x68, 0x75, 0x6e, 0xd8, 0x39, 0x18, 0xef, 0xf4, 0xc3, 0x84, 0x65, 0x5d, 0x97, 0x0a, 0x28,
	0xb0, 0xb9, 0xdf, 0x46, 0x07, 0x8d, 0xf2, 0x5b, 0xed, 0x9c, 0xa4, 0x44, 0x5c, 0x97, 0x31, 0x48,
	0x58, 0xa6, 0xfe, 0x14, 0xf5, 0x39, 0xe5, 0xe8, 0xc6, 0x13, 0x55, 0x8e, 0x39, 0x78, 0x85, 0x93,
	0x70, 0xb8, 0xb1, 0x09, 0xa1, 0xc0, 0x67, 0xfd, 0x9f, 0x1f, 0x9d, 0x5e, 0x30, 0xbf, 0x5f, 0xda,
	0xda, 0xc3, 0xd2, 0xd6, 0x7e, 0x2c, 0x6d, 0xed, 0x6e, 0x65, 0xf7, 0x1e, 0x56, 0x76, 0xef, 0xeb,
	0xca, 0xee, 0xbd, 0xf7, 0xb7, 0x7c, 0xe5, 0x93, 0xb8, 0x62, 0x25, 0x45, 0xb0, 0x49, 0xa9, 0x0a,
	0xde, 0x87, 0xee, 0x11, 0xb5, 0xc7, 0xc4, 0x7b, 0x6d, 0x23, 0x5f, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x6d, 0x3d, 0x9a, 0x2f, 0x62, 0x03, 0x00, 0x00,
}

func (m *Program) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Program) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Program) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBounty(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBounty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EncryptionKey != nil {
		{
			size, err := m.EncryptionKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBounty(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SubmissionEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmissionEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintBounty(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintBounty(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProgramId != 0 {
		i = encodeVarintBounty(dAtA, i, uint64(m.ProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBounty(dAtA []byte, offset int, v uint64) int {
	offset -= sovBounty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Program) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProgramId != 0 {
		n += 1 + sovBounty(uint64(m.ProgramId))
	}
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmissionEndTime)
	n += 1 + l + sovBounty(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBounty(uint64(l))
	}
	if m.EncryptionKey != nil {
		l = m.EncryptionKey.Size()
		n += 1 + l + sovBounty(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovBounty(uint64(l))
		}
	}
	l = m.CommissionRate.Size()
	n += 1 + l + sovBounty(uint64(l))
	return n
}

func sovBounty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBounty(x uint64) (n int) {
	return sovBounty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Program) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Program: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Program: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			m.ProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SubmissionEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionKey == nil {
				m.EncryptionKey = &types.Any{}
			}
			if err := m.EncryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types1.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBounty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBounty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBounty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBounty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBounty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBounty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBounty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBounty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBounty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBounty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBounty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBounty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBounty = fmt.Errorf("proto: unexpected end of group")
)
