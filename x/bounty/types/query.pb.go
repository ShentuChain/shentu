// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/bounty/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryHostsRequest is the request type for the Query/Hosts RPC method.
type QueryHostsRequest struct {
}

func (m *QueryHostsRequest) Reset()         { *m = QueryHostsRequest{} }
func (m *QueryHostsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostsRequest) ProtoMessage()    {}
func (*QueryHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{0}
}
func (m *QueryHostsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostsRequest.Merge(m, src)
}
func (m *QueryHostsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostsRequest proto.InternalMessageInfo

// QueryHostsResponse is the response type for the Query/Hosts RPC method.
type QueryHostsResponse struct {
}

func (m *QueryHostsResponse) Reset()         { *m = QueryHostsResponse{} }
func (m *QueryHostsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHostsResponse) ProtoMessage()    {}
func (*QueryHostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{1}
}
func (m *QueryHostsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostsResponse.Merge(m, src)
}
func (m *QueryHostsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostsResponse proto.InternalMessageInfo

// QueryHostRequest is the request type for the Query/Host RPC method.
type QueryHostRequest struct {
	// host_addr defines the host address to query for.
	HostAddr string `protobuf:"bytes,1,opt,name=host_addr,json=hostAddr,proto3" json:"host_addr,omitempty"`
}

func (m *QueryHostRequest) Reset()         { *m = QueryHostRequest{} }
func (m *QueryHostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostRequest) ProtoMessage()    {}
func (*QueryHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{2}
}
func (m *QueryHostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostRequest.Merge(m, src)
}
func (m *QueryHostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostRequest proto.InternalMessageInfo

func (m *QueryHostRequest) GetHostAddr() string {
	if m != nil {
		return m.HostAddr
	}
	return ""
}

// QueryHostResponse is the response type for the Query/Host RPC method.
type QueryHostResponse struct {
}

func (m *QueryHostResponse) Reset()         { *m = QueryHostResponse{} }
func (m *QueryHostResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHostResponse) ProtoMessage()    {}
func (*QueryHostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{3}
}
func (m *QueryHostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostResponse.Merge(m, src)
}
func (m *QueryHostResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostResponse proto.InternalMessageInfo

// QueryProgramsRequest is the request type for the Query/Programs RPC method.
type QueryProgramsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProgramsRequest) Reset()         { *m = QueryProgramsRequest{} }
func (m *QueryProgramsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProgramsRequest) ProtoMessage()    {}
func (*QueryProgramsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{4}
}
func (m *QueryProgramsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramsRequest.Merge(m, src)
}
func (m *QueryProgramsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramsRequest proto.InternalMessageInfo

func (m *QueryProgramsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProgramsResponse is the response type for the Query/Programs RPC method.
type QueryProgramsResponse struct {
	Programs []Program `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProgramsResponse) Reset()         { *m = QueryProgramsResponse{} }
func (m *QueryProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProgramsResponse) ProtoMessage()    {}
func (*QueryProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{5}
}
func (m *QueryProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramsResponse.Merge(m, src)
}
func (m *QueryProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramsResponse proto.InternalMessageInfo

func (m *QueryProgramsResponse) GetPrograms() []Program {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *QueryProgramsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProgramRequest is the request type for the Query/Program RPC method.
type QueryProgramRequest struct {
	// program_id defines the unique id of the bounty program.
	ProgramId uint64 `protobuf:"varint,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
}

func (m *QueryProgramRequest) Reset()         { *m = QueryProgramRequest{} }
func (m *QueryProgramRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProgramRequest) ProtoMessage()    {}
func (*QueryProgramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{6}
}
func (m *QueryProgramRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramRequest.Merge(m, src)
}
func (m *QueryProgramRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramRequest proto.InternalMessageInfo

func (m *QueryProgramRequest) GetProgramId() uint64 {
	if m != nil {
		return m.ProgramId
	}
	return 0
}

// QueryProgramResponse is the response type for the Query/Program RPC method.
type QueryProgramResponse struct {
	Program Program `protobuf:"bytes,1,opt,name=program,proto3" json:"program"`
}

func (m *QueryProgramResponse) Reset()         { *m = QueryProgramResponse{} }
func (m *QueryProgramResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProgramResponse) ProtoMessage()    {}
func (*QueryProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{7}
}
func (m *QueryProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramResponse.Merge(m, src)
}
func (m *QueryProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramResponse proto.InternalMessageInfo

func (m *QueryProgramResponse) GetProgram() Program {
	if m != nil {
		return m.Program
	}
	return Program{}
}

// QueryFindingRequests is the request type for the Query/Findings RPC method.
type QueryFindingsRequest struct {
	// program_id defines the unique id of the program.
	ProgramId uint64 `protobuf:"varint,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	// submitter_address defines the find address for the finding.
	SubmitterAddress string `protobuf:"bytes,2,opt,name=submitter_address,json=submitterAddress,proto3" json:"submitter_address,omitempty"`
	// pagination defines the pagination in the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFindingsRequest) Reset()         { *m = QueryFindingsRequest{} }
func (m *QueryFindingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFindingsRequest) ProtoMessage()    {}
func (*QueryFindingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{8}
}
func (m *QueryFindingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingsRequest.Merge(m, src)
}
func (m *QueryFindingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingsRequest proto.InternalMessageInfo

func (m *QueryFindingsRequest) GetProgramId() uint64 {
	if m != nil {
		return m.ProgramId
	}
	return 0
}

func (m *QueryFindingsRequest) GetSubmitterAddress() string {
	if m != nil {
		return m.SubmitterAddress
	}
	return ""
}

func (m *QueryFindingsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFindingsResponse is the response type for the Query/Findings RPC method.
type QueryFindingsResponse struct {
	Findings []Finding `protobuf:"bytes,1,rep,name=findings,proto3" json:"findings"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFindingsResponse) Reset()         { *m = QueryFindingsResponse{} }
func (m *QueryFindingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFindingsResponse) ProtoMessage()    {}
func (*QueryFindingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{9}
}
func (m *QueryFindingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingsResponse.Merge(m, src)
}
func (m *QueryFindingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingsResponse proto.InternalMessageInfo

func (m *QueryFindingsResponse) GetFindings() []Finding {
	if m != nil {
		return m.Findings
	}
	return nil
}

func (m *QueryFindingsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryFindingRequest is the request type for the Query/Finding RPC method.
type QueryFindingRequest struct {
	// finding_id defines the unique id of the finding.
	FindingId uint64 `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty"`
}

func (m *QueryFindingRequest) Reset()         { *m = QueryFindingRequest{} }
func (m *QueryFindingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFindingRequest) ProtoMessage()    {}
func (*QueryFindingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{10}
}
func (m *QueryFindingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingRequest.Merge(m, src)
}
func (m *QueryFindingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingRequest proto.InternalMessageInfo

func (m *QueryFindingRequest) GetFindingId() uint64 {
	if m != nil {
		return m.FindingId
	}
	return 0
}

// QueryFindingResponse is the response type for the Query/Finding RPC method.
type QueryFindingResponse struct {
	Finding Finding `protobuf:"bytes,1,opt,name=finding,proto3" json:"finding"`
}

func (m *QueryFindingResponse) Reset()         { *m = QueryFindingResponse{} }
func (m *QueryFindingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFindingResponse) ProtoMessage()    {}
func (*QueryFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{11}
}
func (m *QueryFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFindingResponse.Merge(m, src)
}
func (m *QueryFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFindingResponse proto.InternalMessageInfo

func (m *QueryFindingResponse) GetFinding() Finding {
	if m != nil {
		return m.Finding
	}
	return Finding{}
}

type QueryNextProgramIDRequest struct {
}

func (m *QueryNextProgramIDRequest) Reset()         { *m = QueryNextProgramIDRequest{} }
func (m *QueryNextProgramIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextProgramIDRequest) ProtoMessage()    {}
func (*QueryNextProgramIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{12}
}
func (m *QueryNextProgramIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextProgramIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextProgramIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextProgramIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextProgramIDRequest.Merge(m, src)
}
func (m *QueryNextProgramIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextProgramIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextProgramIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextProgramIDRequest proto.InternalMessageInfo

type QueryNextProgramIDResponse struct {
	NextProgramId uint64 `protobuf:"varint,1,opt,name=next_program_id,json=nextProgramId,proto3" json:"next_program_id,omitempty"`
}

func (m *QueryNextProgramIDResponse) Reset()         { *m = QueryNextProgramIDResponse{} }
func (m *QueryNextProgramIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextProgramIDResponse) ProtoMessage()    {}
func (*QueryNextProgramIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c92d65cbd97e4b, []int{13}
}
func (m *QueryNextProgramIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextProgramIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextProgramIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextProgramIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextProgramIDResponse.Merge(m, src)
}
func (m *QueryNextProgramIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextProgramIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextProgramIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextProgramIDResponse proto.InternalMessageInfo

func (m *QueryNextProgramIDResponse) GetNextProgramId() uint64 {
	if m != nil {
		return m.NextProgramId
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryHostsRequest)(nil), "shentu.bounty.v1.QueryHostsRequest")
	proto.RegisterType((*QueryHostsResponse)(nil), "shentu.bounty.v1.QueryHostsResponse")
	proto.RegisterType((*QueryHostRequest)(nil), "shentu.bounty.v1.QueryHostRequest")
	proto.RegisterType((*QueryHostResponse)(nil), "shentu.bounty.v1.QueryHostResponse")
	proto.RegisterType((*QueryProgramsRequest)(nil), "shentu.bounty.v1.QueryProgramsRequest")
	proto.RegisterType((*QueryProgramsResponse)(nil), "shentu.bounty.v1.QueryProgramsResponse")
	proto.RegisterType((*QueryProgramRequest)(nil), "shentu.bounty.v1.QueryProgramRequest")
	proto.RegisterType((*QueryProgramResponse)(nil), "shentu.bounty.v1.QueryProgramResponse")
	proto.RegisterType((*QueryFindingsRequest)(nil), "shentu.bounty.v1.QueryFindingsRequest")
	proto.RegisterType((*QueryFindingsResponse)(nil), "shentu.bounty.v1.QueryFindingsResponse")
	proto.RegisterType((*QueryFindingRequest)(nil), "shentu.bounty.v1.QueryFindingRequest")
	proto.RegisterType((*QueryFindingResponse)(nil), "shentu.bounty.v1.QueryFindingResponse")
	proto.RegisterType((*QueryNextProgramIDRequest)(nil), "shentu.bounty.v1.QueryNextProgramIDRequest")
	proto.RegisterType((*QueryNextProgramIDResponse)(nil), "shentu.bounty.v1.QueryNextProgramIDResponse")
}

func init() { proto.RegisterFile("shentu/bounty/v1/query.proto", fileDescriptor_31c92d65cbd97e4b) }

var fileDescriptor_31c92d65cbd97e4b = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x4f, 0xd4, 0x5e,
	0x14, 0x9d, 0xf2, 0xe7, 0x07, 0xf3, 0x08, 0xf9, 0xc1, 0x03, 0x23, 0x14, 0x18, 0xb0, 0x23, 0x03,
	0x88, 0xf4, 0x65, 0xd0, 0x8d, 0x71, 0x05, 0x21, 0x28, 0x31, 0x31, 0x30, 0x4b, 0x17, 0x92, 0x0e,
	0x7d, 0x74, 0x9a, 0x38, 0x7d, 0x43, 0xdf, 0x2b, 0x81, 0x20, 0x31, 0x71, 0xe7, 0xce, 0xc4, 0xb8,
	0xf4, 0x0b, 0x18, 0x3f, 0x08, 0x4b, 0x12, 0x37, 0xae, 0x8c, 0x01, 0x3f, 0x88, 0xe9, 0xeb, 0x7d,
	0x9d, 0x76, 0x4a, 0x67, 0x48, 0x74, 0x37, 0xb9, 0xef, 0xdc, 0x7b, 0xce, 0xbd, 0x67, 0xee, 0x4d,
	0xd1, 0x2c, 0x6f, 0x50, 0x4f, 0x04, 0xa4, 0xce, 0x02, 0x4f, 0x9c, 0x92, 0xe3, 0x2a, 0x39, 0x0a,
	0xa8, 0x7f, 0x6a, 0xb6, 0x7c, 0x26, 0x18, 0x1e, 0x8b, 0x5e, 0xcd, 0xe8, 0xd5, 0x3c, 0xae, 0xea,
	0x93, 0x0e, 0x73, 0x98, 0x7c, 0x24, 0xe1, 0xaf, 0x08, 0xa7, 0xcf, 0x3a, 0x8c, 0x39, 0x6f, 0x28,
	0xb1, 0x5a, 0x2e, 0xb1, 0x3c, 0x8f, 0x09, 0x4b, 0xb8, 0xcc, 0xe3, 0xf0, 0xfa, 0xe0, 0x80, 0xf1,
	0x26, 0xe3, 0xa4, 0x6e, 0x71, 0x1a, 0x95, 0x27, 0xc7, 0xd5, 0x3a, 0x15, 0x56, 0x95, 0xb4, 0x2c,
	0xc7, 0xf5, 0x24, 0x18, 0xb0, 0x73, 0x19, 0x3d, 0xc0, 0x2d, 0x9f, 0x8d, 0x09, 0x34, 0xbe, 0x17,
	0x16, 0x78, 0xce, 0xb8, 0xe0, 0x35, 0x7a, 0x14, 0x50, 0x2e, 0x8c, 0x49, 0x84, 0x93, 0x41, 0xde,
	0x62, 0x1e, 0xa7, 0x06, 0x41, 0x63, 0x71, 0x14, 0x90, 0x78, 0x06, 0x15, 0x1b, 0x8c, 0x8b, 0x7d,
	0xcb, 0xb6, 0xfd, 0x29, 0x6d, 0x41, 0x5b, 0x2e, 0xd6, 0x86, 0xc3, 0xc0, 0x86, 0x6d, 0xfb, 0xa9,
	0xda, 0x71, 0x95, 0xd7, 0x68, 0x52, 0x06, 0x77, 0x7d, 0xe6, 0xf8, 0x56, 0x53, 0x71, 0xe2, 0x6d,
	0x84, 0xda, 0xda, 0x65, 0xa9, 0x91, 0xf5, 0x8a, 0x19, 0x35, 0x6a, 0x86, 0x8d, 0x9a, 0xd1, 0x1c,
	0xa1, 0x51, 0x73, 0xd7, 0x72, 0x28, 0xe4, 0xd6, 0x12, 0x99, 0xc6, 0x17, 0x0d, 0xdd, 0xe9, 0x20,
	0x88, 0x98, 0xf1, 0x53, 0x34, 0xdc, 0x82, 0xd8, 0x94, 0xb6, 0xd0, 0xbf, 0x3c, 0xb2, 0x3e, 0x6d,
	0x76, 0xda, 0x61, 0x42, 0xd6, 0xe6, 0xc0, 0xc5, 0xcf, 0xf9, 0x42, 0x2d, 0x4e, 0xc0, 0xcf, 0x52,
	0xf2, 0xfa, 0xa4, 0xbc, 0xa5, 0x9e, 0xf2, 0x22, 0xe6, 0x94, 0xbe, 0xc7, 0x68, 0x22, 0x29, 0x4f,
	0xb5, 0x3f, 0x87, 0x10, 0x70, 0xed, 0xbb, 0xb6, 0x6c, 0x7f, 0xa0, 0x56, 0x84, 0xc8, 0x8e, 0x6d,
	0xec, 0xa5, 0xa7, 0x16, 0xf7, 0xf4, 0x04, 0x0d, 0x01, 0x08, 0x46, 0xd6, 0xb3, 0x25, 0x85, 0x37,
	0xbe, 0x6a, 0x50, 0x73, 0xdb, 0xf5, 0x6c, 0xd7, 0x73, 0xf8, 0xed, 0xa4, 0xe0, 0x55, 0x34, 0xce,
	0x83, 0x7a, 0xd3, 0x15, 0x82, 0xfa, 0xd2, 0x77, 0xca, 0xb9, 0x1c, 0x48, 0xb1, 0x36, 0x16, 0x3f,
	0x6c, 0x44, 0xf1, 0x0e, 0x57, 0xfb, 0xff, 0xde, 0xd5, 0xb6, 0xd8, 0xb6, 0xab, 0x87, 0x10, 0xcb,
	0x77, 0x15, 0xb2, 0x94, 0xab, 0x2a, 0xe1, 0xdf, 0xbb, 0x0a, 0x44, 0x89, 0x51, 0x02, 0x57, 0x62,
	0x94, 0x10, 0x49, 0xb8, 0x1a, 0x67, 0xb5, 0x5d, 0x05, 0x50, 0xbe, 0xab, 0xe9, 0x96, 0x14, 0xde,
	0x98, 0x41, 0xd3, 0xb2, 0xe4, 0x4b, 0x7a, 0x22, 0xc0, 0xf8, 0x9d, 0x2d, 0xb5, 0xd7, 0x5b, 0x48,
	0xbf, 0xe9, 0x11, 0x58, 0x2b, 0xe8, 0x7f, 0x8f, 0x9e, 0x88, 0xfd, 0x8c, 0xf9, 0xa3, 0x5e, 0x02,
	0x6f, 0xaf, 0x7f, 0x1b, 0x42, 0x83, 0xb2, 0x0c, 0xe6, 0x68, 0x50, 0x9e, 0x08, 0x5c, 0xce, 0xea,
	0xcb, 0x5c, 0x15, 0xfd, 0x7e, 0x77, 0x10, 0xdc, 0x87, 0xf9, 0xf7, 0xdf, 0x7f, 0x7f, 0xea, 0x9b,
	0xc6, 0x77, 0x49, 0xe6, 0x70, 0x35, 0x24, 0xd7, 0x5b, 0x34, 0x10, 0x66, 0x60, 0xa3, 0x4b, 0x39,
	0x45, 0x59, 0xee, 0x8a, 0x01, 0xc6, 0x55, 0xc9, 0xb8, 0x88, 0xcb, 0x39, 0x8c, 0xe4, 0x2c, 0x3e,
	0x71, 0xe7, 0xf8, 0x1d, 0x1a, 0x56, 0x87, 0x05, 0x57, 0x72, 0xaa, 0x77, 0x9c, 0x36, 0x7d, 0xa9,
	0x27, 0x0e, 0x94, 0x18, 0x52, 0xc9, 0x2c, 0xd6, 0xb3, 0x4a, 0xe2, 0x43, 0xf4, 0x41, 0x43, 0x43,
	0x90, 0x88, 0x17, 0xbb, 0x17, 0x56, 0xfc, 0x95, 0x5e, 0x30, 0x75, 0xe0, 0x25, 0xfd, 0x0a, 0x5e,
	0xca, 0xa7, 0x27, 0x67, 0xed, 0x7f, 0x87, 0x1c, 0x86, 0xda, 0xc7, 0xdc, 0x61, 0x74, 0x5c, 0x97,
	0xdc, 0x61, 0x74, 0x2e, 0x76, 0xb7, 0x61, 0xc4, 0xfb, 0x1b, 0x0e, 0x03, 0x12, 0x73, 0x87, 0x91,
	0x5e, 0x49, 0xbd, 0xd2, 0x0b, 0xd6, 0x7b, 0x18, 0x8a, 0x9e, 0x9c, 0xb5, 0x97, 0xfb, 0x1c, 0x7f,
	0xd6, 0xd0, 0x68, 0x6a, 0xb1, 0xf0, 0x6a, 0x0e, 0xd5, 0x4d, 0xbb, 0xa9, 0x3f, 0xbc, 0x1d, 0x18,
	0xd4, 0xad, 0x48, 0x75, 0x65, 0x7c, 0x2f, 0xab, 0x2e, 0x5c, 0xd6, 0x35, 0x70, 0x69, 0xcd, 0xb5,
	0x37, 0x5f, 0x5c, 0x5c, 0x95, 0xb4, 0xcb, 0xab, 0x92, 0xf6, 0xeb, 0xaa, 0xa4, 0x7d, 0xbc, 0x2e,
	0x15, 0x2e, 0xaf, 0x4b, 0x85, 0x1f, 0xd7, 0xa5, 0xc2, 0xab, 0xaa, 0xe3, 0x8a, 0x46, 0x50, 0x37,
	0x0f, 0x58, 0x13, 0xca, 0x1c, 0xb2, 0xc0, 0xb3, 0xe5, 0x45, 0x53, 0x75, 0x4f, 0x54, 0x65, 0x71,
	0xda, 0xa2, 0xbc, 0xfe, 0x9f, 0xfc, 0x6a, 0x78, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xba,
	0xd0, 0xb3, 0xe6, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Hosts queries all hosts that match the given status.
	Hosts(ctx context.Context, in *QueryHostsRequest, opts ...grpc.CallOption) (*QueryHostsResponse, error)
	// Host queries host info for given host address.
	Host(ctx context.Context, in *QueryHostRequest, opts ...grpc.CallOption) (*QueryHostResponse, error)
	// Programs queries all programs based on given status.
	Programs(ctx context.Context, in *QueryProgramsRequest, opts ...grpc.CallOption) (*QueryProgramsResponse, error)
	// Program queries program details based on ProgramId.
	Program(ctx context.Context, in *QueryProgramRequest, opts ...grpc.CallOption) (*QueryProgramResponse, error)
	// Findings queries findings of a given program.
	Findings(ctx context.Context, in *QueryFindingsRequest, opts ...grpc.CallOption) (*QueryFindingsResponse, error)
	// Finding queries Finding information based on programID, FindingId.
	Finding(ctx context.Context, in *QueryFindingRequest, opts ...grpc.CallOption) (*QueryFindingResponse, error)
	NextProgramID(ctx context.Context, in *QueryNextProgramIDRequest, opts ...grpc.CallOption) (*QueryNextProgramIDResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Hosts(ctx context.Context, in *QueryHostsRequest, opts ...grpc.CallOption) (*QueryHostsResponse, error) {
	out := new(QueryHostsResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Host(ctx context.Context, in *QueryHostRequest, opts ...grpc.CallOption) (*QueryHostResponse, error) {
	out := new(QueryHostResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Host", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Programs(ctx context.Context, in *QueryProgramsRequest, opts ...grpc.CallOption) (*QueryProgramsResponse, error) {
	out := new(QueryProgramsResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Programs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Program(ctx context.Context, in *QueryProgramRequest, opts ...grpc.CallOption) (*QueryProgramResponse, error) {
	out := new(QueryProgramResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Program", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Findings(ctx context.Context, in *QueryFindingsRequest, opts ...grpc.CallOption) (*QueryFindingsResponse, error) {
	out := new(QueryFindingsResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Findings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Finding(ctx context.Context, in *QueryFindingRequest, opts ...grpc.CallOption) (*QueryFindingResponse, error) {
	out := new(QueryFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/Finding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextProgramID(ctx context.Context, in *QueryNextProgramIDRequest, opts ...grpc.CallOption) (*QueryNextProgramIDResponse, error) {
	out := new(QueryNextProgramIDResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Query/NextProgramID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Hosts queries all hosts that match the given status.
	Hosts(context.Context, *QueryHostsRequest) (*QueryHostsResponse, error)
	// Host queries host info for given host address.
	Host(context.Context, *QueryHostRequest) (*QueryHostResponse, error)
	// Programs queries all programs based on given status.
	Programs(context.Context, *QueryProgramsRequest) (*QueryProgramsResponse, error)
	// Program queries program details based on ProgramId.
	Program(context.Context, *QueryProgramRequest) (*QueryProgramResponse, error)
	// Findings queries findings of a given program.
	Findings(context.Context, *QueryFindingsRequest) (*QueryFindingsResponse, error)
	// Finding queries Finding information based on programID, FindingId.
	Finding(context.Context, *QueryFindingRequest) (*QueryFindingResponse, error)
	NextProgramID(context.Context, *QueryNextProgramIDRequest) (*QueryNextProgramIDResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Hosts(ctx context.Context, req *QueryHostsRequest) (*QueryHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hosts not implemented")
}
func (*UnimplementedQueryServer) Host(ctx context.Context, req *QueryHostRequest) (*QueryHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Host not implemented")
}
func (*UnimplementedQueryServer) Programs(ctx context.Context, req *QueryProgramsRequest) (*QueryProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Programs not implemented")
}
func (*UnimplementedQueryServer) Program(ctx context.Context, req *QueryProgramRequest) (*QueryProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Program not implemented")
}
func (*UnimplementedQueryServer) Findings(ctx context.Context, req *QueryFindingsRequest) (*QueryFindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Findings not implemented")
}
func (*UnimplementedQueryServer) Finding(ctx context.Context, req *QueryFindingRequest) (*QueryFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finding not implemented")
}
func (*UnimplementedQueryServer) NextProgramID(ctx context.Context, req *QueryNextProgramIDRequest) (*QueryNextProgramIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextProgramID not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Hosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Hosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Hosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Hosts(ctx, req.(*QueryHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Host_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Host(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Host",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Host(ctx, req.(*QueryHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Programs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Programs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Programs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Programs(ctx, req.(*QueryProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Program_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Program(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Program",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Program(ctx, req.(*QueryProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Findings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Findings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Findings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Findings(ctx, req.(*QueryFindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Finding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Finding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/Finding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Finding(ctx, req.(*QueryFindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextProgramID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextProgramIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextProgramID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Query/NextProgramID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextProgramID(ctx, req.(*QueryNextProgramIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.bounty.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hosts",
			Handler:    _Query_Hosts_Handler,
		},
		{
			MethodName: "Host",
			Handler:    _Query_Host_Handler,
		},
		{
			MethodName: "Programs",
			Handler:    _Query_Programs_Handler,
		},
		{
			MethodName: "Program",
			Handler:    _Query_Program_Handler,
		},
		{
			MethodName: "Findings",
			Handler:    _Query_Findings_Handler,
		},
		{
			MethodName: "Finding",
			Handler:    _Query_Finding_Handler,
		},
		{
			MethodName: "NextProgramID",
			Handler:    _Query_NextProgramID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/bounty/v1/query.proto",
}

func (m *QueryHostsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryHostsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryHostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostAddr) > 0 {
		i -= len(m.HostAddr)
		copy(dAtA[i:], m.HostAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.HostAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProgramsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProgramId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Program.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFindingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubmitterAddress) > 0 {
		i -= len(m.SubmitterAddress)
		copy(dAtA[i:], m.SubmitterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubmitterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProgramId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Findings) > 0 {
		for iNdEx := len(m.Findings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Findings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FindingId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FindingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Finding.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNextProgramIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextProgramIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextProgramIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextProgramIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextProgramIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextProgramIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextProgramId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryHostsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryHostsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryHostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProgramsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProgramRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProgramId != 0 {
		n += 1 + sovQuery(uint64(m.ProgramId))
	}
	return n
}

func (m *QueryProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Program.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFindingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProgramId != 0 {
		n += 1 + sovQuery(uint64(m.ProgramId))
	}
	l = len(m.SubmitterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Findings) > 0 {
		for _, e := range m.Findings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFindingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FindingId != 0 {
		n += 1 + sovQuery(uint64(m.FindingId))
	}
	return n
}

func (m *QueryFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Finding.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNextProgramIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextProgramIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextProgramId != 0 {
		n += 1 + sovQuery(uint64(m.NextProgramId))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryHostsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, Program{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			m.ProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			m.ProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Findings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Findings = append(m.Findings, Finding{})
			if err := m.Findings[len(m.Findings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			m.FindingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FindingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Finding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextProgramIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextProgramIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextProgramIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextProgramIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextProgramIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextProgramIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProgramId", wireType)
			}
			m.NextProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
