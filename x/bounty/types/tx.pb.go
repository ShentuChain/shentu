// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/bounty/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateProgram defines a SDK message for creating a new program.
type MsgCreateProgram struct {
	Description       string                                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	CommissionRate    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=commission_rate,json=commissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_rate"`
	SubmissionEndTime time.Time                              `protobuf:"bytes,3,opt,name=submission_end_time,json=submissionEndTime,proto3,stdtime" json:"submission_end_time" yaml:"submission_end_time"`
	CreatorAddress    string                                 `protobuf:"bytes,4,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty" yaml:"creator_address"`
	EncryptionKey     *types.Any                             `protobuf:"bytes,5,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty" yaml:"encryption_key"`
	Deposit           []types1.Coin                          `protobuf:"bytes,6,rep,name=deposit,proto3" json:"deposit"`
}

func (m *MsgCreateProgram) Reset()         { *m = MsgCreateProgram{} }
func (m *MsgCreateProgram) String() string { return proto.CompactTextString(m) }
func (*MsgCreateProgram) ProtoMessage()    {}
func (*MsgCreateProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{0}
}
func (m *MsgCreateProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateProgram.Merge(m, src)
}
func (m *MsgCreateProgram) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateProgram.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateProgram proto.InternalMessageInfo

// MsgCreateProgramResponse defines the Msg/CreateProgram response type.
type MsgCreateProgramResponse struct {
	ProgramId uint64 `protobuf:"varint,1,opt,name=program_id,json=programId,proto3" json:"id" yaml:"id"`
}

func (m *MsgCreateProgramResponse) Reset()         { *m = MsgCreateProgramResponse{} }
func (m *MsgCreateProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateProgramResponse) ProtoMessage()    {}
func (*MsgCreateProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{1}
}
func (m *MsgCreateProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateProgramResponse.Merge(m, src)
}
func (m *MsgCreateProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateProgramResponse proto.InternalMessageInfo

func (m *MsgCreateProgramResponse) GetProgramId() uint64 {
	if m != nil {
		return m.ProgramId
	}
	return 0
}

type MsgSubmitFinding struct {
	Title            string        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc             string        `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty" yaml:"description"`
	ProgramId        uint64        `protobuf:"varint,3,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty" yaml:"program_id"`
	SeverityLevel    SeverityLevel `protobuf:"varint,4,opt,name=severity_level,json=severityLevel,proto3,enum=shentu.bounty.v1.SeverityLevel" json:"severity_level,omitempty" yaml:"severity_level"`
	Poc              string        `protobuf:"bytes,5,opt,name=poc,proto3" json:"poc,omitempty" yaml:"poc"`
	SubmitterAddress string        `protobuf:"bytes,6,opt,name=submitter_address,json=submitterAddress,proto3" json:"submitter_address,omitempty" yaml:"submitter_address"`
}

func (m *MsgSubmitFinding) Reset()         { *m = MsgSubmitFinding{} }
func (m *MsgSubmitFinding) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitFinding) ProtoMessage()    {}
func (*MsgSubmitFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{2}
}
func (m *MsgSubmitFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitFinding.Merge(m, src)
}
func (m *MsgSubmitFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitFinding proto.InternalMessageInfo

type MsgSubmitFindingResponse struct {
	FindingId uint64 `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id" yaml:"finding_id"`
}

func (m *MsgSubmitFindingResponse) Reset()         { *m = MsgSubmitFindingResponse{} }
func (m *MsgSubmitFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitFindingResponse) ProtoMessage()    {}
func (*MsgSubmitFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{3}
}
func (m *MsgSubmitFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitFindingResponse.Merge(m, src)
}
func (m *MsgSubmitFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitFindingResponse proto.InternalMessageInfo

// MsgHostAcceptFinding defines a message to accept a finding to an existing finding.
type MsgHostAcceptFinding struct {
	FindingId   uint64 `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	Comment     string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty" yaml:"comment"`
	HostAddress string `protobuf:"bytes,3,opt,name=host_address,json=hostAddress,proto3" json:"host_address,omitempty" yaml:"host_address"`
}

func (m *MsgHostAcceptFinding) Reset()         { *m = MsgHostAcceptFinding{} }
func (m *MsgHostAcceptFinding) String() string { return proto.CompactTextString(m) }
func (*MsgHostAcceptFinding) ProtoMessage()    {}
func (*MsgHostAcceptFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{4}
}
func (m *MsgHostAcceptFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHostAcceptFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHostAcceptFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHostAcceptFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHostAcceptFinding.Merge(m, src)
}
func (m *MsgHostAcceptFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgHostAcceptFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHostAcceptFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHostAcceptFinding proto.InternalMessageInfo

// MsgHostAcceptFindingResponse defines the Msg/HostAcceptFinding response type.
type MsgHostAcceptFindingResponse struct {
}

func (m *MsgHostAcceptFindingResponse) Reset()         { *m = MsgHostAcceptFindingResponse{} }
func (m *MsgHostAcceptFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgHostAcceptFindingResponse) ProtoMessage()    {}
func (*MsgHostAcceptFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{5}
}
func (m *MsgHostAcceptFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHostAcceptFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHostAcceptFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHostAcceptFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHostAcceptFindingResponse.Merge(m, src)
}
func (m *MsgHostAcceptFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgHostAcceptFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHostAcceptFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHostAcceptFindingResponse proto.InternalMessageInfo

// MsgHostRejectFinding defines a message to accept a reject to an existing finding.
type MsgHostRejectFinding struct {
	FindingId   uint64 `protobuf:"varint,1,opt,name=finding_id,json=findingId,proto3" json:"finding_id,omitempty" yaml:"finding_id"`
	Comment     string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty" yaml:"comment"`
	HostAddress string `protobuf:"bytes,3,opt,name=host_address,json=hostAddress,proto3" json:"host_address,omitempty" yaml:"host_address"`
}

func (m *MsgHostRejectFinding) Reset()         { *m = MsgHostRejectFinding{} }
func (m *MsgHostRejectFinding) String() string { return proto.CompactTextString(m) }
func (*MsgHostRejectFinding) ProtoMessage()    {}
func (*MsgHostRejectFinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{6}
}
func (m *MsgHostRejectFinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHostRejectFinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHostRejectFinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHostRejectFinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHostRejectFinding.Merge(m, src)
}
func (m *MsgHostRejectFinding) XXX_Size() int {
	return m.Size()
}
func (m *MsgHostRejectFinding) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHostRejectFinding.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHostRejectFinding proto.InternalMessageInfo

// MsgHostRejectFindingResponse defines the Msg/ostRejectFinding response type.
type MsgHostRejectFindingResponse struct {
}

func (m *MsgHostRejectFindingResponse) Reset()         { *m = MsgHostRejectFindingResponse{} }
func (m *MsgHostRejectFindingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgHostRejectFindingResponse) ProtoMessage()    {}
func (*MsgHostRejectFindingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e4b4296bac3db30, []int{7}
}
func (m *MsgHostRejectFindingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHostRejectFindingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHostRejectFindingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHostRejectFindingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHostRejectFindingResponse.Merge(m, src)
}
func (m *MsgHostRejectFindingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgHostRejectFindingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHostRejectFindingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHostRejectFindingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateProgram)(nil), "shentu.bounty.v1.MsgCreateProgram")
	proto.RegisterType((*MsgCreateProgramResponse)(nil), "shentu.bounty.v1.MsgCreateProgramResponse")
	proto.RegisterType((*MsgSubmitFinding)(nil), "shentu.bounty.v1.MsgSubmitFinding")
	proto.RegisterType((*MsgSubmitFindingResponse)(nil), "shentu.bounty.v1.MsgSubmitFindingResponse")
	proto.RegisterType((*MsgHostAcceptFinding)(nil), "shentu.bounty.v1.MsgHostAcceptFinding")
	proto.RegisterType((*MsgHostAcceptFindingResponse)(nil), "shentu.bounty.v1.MsgHostAcceptFindingResponse")
	proto.RegisterType((*MsgHostRejectFinding)(nil), "shentu.bounty.v1.MsgHostRejectFinding")
	proto.RegisterType((*MsgHostRejectFindingResponse)(nil), "shentu.bounty.v1.MsgHostRejectFindingResponse")
}

func init() { proto.RegisterFile("shentu/bounty/v1/tx.proto", fileDescriptor_1e4b4296bac3db30) }

var fileDescriptor_1e4b4296bac3db30 = []byte{
	// 900 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xcf, 0x6e, 0xe3, 0x44,
	0x18, 0x4f, 0x9a, 0x6c, 0x97, 0x4c, 0x49, 0xb6, 0x9d, 0xb6, 0x4b, 0x1a, 0x2d, 0x99, 0x68, 0x90,
	0xaa, 0xaa, 0x62, 0x6d, 0x25, 0xec, 0x85, 0xde, 0x9a, 0xb2, 0x88, 0x6a, 0x29, 0x42, 0xb3, 0x48,
	0x48, 0x5c, 0x2c, 0xc7, 0x9e, 0xba, 0xa6, 0x89, 0xc7, 0xf2, 0x4c, 0xa2, 0xf5, 0x1b, 0x70, 0xdc,
	0x47, 0x58, 0xde, 0x81, 0x07, 0xe0, 0xb8, 0xe2, 0xb4, 0x47, 0xc4, 0xc1, 0xa0, 0x96, 0x03, 0xda,
	0xa3, 0xc5, 0x03, 0x20, 0xcf, 0x8c, 0x13, 0x3b, 0xc9, 0x52, 0xae, 0x9c, 0x92, 0xf9, 0xbe, 0xdf,
	0xf7, 0xf7, 0xf7, 0x1b, 0x0f, 0x38, 0xe0, 0x57, 0x34, 0x10, 0x53, 0x73, 0xc4, 0xa6, 0x81, 0x88,
	0xcd, 0x59, 0xdf, 0x14, 0x2f, 0x8c, 0x30, 0x62, 0x82, 0xc1, 0x6d, 0xe5, 0x32, 0x94, 0xcb, 0x98,
	0xf5, 0x3b, 0x7b, 0x1e, 0xf3, 0x98, 0x74, 0x9a, 0xd9, 0x3f, 0x85, 0xeb, 0x20, 0x8f, 0x31, 0x6f,
	0x4c, 0x4d, 0x79, 0x1a, 0x4d, 0x2f, 0x4d, 0xe1, 0x4f, 0x28, 0x17, 0xf6, 0x24, 0xd4, 0x80, 0x03,
	0x87, 0xf1, 0x09, 0xe3, 0x96, 0x8a, 0x54, 0x87, 0xdc, 0xb5, 0x1c, 0x6b, 0x07, 0xb1, 0x76, 0x75,
	0x15, 0xd0, 0x1c, 0xd9, 0x9c, 0x9a, 0xb3, 0xfe, 0x88, 0x0a, 0xbb, 0x6f, 0x3a, 0xcc, 0x0f, 0xb4,
	0xff, 0xc3, 0x95, 0xce, 0x75, 0xa3, 0xd2, 0x8d, 0xff, 0xae, 0x81, 0xed, 0x0b, 0xee, 0x9d, 0x45,
	0xd4, 0x16, 0xf4, 0xeb, 0x88, 0x79, 0x91, 0x3d, 0x81, 0x3d, 0xb0, 0xe5, 0x52, 0xee, 0x44, 0x7e,
	0x28, 0x7c, 0x16, 0xb4, 0xab, 0xbd, 0xea, 0x51, 0x83, 0x14, 0x4d, 0xf0, 0x5b, 0xf0, 0xc0, 0x61,
	0x93, 0x89, 0xcf, 0xb9, 0xcf, 0x02, 0x2b, 0xb2, 0x05, 0x6d, 0x6f, 0x64, 0xa8, 0xa1, 0xf1, 0x3a,
	0x41, 0x95, 0xdf, 0x12, 0x74, 0xe8, 0xf9, 0xe2, 0x6a, 0x3a, 0x32, 0x1c, 0x36, 0xd1, 0xa3, 0xe8,
	0x9f, 0xc7, 0xdc, 0xbd, 0x36, 0x45, 0x1c, 0x52, 0x6e, 0x7c, 0x46, 0x1d, 0xd2, 0x5a, 0xa4, 0x21,
	0xb6, 0xa0, 0x30, 0x02, 0xbb, 0x7c, 0x3a, 0xca, 0x13, 0xd3, 0xc0, 0xb5, 0xb2, 0x35, 0xb5, 0x6b,
	0xbd, 0xea, 0xd1, 0xd6, 0xa0, 0x63, 0xa8, 0x3d, 0x18, 0xf9, 0x1e, 0x8c, 0x6f, 0xf2, 0x1d, 0x0e,
	0x0f, 0xb3, 0xc2, 0x69, 0x82, 0x3a, 0xb1, 0x3d, 0x19, 0x9f, 0xe0, 0x35, 0x49, 0xf0, 0xcb, 0xdf,
	0x51, 0x95, 0xec, 0x2c, 0x3c, 0x4f, 0x03, 0x37, 0x8b, 0x87, 0x67, 0xe0, 0x81, 0x93, 0xcd, 0xcf,
	0x22, 0xcb, 0x76, 0xdd, 0x88, 0x72, 0xde, 0xae, 0xcb, 0x61, 0x3a, 0x69, 0x82, 0x1e, 0xaa, 0x7c,
	0x4b, 0x00, 0x4c, 0x5a, 0xda, 0x72, 0xaa, 0x0c, 0xd0, 0x03, 0x2d, 0x1a, 0x38, 0x51, 0x2c, 0xf7,
	0x63, 0x5d, 0xd3, 0xb8, 0x7d, 0x4f, 0xf6, 0xbc, 0xb7, 0xd2, 0xf3, 0x69, 0x10, 0x0f, 0x8f, 0xd3,
	0x04, 0xed, 0xab, 0xcc, 0xe5, 0x28, 0xfc, 0xcb, 0x4f, 0x8f, 0x9b, 0x4f, 0xe7, 0xa6, 0x67, 0x34,
	0x26, 0x4d, 0x5a, 0x3c, 0xc2, 0x4f, 0xc1, 0x7d, 0x97, 0x86, 0x8c, 0xfb, 0xa2, 0xbd, 0xd9, 0xab,
	0x1d, 0x6d, 0x0d, 0x0e, 0x0c, 0xad, 0x95, 0x4c, 0x02, 0x86, 0x96, 0x80, 0x71, 0xc6, 0xfc, 0x60,
	0x58, 0xcf, 0x96, 0x42, 0x72, 0xfc, 0xc9, 0x7b, 0x3f, 0xbc, 0x42, 0x95, 0xbf, 0x5e, 0xa1, 0x0a,
	0xfe, 0x0a, 0xb4, 0x97, 0x59, 0x27, 0x94, 0x87, 0x2c, 0xe0, 0x14, 0x0e, 0x00, 0x08, 0x95, 0xc9,
	0xf2, 0x5d, 0x49, 0x7e, 0x7d, 0xb8, 0xfb, 0x36, 0x41, 0x1b, 0xbe, 0x9b, 0x26, 0xa8, 0xa1, 0xba,
	0xf6, 0x5d, 0x4c, 0x1a, 0x1a, 0x76, 0xee, 0xe2, 0x3f, 0x37, 0xa4, 0x8c, 0x9e, 0x67, 0xbb, 0x15,
	0x9f, 0xfb, 0x81, 0xeb, 0x07, 0x1e, 0xdc, 0x03, 0xf7, 0x84, 0x2f, 0xc6, 0x54, 0x0b, 0x48, 0x1d,
	0xe0, 0x31, 0xa8, 0x67, 0x4a, 0xd2, 0x7a, 0x79, 0x98, 0x26, 0x08, 0xaa, 0x94, 0x05, 0x7d, 0x61,
	0x22, 0x31, 0xf0, 0x49, 0xa9, 0x95, 0x9a, 0x6c, 0x65, 0x3f, 0x4d, 0xd0, 0x8e, 0x8a, 0x58, 0xf8,
	0x8a, 0xcd, 0x40, 0x1b, 0xb4, 0x38, 0x9d, 0xd1, 0xc8, 0x17, 0xb1, 0x35, 0xa6, 0x33, 0x3a, 0x96,
	0x74, 0xb6, 0x06, 0xc8, 0x58, 0xbe, 0xaa, 0xc6, 0x73, 0x8d, 0xfb, 0x32, 0x83, 0x0d, 0x0f, 0x16,
	0xac, 0x94, 0x13, 0x60, 0xd2, 0xe4, 0x45, 0x24, 0xec, 0x81, 0x5a, 0xc8, 0x1c, 0x49, 0x71, 0x63,
	0xd8, 0x4a, 0x13, 0x04, 0x74, 0x47, 0xcc, 0xc1, 0x24, 0x73, 0xc1, 0x73, 0xa0, 0x94, 0x26, 0x04,
	0x5d, 0xc8, 0x6a, 0x53, 0xe2, 0x1f, 0xa5, 0x09, 0x6a, 0x17, 0x64, 0x5a, 0x84, 0x60, 0xb2, 0x3d,
	0xb7, 0x69, 0x69, 0x15, 0x68, 0x73, 0x25, 0x6d, 0xa5, 0x2d, 0xcf, 0x69, 0x1b, 0x02, 0x70, 0xa9,
	0x4c, 0x0b, 0xda, 0x3e, 0x7a, 0x9b, 0xa0, 0x82, 0x75, 0xb1, 0xb9, 0x85, 0x0d, 0x93, 0x86, 0x3e,
	0x9c, 0xbb, 0x27, 0xf5, 0xac, 0x12, 0xfe, 0xb9, 0x0a, 0xf6, 0x2e, 0xb8, 0xf7, 0x05, 0xe3, 0xe2,
	0xd4, 0x71, 0x68, 0x38, 0x27, 0xf4, 0xc9, 0x9a, 0x12, 0xfb, 0x77, 0x25, 0x85, 0x1f, 0x83, 0xfb,
	0xd9, 0x25, 0xa7, 0x81, 0xd0, 0x9c, 0xc3, 0x34, 0x41, 0x2d, 0x7d, 0xad, 0x94, 0x03, 0x93, 0x1c,
	0x02, 0x4f, 0xc0, 0xfb, 0x57, 0x8c, 0x8b, 0xf9, 0xca, 0x6a, 0x32, 0xe4, 0x83, 0x34, 0x41, 0xbb,
	0x2a, 0xa4, 0xe8, 0xc5, 0x64, 0x2b, 0x3b, 0xae, 0x2e, 0xaa, 0x0b, 0x1e, 0xad, 0x9b, 0x20, 0x5f,
	0x56, 0x71, 0x44, 0x42, 0xbf, 0xa7, 0xce, 0xff, 0x7a, 0xc4, 0xd2, 0x04, 0xf9, 0x88, 0x83, 0x1f,
	0x6b, 0xa0, 0x76, 0xc1, 0x3d, 0x68, 0x81, 0x66, 0xf9, 0xeb, 0x8e, 0x57, 0xaf, 0xc1, 0xf2, 0xb7,
	0xa0, 0x73, 0x7c, 0x37, 0x66, 0x2e, 0x3c, 0x0b, 0x34, 0xcb, 0xf7, 0x7e, 0x7d, 0x81, 0x12, 0xe6,
	0x1d, 0x05, 0xd6, 0x2b, 0xfb, 0x1a, 0xec, 0xac, 0x6a, 0xf1, 0x70, 0x6d, 0x82, 0x15, 0x5c, 0xc7,
	0xf8, 0x6f, 0xb8, 0xe5, 0x62, 0x65, 0x55, 0xbc, 0xbb, 0x58, 0x09, 0xf7, 0x2f, 0xc5, 0xd6, 0x72,
	0x34, 0x7c, 0xf6, 0xfa, 0xa6, 0x5b, 0x7d, 0x73, 0xd3, 0xad, 0xfe, 0x71, 0xd3, 0xad, 0xbe, 0xbc,
	0xed, 0x56, 0xde, 0xdc, 0x76, 0x2b, 0xbf, 0xde, 0x76, 0x2b, 0xdf, 0xf5, 0x0b, 0xef, 0xa7, 0xca,
	0x79, 0xc9, 0xa6, 0x81, 0x6b, 0x67, 0x5f, 0x47, 0x6d, 0x30, 0x5f, 0xe4, 0x8f, 0xba, 0x7c, 0x4e,
	0x47, 0x9b, 0xf2, 0x85, 0xf9, 0xe4, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0xdf, 0xac, 0xee,
	0xac, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateProgram defines a method for creating a new program.
	CreateProgram(ctx context.Context, in *MsgCreateProgram, opts ...grpc.CallOption) (*MsgCreateProgramResponse, error)
	// SubmitFinding defines a method for submitting a new finding.
	SubmitFinding(ctx context.Context, in *MsgSubmitFinding, opts ...grpc.CallOption) (*MsgSubmitFindingResponse, error)
	// HostAcceptFinding defines a method for host accept a finding.
	HostAcceptFinding(ctx context.Context, in *MsgHostAcceptFinding, opts ...grpc.CallOption) (*MsgHostAcceptFindingResponse, error)
	// HostRejectFinding defines a method for host reject a finding.
	HostRejectFinding(ctx context.Context, in *MsgHostRejectFinding, opts ...grpc.CallOption) (*MsgHostRejectFindingResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateProgram(ctx context.Context, in *MsgCreateProgram, opts ...grpc.CallOption) (*MsgCreateProgramResponse, error) {
	out := new(MsgCreateProgramResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/CreateProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitFinding(ctx context.Context, in *MsgSubmitFinding, opts ...grpc.CallOption) (*MsgSubmitFindingResponse, error) {
	out := new(MsgSubmitFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/SubmitFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HostAcceptFinding(ctx context.Context, in *MsgHostAcceptFinding, opts ...grpc.CallOption) (*MsgHostAcceptFindingResponse, error) {
	out := new(MsgHostAcceptFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/HostAcceptFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HostRejectFinding(ctx context.Context, in *MsgHostRejectFinding, opts ...grpc.CallOption) (*MsgHostRejectFindingResponse, error) {
	out := new(MsgHostRejectFindingResponse)
	err := c.cc.Invoke(ctx, "/shentu.bounty.v1.Msg/HostRejectFinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateProgram defines a method for creating a new program.
	CreateProgram(context.Context, *MsgCreateProgram) (*MsgCreateProgramResponse, error)
	// SubmitFinding defines a method for submitting a new finding.
	SubmitFinding(context.Context, *MsgSubmitFinding) (*MsgSubmitFindingResponse, error)
	// HostAcceptFinding defines a method for host accept a finding.
	HostAcceptFinding(context.Context, *MsgHostAcceptFinding) (*MsgHostAcceptFindingResponse, error)
	// HostRejectFinding defines a method for host reject a finding.
	HostRejectFinding(context.Context, *MsgHostRejectFinding) (*MsgHostRejectFindingResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateProgram(ctx context.Context, req *MsgCreateProgram) (*MsgCreateProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (*UnimplementedMsgServer) SubmitFinding(ctx context.Context, req *MsgSubmitFinding) (*MsgSubmitFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFinding not implemented")
}
func (*UnimplementedMsgServer) HostAcceptFinding(ctx context.Context, req *MsgHostAcceptFinding) (*MsgHostAcceptFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostAcceptFinding not implemented")
}
func (*UnimplementedMsgServer) HostRejectFinding(ctx context.Context, req *MsgHostRejectFinding) (*MsgHostRejectFindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostRejectFinding not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProgram)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/CreateProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProgram(ctx, req.(*MsgCreateProgram))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/SubmitFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitFinding(ctx, req.(*MsgSubmitFinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HostAcceptFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHostAcceptFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HostAcceptFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/HostAcceptFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HostAcceptFinding(ctx, req.(*MsgHostAcceptFinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HostRejectFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHostRejectFinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HostRejectFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.bounty.v1.Msg/HostRejectFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HostRejectFinding(ctx, req.(*MsgHostRejectFinding))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.bounty.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProgram",
			Handler:    _Msg_CreateProgram_Handler,
		},
		{
			MethodName: "SubmitFinding",
			Handler:    _Msg_SubmitFinding_Handler,
		},
		{
			MethodName: "HostAcceptFinding",
			Handler:    _Msg_HostAcceptFinding_Handler,
		},
		{
			MethodName: "HostRejectFinding",
			Handler:    _Msg_HostRejectFinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/bounty/v1/tx.proto",
}

func (m *MsgCreateProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EncryptionKey != nil {
		{
			size, err := m.EncryptionKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SubmissionEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmissionEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProgramId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubmitterAddress) > 0 {
		i -= len(m.SubmitterAddress)
		copy(dAtA[i:], m.SubmitterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubmitterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Poc) > 0 {
		i -= len(m.Poc)
		copy(dAtA[i:], m.Poc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Poc)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SeverityLevel != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SeverityLevel))
		i--
		dAtA[i] = 0x20
	}
	if m.ProgramId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProgramId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FindingId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FindingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgHostAcceptFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHostAcceptFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHostAcceptFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if m.FindingId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FindingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgHostAcceptFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHostAcceptFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHostAcceptFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgHostRejectFinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHostRejectFinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHostRejectFinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if m.FindingId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FindingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgHostRejectFindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHostRejectFindingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHostRejectFindingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CommissionRate.Size()
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmissionEndTime)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EncryptionKey != nil {
		l = m.EncryptionKey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProgramId != 0 {
		n += 1 + sovTx(uint64(m.ProgramId))
	}
	return n
}

func (m *MsgSubmitFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProgramId != 0 {
		n += 1 + sovTx(uint64(m.ProgramId))
	}
	if m.SeverityLevel != 0 {
		n += 1 + sovTx(uint64(m.SeverityLevel))
	}
	l = len(m.Poc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubmitterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FindingId != 0 {
		n += 1 + sovTx(uint64(m.FindingId))
	}
	return n
}

func (m *MsgHostAcceptFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FindingId != 0 {
		n += 1 + sovTx(uint64(m.FindingId))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgHostAcceptFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgHostRejectFinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FindingId != 0 {
		n += 1 + sovTx(uint64(m.FindingId))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgHostRejectFindingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SubmissionEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionKey == nil {
				m.EncryptionKey = &types.Any{}
			}
			if err := m.EncryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types1.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			m.ProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramId", wireType)
			}
			m.ProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeverityLevel", wireType)
			}
			m.SeverityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeverityLevel |= SeverityLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			m.FindingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FindingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHostAcceptFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHostAcceptFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHostAcceptFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			m.FindingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FindingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHostAcceptFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHostAcceptFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHostAcceptFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHostRejectFinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHostRejectFinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHostRejectFinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindingId", wireType)
			}
			m.FindingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FindingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHostRejectFindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHostRejectFindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHostRejectFindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
