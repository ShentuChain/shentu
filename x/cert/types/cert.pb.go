// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/cert/v1alpha1/cert.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Certifier struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Alias       string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty" yaml:"alias"`
	Proposer    string `protobuf:"bytes,3,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
}

func (m *Certifier) Reset()         { *m = Certifier{} }
func (m *Certifier) String() string { return proto.CompactTextString(m) }
func (*Certifier) ProtoMessage()    {}
func (*Certifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{0}
}
func (m *Certifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certifier.Merge(m, src)
}
func (m *Certifier) XXX_Size() int {
	return m.Size()
}
func (m *Certifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Certifier.DiscardUnknown(m)
}

var xxx_messageInfo_Certifier proto.InternalMessageInfo

// Validator is a type for certified validator.
type Validator struct {
	Pubkey    *types.Any `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Certifier string     `protobuf:"bytes,2,opt,name=certifier,proto3" json:"certifier,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

// CertifierUpdateProposal adds or removes a certifier
type CertifierUpdateProposal struct {
	Title       string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Proposer    string      `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
	Alias       string      `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty" yaml:"alias"`
	Certifier   string      `protobuf:"bytes,4,opt,name=certifier,proto3" json:"certifier,omitempty" yaml:"certifier"`
	Description string      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	AddOrRemove AddOrRemove `protobuf:"varint,6,opt,name=add_or_remove,json=addOrRemove,proto3,casttype=AddOrRemove" json:"add_or_remove,omitempty" yaml:"add_or_remove"`
}

func (m *CertifierUpdateProposal) Reset()         { *m = CertifierUpdateProposal{} }
func (m *CertifierUpdateProposal) String() string { return proto.CompactTextString(m) }
func (*CertifierUpdateProposal) ProtoMessage()    {}
func (*CertifierUpdateProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{2}
}
func (m *CertifierUpdateProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertifierUpdateProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertifierUpdateProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertifierUpdateProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertifierUpdateProposal.Merge(m, src)
}
func (m *CertifierUpdateProposal) XXX_Size() int {
	return m.Size()
}
func (m *CertifierUpdateProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CertifierUpdateProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CertifierUpdateProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Certifier)(nil), "shentu.cert.v1alpha1.Certifier")
	proto.RegisterType((*Validator)(nil), "shentu.cert.v1alpha1.Validator")
	proto.RegisterType((*CertifierUpdateProposal)(nil), "shentu.cert.v1alpha1.CertifierUpdateProposal")
}

func init() { proto.RegisterFile("shentu/cert/v1alpha1/cert.proto", fileDescriptor_14e43b05a8c34048) }

var fileDescriptor_14e43b05a8c34048 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0xe3, 0x86, 0x86, 0xe4, 0xc2, 0x9f, 0xca, 0x58, 0x60, 0x2a, 0x64, 0x57, 0x1e, 0xa0,
	0x42, 0xc4, 0xa7, 0x94, 0x05, 0x45, 0x62, 0x68, 0x2a, 0x21, 0xa1, 0x0e, 0x54, 0x96, 0x60, 0x60,
	0x89, 0x2e, 0xbe, 0x8b, 0x63, 0xc5, 0xf1, 0x59, 0x77, 0xe7, 0xa8, 0x16, 0x5f, 0x80, 0x91, 0x81,
	0x0f, 0xd0, 0x0f, 0xd1, 0x0f, 0x81, 0x98, 0x2a, 0x06, 0xc4, 0x64, 0xa1, 0x64, 0x61, 0xf6, 0xc8,
	0x84, 0x72, 0x67, 0x27, 0x86, 0x01, 0x75, 0x4a, 0xde, 0xf7, 0x79, 0xee, 0xac, 0xe7, 0xf7, 0xbe,
	0x07, 0x6c, 0x3e, 0x25, 0xb1, 0x48, 0xa1, 0x4f, 0x98, 0x80, 0x8b, 0x3e, 0x8a, 0x92, 0x29, 0xea,
	0xcb, 0xca, 0x4d, 0x18, 0x15, 0x54, 0x37, 0x94, 0xc1, 0x95, 0xad, 0xca, 0xb0, 0x6f, 0x04, 0x34,
	0xa0, 0xd2, 0x00, 0xd7, 0xff, 0x94, 0x77, 0xff, 0xa1, 0x4f, 0xf9, 0x9c, 0xf2, 0x91, 0x12, 0x54,
	0x51, 0x49, 0x01, 0xa5, 0x41, 0x44, 0xa0, 0xac, 0xc6, 0xe9, 0x04, 0xa2, 0x38, 0x53, 0x92, 0xf3,
	0x5d, 0x03, 0x9d, 0x13, 0xc2, 0x44, 0x38, 0x09, 0x09, 0xd3, 0x9f, 0x81, 0x9b, 0x08, 0x63, 0x46,
	0x38, 0x37, 0xb5, 0x03, 0xed, 0xb0, 0x33, 0xd4, 0x8b, 0xdc, 0xbe, 0x93, 0xa1, 0x79, 0x34, 0x70,
	0x4a, 0xc1, 0xf1, 0x2a, 0x8b, 0xfe, 0x18, 0xec, 0xa2, 0x28, 0x44, 0xdc, 0xdc, 0x91, 0xde, 0xbd,
	0x22, 0xb7, 0x6f, 0x95, 0xde, 0x75, 0xdb, 0xf1, 0x94, 0xac, 0x43, 0xd0, 0x4e, 0x18, 0x4d, 0x28,
	0x27, 0xcc, 0x6c, 0x4a, 0xeb, 0xbd, 0x22, 0xb7, 0xef, 0x2a, 0x6b, 0xa5, 0x38, 0xde, 0xc6, 0xa4,
	0xbf, 0x00, 0x5d, 0x4c, 0xb8, 0xcf, 0xc2, 0x44, 0x84, 0x34, 0x36, 0x6f, 0xc8, 0x33, 0xf7, 0x8b,
	0xdc, 0xd6, 0xd5, 0x99, 0x9a, 0xe8, 0x78, 0x75, 0xeb, 0xa0, 0xfd, 0xf1, 0xc2, 0x6e, 0xfc, 0xba,
	0xb0, 0x1b, 0xce, 0x07, 0xd0, 0x79, 0x87, 0xa2, 0x10, 0x23, 0x41, 0x99, 0xfe, 0x0a, 0xb4, 0x92,
	0x74, 0x3c, 0x23, 0x99, 0x8c, 0xd5, 0x3d, 0x32, 0x5c, 0x45, 0xc4, 0xad, 0x88, 0xb8, 0xc7, 0x71,
	0x36, 0x34, 0xbf, 0x5e, 0xf6, 0x8c, 0x12, 0x9c, 0xcf, 0xb2, 0x44, 0x50, 0xf7, 0x2c, 0x1d, 0x9f,
	0x92, 0xcc, 0x2b, 0x4f, 0xeb, 0x8f, 0x40, 0xc7, 0xaf, 0x60, 0xa9, 0xd4, 0xde, 0xb6, 0x51, 0xfb,
	0xf8, 0xe7, 0x26, 0x78, 0xb0, 0xa1, 0xfa, 0x36, 0xc1, 0x48, 0x90, 0x33, 0x19, 0x0e, 0x45, 0x6b,
	0x6a, 0x22, 0x14, 0x11, 0x29, 0x09, 0xd7, 0xa8, 0xc9, 0xb6, 0xe3, 0x29, 0xf9, 0x2f, 0x6a, 0x3b,
	0xd7, 0xa1, 0xb6, 0x19, 0x47, 0xf3, 0xff, 0xe3, 0x38, 0xaa, 0x87, 0x50, 0x6c, 0x8d, 0x22, 0xb7,
	0xf7, 0x94, 0x77, 0x23, 0x39, 0xb5, 0x68, 0xff, 0x4e, 0x64, 0xf7, 0xda, 0x13, 0xd1, 0x4f, 0xc1,
	0x6d, 0x84, 0xf1, 0x88, 0xb2, 0x11, 0x23, 0x73, 0xba, 0x20, 0x66, 0xeb, 0x40, 0x3b, 0x6c, 0x0f,
	0x9f, 0x14, 0xb9, 0x6d, 0x6c, 0x16, 0x6b, 0x2b, 0x3b, 0xbf, 0x73, 0xbb, 0x7b, 0x8c, 0xf1, 0x1b,
	0xe6, 0xc9, 0xda, 0xeb, 0xa2, 0x6d, 0x31, 0x78, 0x59, 0x11, 0xfe, 0x76, 0xd9, 0xeb, 0x3f, 0x0d,
	0x42, 0x31, 0x4d, 0xc7, 0xae, 0x4f, 0xe7, 0xe5, 0xba, 0x97, 0x3f, 0x3d, 0x8e, 0x67, 0xf0, 0x1c,
	0x06, 0x74, 0x01, 0x45, 0x96, 0x10, 0xee, 0x9e, 0xd0, 0x58, 0x90, 0x58, 0x0c, 0x5f, 0x7f, 0x59,
	0x5a, 0xda, 0xd5, 0xd2, 0xd2, 0x7e, 0x2e, 0x2d, 0xed, 0xd3, 0xca, 0x6a, 0x5c, 0xad, 0xac, 0xc6,
	0x8f, 0x95, 0xd5, 0x78, 0x0f, 0xeb, 0x77, 0xad, 0x53, 0xcf, 0x26, 0x34, 0x8d, 0x31, 0x5a, 0x47,
	0x80, 0xe5, 0x2b, 0x3d, 0x57, 0xef, 0x54, 0x5e, 0x39, 0x6e, 0xc9, 0xcd, 0x79, 0xfe, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x12, 0x21, 0x98, 0x2e, 0xc3, 0x03, 0x00, 0x00,
}

func (m *Certifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Certifier) > 0 {
		i -= len(m.Certifier)
		copy(dAtA[i:], m.Certifier)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Certifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCert(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertifierUpdateProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertifierUpdateProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertifierUpdateProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddOrRemove {
		i--
		if m.AddOrRemove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Certifier) > 0 {
		i -= len(m.Certifier)
		copy(dAtA[i:], m.Certifier)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Certifier)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCert(dAtA []byte, offset int, v uint64) int {
	offset -= sovCert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Certifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Certifier)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *CertifierUpdateProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Certifier)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	if m.AddOrRemove {
		n += 2
	}
	return n
}

func sovCert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCert(x uint64) (n int) {
	return sovCert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Certifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertifierUpdateProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertifierUpdateProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertifierUpdateProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOrRemove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddOrRemove = AddOrRemove(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCert
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCert
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCert
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCert        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCert          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCert = fmt.Errorf("proto: unexpected end of group")
)
