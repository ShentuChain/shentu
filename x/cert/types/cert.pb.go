// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/cert/v1alpha1/cert.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CertificateType int32

const (
	CertificateTypeNil               CertificateType = 0
	CertificateTypeCompilation       CertificateType = 1
	CertificateTypeAuditing          CertificateType = 2
	CertificateTypeProof             CertificateType = 3
	CertificateTypeOracleOperator    CertificateType = 4
	CertificateTypeShieldPoolCreator CertificateType = 5
	CertificateTypeIdentity          CertificateType = 6
	CertificateTypeGeneral           CertificateType = 7
)

var CertificateType_name = map[int32]string{
	0: "CERT_TYPE_UNSPECIFIED",
	1: "CERT_TYPE_COMPILATION",
	2: "CERT_TYPE_AUDITING",
	3: "CERT_TYPE_PROOF",
	4: "CERT_TYPE_ORACLE_OPERATOR",
	5: "CERT_TYPE_SHIELD_POOL_CREATOR",
	6: "CERT_TYPE_IDENTITY",
	7: "CERT_TYPE_GENERAL",
}

var CertificateType_value = map[string]int32{
	"CERT_TYPE_UNSPECIFIED":         0,
	"CERT_TYPE_COMPILATION":         1,
	"CERT_TYPE_AUDITING":            2,
	"CERT_TYPE_PROOF":               3,
	"CERT_TYPE_ORACLE_OPERATOR":     4,
	"CERT_TYPE_SHIELD_POOL_CREATOR": 5,
	"CERT_TYPE_IDENTITY":            6,
	"CERT_TYPE_GENERAL":             7,
}

func (x CertificateType) String() string {
	return proto.EnumName(CertificateType_name, int32(x))
}

func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{0}
}

type RequestContentType int32

const (
	RequestContentTypeNil            RequestContentType = 0
	RequestContentTypeSourceCodeHash RequestContentType = 1
	RequestContentTypeAddress        RequestContentType = 2
	RequestContentTypeBytecodeHash   RequestContentType = 3
	RequestContentTypeGeneral        RequestContentType = 4
)

var RequestContentType_name = map[int32]string{
	0: "REQ_CONTENT_TYPE_UNSPECIFIED",
	1: "REQ_CONTENT_TYPE_SOURCE_CODE_HASH",
	2: "REQ_CONTENT_TYPE_ADDRESS",
	3: "REQ_CONTENT_TYPE_BYTECODE_HASH",
	4: "REQ_CONTENT_TYPE_GENERAL",
}

var RequestContentType_value = map[string]int32{
	"REQ_CONTENT_TYPE_UNSPECIFIED":      0,
	"REQ_CONTENT_TYPE_SOURCE_CODE_HASH": 1,
	"REQ_CONTENT_TYPE_ADDRESS":          2,
	"REQ_CONTENT_TYPE_BYTECODE_HASH":    3,
	"REQ_CONTENT_TYPE_GENERAL":          4,
}

func (x RequestContentType) String() string {
	return proto.EnumName(RequestContentType_name, int32(x))
}

func (RequestContentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{1}
}

type Certifier struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Alias       string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty" yaml:"alias"`
	Proposer    string `protobuf:"bytes,3,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
}

func (m *Certifier) Reset()         { *m = Certifier{} }
func (m *Certifier) String() string { return proto.CompactTextString(m) }
func (*Certifier) ProtoMessage()    {}
func (*Certifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{0}
}
func (m *Certifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certifier.Merge(m, src)
}
func (m *Certifier) XXX_Size() int {
	return m.Size()
}
func (m *Certifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Certifier.DiscardUnknown(m)
}

var xxx_messageInfo_Certifier proto.InternalMessageInfo

type GeneralCertificate struct {
	CertId          uint64          `protobuf:"varint,1,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty" yaml:"certificate_id"`
	CertType        CertificateType `protobuf:"varint,2,opt,name=cert_type,json=certType,proto3,enum=shentu.cert.v1alpha1.CertificateType" json:"cert_type,omitempty" yaml:"certificate_type"`
	ReqContent      *types.Any      `protobuf:"bytes,3,opt,name=req_content,json=reqContent,proto3" json:"req_content,omitempty"`
	CertDescription string          `protobuf:"bytes,4,opt,name=cert_description,json=certDescription,proto3" json:"cert_description,omitempty" yaml:"description"`
	CertCertifier   string          `protobuf:"bytes,5,opt,name=cert_certifier,json=certCertifier,proto3" json:"cert_certifier,omitempty" yaml:"certifier"`
}

func (m *GeneralCertificate) Reset()         { *m = GeneralCertificate{} }
func (m *GeneralCertificate) String() string { return proto.CompactTextString(m) }
func (*GeneralCertificate) ProtoMessage()    {}
func (*GeneralCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{1}
}
func (m *GeneralCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneralCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneralCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralCertificate.Merge(m, src)
}
func (m *GeneralCertificate) XXX_Size() int {
	return m.Size()
}
func (m *GeneralCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralCertificate proto.InternalMessageInfo

type CompilationCertificateContent struct {
	Compiler     string `protobuf:"bytes,1,opt,name=compiler,proto3" json:"compiler,omitempty" yaml:"compiler"`
	BytecodeHash string `protobuf:"bytes,2,opt,name=bytecode_hash,json=bytecodeHash,proto3" json:"bytecode_hash,omitempty" yaml:"bytecode_hash"`
}

func (m *CompilationCertificateContent) Reset()         { *m = CompilationCertificateContent{} }
func (m *CompilationCertificateContent) String() string { return proto.CompactTextString(m) }
func (*CompilationCertificateContent) ProtoMessage()    {}
func (*CompilationCertificateContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{2}
}
func (m *CompilationCertificateContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilationCertificateContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilationCertificateContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompilationCertificateContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilationCertificateContent.Merge(m, src)
}
func (m *CompilationCertificateContent) XXX_Size() int {
	return m.Size()
}
func (m *CompilationCertificateContent) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilationCertificateContent.DiscardUnknown(m)
}

var xxx_messageInfo_CompilationCertificateContent proto.InternalMessageInfo

type CompilationCertificate struct {
	IssueBlockHeight int64                          `protobuf:"varint,1,opt,name=issue_block_height,json=issueBlockHeight,proto3" json:"issue_block_height,omitempty" yaml:"time_issued"`
	CertId           uint64                         `protobuf:"varint,2,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty" yaml:"certificate_id"`
	CertType         CertificateType                `protobuf:"varint,3,opt,name=cert_type,json=certType,proto3,enum=shentu.cert.v1alpha1.CertificateType" json:"cert_type,omitempty" yaml:"certificate_type"`
	ReqContent       *types.Any                     `protobuf:"bytes,4,opt,name=req_content,json=reqContent,proto3" json:"req_content,omitempty"`
	CertContent      *CompilationCertificateContent `protobuf:"bytes,5,opt,name=cert_content,json=certContent,proto3" json:"cert_content,omitempty" yaml:"certificate_content"`
	CertDescription  string                         `protobuf:"bytes,6,opt,name=cert_description,json=certDescription,proto3" json:"cert_description,omitempty" yaml:"description"`
	CertCertifier    string                         `protobuf:"bytes,7,opt,name=cert_certifier,json=certCertifier,proto3" json:"cert_certifier,omitempty" yaml:"certifier"`
}

func (m *CompilationCertificate) Reset()         { *m = CompilationCertificate{} }
func (m *CompilationCertificate) String() string { return proto.CompactTextString(m) }
func (*CompilationCertificate) ProtoMessage()    {}
func (*CompilationCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{3}
}
func (m *CompilationCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompilationCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompilationCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompilationCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompilationCertificate.Merge(m, src)
}
func (m *CompilationCertificate) XXX_Size() int {
	return m.Size()
}
func (m *CompilationCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_CompilationCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_CompilationCertificate proto.InternalMessageInfo

// Validator is a type for certified validator.
type Validator struct {
	Pubkey    *types.Any `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Certifier string     `protobuf:"bytes,2,opt,name=certifier,proto3" json:"certifier,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{4}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

// Library is a type for certified libraries.
type Library struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Publisher string `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
}

func (m *Library) Reset()         { *m = Library{} }
func (m *Library) String() string { return proto.CompactTextString(m) }
func (*Library) ProtoMessage()    {}
func (*Library) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{5}
}
func (m *Library) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Library) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Library.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Library) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Library.Merge(m, src)
}
func (m *Library) XXX_Size() int {
	return m.Size()
}
func (m *Library) XXX_DiscardUnknown() {
	xxx_messageInfo_Library.DiscardUnknown(m)
}

var xxx_messageInfo_Library proto.InternalMessageInfo

type Compilation struct {
	Type    RequestContentType `protobuf:"varint,1,opt,name=type,proto3,enum=shentu.cert.v1alpha1.RequestContentType" json:"type,omitempty"`
	Content string             `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Compilation) Reset()         { *m = Compilation{} }
func (m *Compilation) String() string { return proto.CompactTextString(m) }
func (*Compilation) ProtoMessage()    {}
func (*Compilation) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{6}
}
func (m *Compilation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Compilation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Compilation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Compilation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compilation.Merge(m, src)
}
func (m *Compilation) XXX_Size() int {
	return m.Size()
}
func (m *Compilation) XXX_DiscardUnknown() {
	xxx_messageInfo_Compilation.DiscardUnknown(m)
}

var xxx_messageInfo_Compilation proto.InternalMessageInfo

func (m *Compilation) GetType() RequestContentType {
	if m != nil {
		return m.Type
	}
	return RequestContentTypeNil
}

func (m *Compilation) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Auditing struct {
	Type    RequestContentType `protobuf:"varint,1,opt,name=type,proto3,enum=shentu.cert.v1alpha1.RequestContentType" json:"type,omitempty"`
	Content string             `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Auditing) Reset()         { *m = Auditing{} }
func (m *Auditing) String() string { return proto.CompactTextString(m) }
func (*Auditing) ProtoMessage()    {}
func (*Auditing) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{7}
}
func (m *Auditing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auditing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auditing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auditing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auditing.Merge(m, src)
}
func (m *Auditing) XXX_Size() int {
	return m.Size()
}
func (m *Auditing) XXX_DiscardUnknown() {
	xxx_messageInfo_Auditing.DiscardUnknown(m)
}

var xxx_messageInfo_Auditing proto.InternalMessageInfo

func (m *Auditing) GetType() RequestContentType {
	if m != nil {
		return m.Type
	}
	return RequestContentTypeNil
}

func (m *Auditing) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Identity struct {
	Type    RequestContentType `protobuf:"varint,1,opt,name=type,proto3,enum=shentu.cert.v1alpha1.RequestContentType" json:"type,omitempty"`
	Content string             `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Identity) Reset()         { *m = Identity{} }
func (m *Identity) String() string { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()    {}
func (*Identity) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{8}
}
func (m *Identity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Identity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Identity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Identity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identity.Merge(m, src)
}
func (m *Identity) XXX_Size() int {
	return m.Size()
}
func (m *Identity) XXX_DiscardUnknown() {
	xxx_messageInfo_Identity.DiscardUnknown(m)
}

var xxx_messageInfo_Identity proto.InternalMessageInfo

func (m *Identity) GetType() RequestContentType {
	if m != nil {
		return m.Type
	}
	return RequestContentTypeNil
}

func (m *Identity) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// ContentProto is a proto wrapper for certificate Content.
type ContentProto struct {
	Content *types.Any `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ContentProto) Reset()         { *m = ContentProto{} }
func (m *ContentProto) String() string { return proto.CompactTextString(m) }
func (*ContentProto) ProtoMessage()    {}
func (*ContentProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{9}
}
func (m *ContentProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentProto.Merge(m, src)
}
func (m *ContentProto) XXX_Size() int {
	return m.Size()
}
func (m *ContentProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentProto.DiscardUnknown(m)
}

var xxx_messageInfo_ContentProto proto.InternalMessageInfo

// CertificateProto is a proto wrapper for Certificate interface.
type CertificateProto struct {
	Certificate *types.Any `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *CertificateProto) Reset()         { *m = CertificateProto{} }
func (m *CertificateProto) String() string { return proto.CompactTextString(m) }
func (*CertificateProto) ProtoMessage()    {}
func (*CertificateProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{10}
}
func (m *CertificateProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateProto.Merge(m, src)
}
func (m *CertificateProto) XXX_Size() int {
	return m.Size()
}
func (m *CertificateProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateProto.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateProto proto.InternalMessageInfo

// CertifierUpdateProposal adds or removes a certifier
type CertifierUpdateProposal struct {
	Title       string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Proposer    string      `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
	Alias       string      `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty" yaml:"alias"`
	Certifier   string      `protobuf:"bytes,4,opt,name=certifier,proto3" json:"certifier,omitempty" yaml:"certifier"`
	Description string      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	AddOrRemove AddOrRemove `protobuf:"varint,6,opt,name=add_or_remove,json=addOrRemove,proto3,casttype=AddOrRemove" json:"add_or_remove,omitempty" yaml:"add_or_remove"`
}

func (m *CertifierUpdateProposal) Reset()         { *m = CertifierUpdateProposal{} }
func (m *CertifierUpdateProposal) String() string { return proto.CompactTextString(m) }
func (*CertifierUpdateProposal) ProtoMessage()    {}
func (*CertifierUpdateProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{11}
}
func (m *CertifierUpdateProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertifierUpdateProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertifierUpdateProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertifierUpdateProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertifierUpdateProposal.Merge(m, src)
}
func (m *CertifierUpdateProposal) XXX_Size() int {
	return m.Size()
}
func (m *CertifierUpdateProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CertifierUpdateProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CertifierUpdateProposal proto.InternalMessageInfo

type KVPair struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KVPair) Reset()         { *m = KVPair{} }
func (m *KVPair) String() string { return proto.CompactTextString(m) }
func (*KVPair) ProtoMessage()    {}
func (*KVPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e43b05a8c34048, []int{12}
}
func (m *KVPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVPair.Merge(m, src)
}
func (m *KVPair) XXX_Size() int {
	return m.Size()
}
func (m *KVPair) XXX_DiscardUnknown() {
	xxx_messageInfo_KVPair.DiscardUnknown(m)
}

var xxx_messageInfo_KVPair proto.InternalMessageInfo

func (m *KVPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KVPair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("shentu.cert.v1alpha1.CertificateType", CertificateType_name, CertificateType_value)
	proto.RegisterEnum("shentu.cert.v1alpha1.RequestContentType", RequestContentType_name, RequestContentType_value)
	proto.RegisterType((*Certifier)(nil), "shentu.cert.v1alpha1.Certifier")
	proto.RegisterType((*GeneralCertificate)(nil), "shentu.cert.v1alpha1.GeneralCertificate")
	proto.RegisterType((*CompilationCertificateContent)(nil), "shentu.cert.v1alpha1.CompilationCertificateContent")
	proto.RegisterType((*CompilationCertificate)(nil), "shentu.cert.v1alpha1.CompilationCertificate")
	proto.RegisterType((*Validator)(nil), "shentu.cert.v1alpha1.Validator")
	proto.RegisterType((*Library)(nil), "shentu.cert.v1alpha1.Library")
	proto.RegisterType((*Compilation)(nil), "shentu.cert.v1alpha1.Compilation")
	proto.RegisterType((*Auditing)(nil), "shentu.cert.v1alpha1.Auditing")
	proto.RegisterType((*Identity)(nil), "shentu.cert.v1alpha1.Identity")
	proto.RegisterType((*ContentProto)(nil), "shentu.cert.v1alpha1.ContentProto")
	proto.RegisterType((*CertificateProto)(nil), "shentu.cert.v1alpha1.CertificateProto")
	proto.RegisterType((*CertifierUpdateProposal)(nil), "shentu.cert.v1alpha1.CertifierUpdateProposal")
	proto.RegisterType((*KVPair)(nil), "shentu.cert.v1alpha1.KVPair")
}

func init() { proto.RegisterFile("shentu/cert/v1alpha1/cert.proto", fileDescriptor_14e43b05a8c34048) }

var fileDescriptor_14e43b05a8c34048 = []byte{
	// 1408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x96, 0x2c, 0xf9, 0x6b, 0xe5, 0xc4, 0x7c, 0xf7, 0x55, 0x6c, 0x99, 0x89, 0x45, 0x85, 0x78,
	0x3f, 0x82, 0xa0, 0x16, 0x6b, 0xe7, 0xd2, 0xda, 0x0d, 0x50, 0x7d, 0xd0, 0xb6, 0x60, 0x57, 0x54,
	0x57, 0x72, 0x80, 0xf4, 0x42, 0x50, 0xe4, 0x5a, 0x22, 0x4c, 0x6b, 0x19, 0x92, 0x32, 0x22, 0xf4,
	0x5e, 0x04, 0x3a, 0xf5, 0xd0, 0x4b, 0x0f, 0x02, 0x02, 0xf4, 0x2f, 0xe4, 0xd2, 0x7f, 0x50, 0xe4,
	0x14, 0xe4, 0x50, 0xf4, 0x50, 0x08, 0x45, 0x02, 0x14, 0x3d, 0xeb, 0xd8, 0x53, 0xc1, 0x25, 0x29,
	0x52, 0x92, 0x63, 0x18, 0x29, 0x9a, 0x93, 0x76, 0x77, 0xe6, 0x79, 0x76, 0x38, 0xf3, 0xec, 0xec,
	0x0a, 0x70, 0x76, 0x1b, 0x77, 0x9c, 0xae, 0xa0, 0x62, 0xcb, 0x11, 0x2e, 0xb6, 0x15, 0xc3, 0x6c,
	0x2b, 0xdb, 0x74, 0x96, 0x37, 0x2d, 0xe2, 0x10, 0x98, 0xf6, 0x1c, 0xf2, 0x74, 0x29, 0x70, 0x60,
	0xd3, 0x2d, 0xd2, 0x22, 0xd4, 0x41, 0x70, 0x47, 0x9e, 0x2f, 0x9b, 0x55, 0x89, 0x7d, 0x4e, 0x6c,
	0xa1, 0xa9, 0xd8, 0x58, 0xb8, 0xd8, 0x6e, 0x62, 0xc7, 0xe5, 0x22, 0x7a, 0xc7, 0xb7, 0x6f, 0x78,
	0x76, 0xd9, 0x03, 0x7a, 0x93, 0xc0, 0xd4, 0x22, 0xa4, 0x65, 0x60, 0x81, 0xce, 0x9a, 0xdd, 0x53,
	0x41, 0xe9, 0xf4, 0x3c, 0x13, 0xff, 0x73, 0x1c, 0x2c, 0x97, 0xb0, 0xe5, 0xe8, 0xa7, 0x3a, 0xb6,
	0xe0, 0x47, 0x60, 0x51, 0xd1, 0x34, 0x0b, 0xdb, 0x76, 0x26, 0x9e, 0x8b, 0xdf, 0x5b, 0x2e, 0xc2,
	0xd1, 0x90, 0xbb, 0xd9, 0x53, 0xce, 0x8d, 0x5d, 0xde, 0x37, 0xf0, 0x28, 0x70, 0x81, 0xff, 0x03,
	0xf3, 0x8a, 0xa1, 0x2b, 0x76, 0x66, 0x8e, 0xfa, 0x32, 0xa3, 0x21, 0xb7, 0xe2, 0xfb, 0xba, 0xcb,
	0x3c, 0xf2, 0xcc, 0x50, 0x00, 0x4b, 0xa6, 0x45, 0x4c, 0x62, 0x63, 0x2b, 0x93, 0xa0, 0xae, 0xff,
	0x1e, 0x0d, 0xb9, 0x55, 0xcf, 0x35, 0xb0, 0xf0, 0x68, 0xec, 0x04, 0x3f, 0x01, 0x29, 0x0d, 0xdb,
	0xaa, 0xa5, 0x9b, 0x8e, 0x4e, 0x3a, 0x99, 0x24, 0xc5, 0xac, 0x8d, 0x86, 0x1c, 0xf4, 0x30, 0x11,
	0x23, 0x8f, 0xa2, 0xae, 0xbb, 0x4b, 0xcf, 0x9e, 0x73, 0xb1, 0x3f, 0x9e, 0x73, 0x31, 0xfe, 0x9b,
	0x04, 0x80, 0x07, 0xb8, 0x83, 0x2d, 0xc5, 0xf0, 0xbf, 0x4f, 0x55, 0x1c, 0x0c, 0x77, 0xc0, 0xa2,
	0x9b, 0x6c, 0x59, 0xd7, 0xe8, 0x17, 0x26, 0x8b, 0x1b, 0xa3, 0x21, 0x77, 0xcb, 0xa3, 0x55, 0x43,
	0x3f, 0x59, 0xd7, 0x78, 0xb4, 0xe0, 0x2e, 0x54, 0x34, 0x28, 0x83, 0x65, 0x8a, 0x71, 0x7a, 0x26,
	0xa6, 0xdf, 0x7a, 0x73, 0xe7, 0xbf, 0xf9, 0xcb, 0x2a, 0x97, 0x8f, 0xec, 0xd4, 0xe8, 0x99, 0xb8,
	0x78, 0x7b, 0x34, 0xe4, 0xd6, 0x67, 0xc9, 0x5d, 0x22, 0x1e, 0x2d, 0xb9, 0x4b, 0xae, 0x1b, 0x2c,
	0x82, 0x94, 0x85, 0x9f, 0xc8, 0x2a, 0xe9, 0x38, 0xb8, 0xe3, 0xd0, 0x1c, 0xa5, 0x76, 0xd2, 0x79,
	0xaf, 0x6a, 0xf9, 0xa0, 0x6a, 0xf9, 0x42, 0xa7, 0x57, 0x4c, 0xbd, 0x7c, 0xb1, 0xb5, 0x58, 0xf2,
	0x1c, 0x11, 0xb0, 0xf0, 0x13, 0x7f, 0x0c, 0x0b, 0x80, 0xa1, 0x41, 0x5e, 0x3f, 0x71, 0xab, 0xae,
	0x7f, 0x39, 0x5c, 0x81, 0x7b, 0xe0, 0x26, 0xa5, 0x50, 0x03, 0x3d, 0x64, 0xe6, 0x29, 0x41, 0x7a,
	0x34, 0xe4, 0x98, 0x89, 0xaf, 0x70, 0xcb, 0x75, 0xc3, 0x1d, 0x8f, 0xa5, 0xb3, 0xbb, 0x1e, 0x64,
	0xfe, 0xf5, 0x8b, 0xad, 0x54, 0x24, 0x0f, 0xfc, 0xf7, 0x71, 0xb0, 0x59, 0x22, 0xe7, 0xa6, 0x6e,
	0x28, 0xee, 0x2e, 0x11, 0x53, 0x10, 0xba, 0x00, 0x96, 0x54, 0xea, 0x80, 0x2d, 0x5f, 0x76, 0x11,
	0x7d, 0x04, 0x16, 0x37, 0x5f, 0xfe, 0x10, 0x3e, 0x04, 0x37, 0x9a, 0x3d, 0x07, 0xab, 0x44, 0xc3,
	0x72, 0x5b, 0xb1, 0xdb, 0xbe, 0x00, 0x33, 0xa3, 0x21, 0x97, 0xf6, 0x50, 0x13, 0x66, 0x1e, 0xad,
	0x04, 0xf3, 0x43, 0xc5, 0x6e, 0x47, 0x44, 0xf2, 0x63, 0x12, 0xac, 0x5d, 0x1e, 0x1b, 0x2c, 0x03,
	0xa8, 0xdb, 0x76, 0x17, 0xcb, 0x4d, 0x83, 0xa8, 0x67, 0x72, 0x1b, 0xeb, 0xad, 0xb6, 0x43, 0xc3,
	0x4b, 0x44, 0x33, 0xea, 0xe8, 0xe7, 0x58, 0xa6, 0x8e, 0x1a, 0x8f, 0x18, 0x3a, 0x28, 0xba, 0x80,
	0x43, 0xea, 0x1f, 0x95, 0xdb, 0xdc, 0x7b, 0xc9, 0x2d, 0xf1, 0xcf, 0xcb, 0x2d, 0xf9, 0x3e, 0x72,
	0xbb, 0x00, 0x2b, 0x9e, 0x56, 0x7c, 0x92, 0x79, 0x4a, 0xf2, 0xe0, 0x1d, 0x71, 0x5e, 0x55, 0xfe,
	0x62, 0x76, 0x34, 0xe4, 0xd8, 0xd9, 0xa8, 0x7d, 0x66, 0x1e, 0xa5, 0xa8, 0xd0, 0xae, 0x90, 0xf9,
	0xc2, 0xdf, 0x95, 0xf9, 0xe2, 0xf5, 0x65, 0x1e, 0x6a, 0xe7, 0x6b, 0xb0, 0xfc, 0x48, 0x31, 0x74,
	0x4d, 0x71, 0x88, 0x05, 0xf7, 0xc1, 0x82, 0xd9, 0x6d, 0x9e, 0xe1, 0x1e, 0x55, 0xc8, 0xbb, 0xb2,
	0x99, 0x79, 0xf9, 0x62, 0x2b, 0xed, 0x77, 0x66, 0xd5, 0xea, 0x99, 0x0e, 0xc9, 0xd7, 0xba, 0xcd,
	0x23, 0xdc, 0x43, 0x3e, 0x1a, 0xde, 0xf1, 0x6a, 0xef, 0x85, 0x45, 0x55, 0x8d, 0xc2, 0x85, 0xc8,
	0xe6, 0x47, 0x60, 0xf1, 0x58, 0x6f, 0x5a, 0x8a, 0xd5, 0x83, 0x99, 0xa9, 0x9e, 0x1d, 0xf6, 0xe7,
	0x3b, 0x60, 0xd9, 0xec, 0x36, 0x0d, 0xdd, 0x6e, 0x87, 0x64, 0xe3, 0x85, 0x08, 0x99, 0x05, 0x52,
	0x91, 0x0a, 0xc1, 0xcf, 0x40, 0x92, 0x4a, 0x2f, 0x4e, 0xa5, 0x77, 0xef, 0xf2, 0x92, 0x22, 0xfc,
	0xa4, 0x8b, 0xed, 0xa0, 0x2c, 0xae, 0xac, 0x10, 0x45, 0xb9, 0xe1, 0x04, 0x9a, 0xf0, 0xb6, 0x0c,
	0xa6, 0xbb, 0xa9, 0xd7, 0xa1, 0x96, 0x78, 0x02, 0x96, 0x0a, 0x5d, 0x4d, 0x77, 0xf4, 0x4e, 0xeb,
	0x83, 0x6d, 0x58, 0xd1, 0x70, 0xc7, 0xd1, 0x9d, 0xde, 0x87, 0xd9, 0xf0, 0x04, 0xac, 0xf8, 0xc3,
	0x1a, 0xbd, 0xeb, 0xf7, 0x42, 0x58, 0xfc, 0xba, 0x27, 0x6e, 0xcc, 0x1c, 0x16, 0x0b, 0x03, 0x26,
	0x72, 0x86, 0x3c, 0xea, 0x03, 0x90, 0x8a, 0x9c, 0x9c, 0x2b, 0xe9, 0x57, 0x5f, 0x4e, 0xb6, 0x67,
	0x14, 0x45, 0x46, 0xb6, 0xf9, 0x2e, 0x01, 0xd6, 0xc7, 0xaa, 0x3f, 0x31, 0x35, 0x6f, 0x2f, 0x93,
	0xd8, 0x8a, 0xe1, 0xde, 0xfb, 0x8e, 0xee, 0x18, 0xd8, 0x6f, 0xd6, 0x91, 0x7b, 0x9f, 0x2e, 0xf3,
	0xc8, 0x33, 0x4f, 0xdc, 0xfb, 0x73, 0xd7, 0xb9, 0xf7, 0xc7, 0x0f, 0x8a, 0xc4, 0xd5, 0x0f, 0x8a,
	0x9d, 0xe8, 0x29, 0x49, 0x5e, 0x71, 0x78, 0x43, 0xb7, 0xe9, 0x37, 0xc5, 0xfc, 0xb5, 0xdf, 0x14,
	0xf0, 0x08, 0xdc, 0x50, 0x34, 0x4d, 0x26, 0x96, 0x6c, 0xe1, 0x73, 0x72, 0x81, 0x69, 0xbf, 0x59,
	0x2a, 0xfe, 0x3f, 0xbc, 0x6d, 0x26, 0xcc, 0xfc, 0x9f, 0x43, 0x2e, 0x55, 0xd0, 0x34, 0xc9, 0x42,
	0x74, 0x8e, 0x52, 0x4a, 0x38, 0xd9, 0x7d, 0x18, 0xb9, 0x26, 0xb7, 0xef, 0xb7, 0x74, 0xa7, 0xdd,
	0x6d, 0xe6, 0x55, 0x72, 0xee, 0x3f, 0xd8, 0xfc, 0x9f, 0x2d, 0x5b, 0x3b, 0x13, 0x9e, 0x0a, 0x2d,
	0x72, 0x21, 0xb8, 0x92, 0xb3, 0xf3, 0x81, 0xa8, 0x3e, 0x06, 0x0b, 0x47, 0x8f, 0x6a, 0x8a, 0x6e,
	0x41, 0x06, 0x24, 0x82, 0x76, 0xb3, 0x8c, 0xdc, 0x21, 0x4c, 0x83, 0xf9, 0x0b, 0xc5, 0xe8, 0x62,
	0x5f, 0x95, 0xde, 0xe4, 0xfe, 0xaf, 0x09, 0xb0, 0x3a, 0x75, 0x4f, 0xc0, 0x6d, 0x70, 0xab, 0x24,
	0xa2, 0x86, 0xdc, 0x78, 0x5c, 0x13, 0xe5, 0x93, 0x6a, 0xbd, 0x26, 0x96, 0x2a, 0xfb, 0x15, 0xb1,
	0xcc, 0xc4, 0xd8, 0xb5, 0xfe, 0x20, 0x07, 0xa7, 0xfc, 0xab, 0xba, 0x01, 0x3f, 0x8d, 0x42, 0x4a,
	0xd2, 0x17, 0xb5, 0xca, 0x71, 0xa1, 0x51, 0x91, 0xaa, 0x4c, 0x9c, 0xcd, 0xf6, 0x07, 0x39, 0x76,
	0x0a, 0x12, 0xed, 0x27, 0x0f, 0x00, 0x0c, 0xa1, 0x85, 0x93, 0x72, 0xa5, 0x51, 0xa9, 0x1e, 0x30,
	0x73, 0xec, 0xed, 0xfe, 0x20, 0xb7, 0x3e, 0x85, 0x1b, 0xf7, 0x84, 0x2d, 0xb0, 0x1a, 0x82, 0x6a,
	0x48, 0x92, 0xf6, 0x99, 0x04, 0x9b, 0xe9, 0x0f, 0x72, 0xe9, 0x29, 0x44, 0xcd, 0x22, 0xe4, 0x14,
	0x7e, 0x0e, 0x36, 0x42, 0x77, 0x09, 0x15, 0x4a, 0xc7, 0xa2, 0x2c, 0xd5, 0x44, 0x54, 0x68, 0x48,
	0x88, 0x49, 0xb2, 0x77, 0xfb, 0x83, 0xdc, 0xe6, 0x14, 0x50, 0xb2, 0x14, 0xd5, 0xc0, 0x92, 0x89,
	0x2d, 0xda, 0xc1, 0x0f, 0xc0, 0x66, 0xc8, 0x50, 0x3f, 0xac, 0x88, 0xc7, 0x65, 0xb9, 0x26, 0x49,
	0xc7, 0x72, 0x09, 0x89, 0x94, 0x65, 0x9e, 0xfd, 0x4f, 0x7f, 0x90, 0xcb, 0x4d, 0xb1, 0xd4, 0xdb,
	0x3a, 0x36, 0xb4, 0x1a, 0x21, 0x46, 0xc9, 0xc2, 0x94, 0x68, 0xe2, 0x73, 0x2b, 0x65, 0xb1, 0xda,
	0xa8, 0x34, 0x1e, 0x33, 0x0b, 0x97, 0x7e, 0xee, 0xb8, 0x23, 0x6d, 0x83, 0x7f, 0x85, 0xa0, 0x03,
	0xb1, 0x2a, 0xa2, 0xc2, 0x31, 0xb3, 0xc8, 0xb2, 0xfd, 0x41, 0x6e, 0x6d, 0x0a, 0xe3, 0x3f, 0x6a,
	0xd9, 0xe4, 0xb3, 0x1f, 0xb2, 0xb1, 0xfb, 0xbf, 0xcf, 0x01, 0x38, 0xdb, 0xa9, 0xe0, 0x1e, 0xb8,
	0x83, 0xc4, 0x2f, 0xe5, 0x92, 0x54, 0x6d, 0x88, 0xd5, 0x4b, 0x0b, 0xbd, 0xd1, 0x1f, 0xe4, 0x6e,
	0xcd, 0x22, 0xdd, 0x5a, 0x1f, 0x81, 0xbb, 0x33, 0xe0, 0xba, 0x74, 0x82, 0x4a, 0x6e, 0xe5, 0xcb,
	0xa2, 0x7c, 0x58, 0xa8, 0x1f, 0x32, 0x71, 0x2f, 0x1d, 0xb3, 0x0c, 0x75, 0xd2, 0xb5, 0x54, 0x5c,
	0xf2, 0x1f, 0x5b, 0x70, 0x0f, 0x64, 0x66, 0xc8, 0x0a, 0xe5, 0x32, 0x12, 0xeb, 0x75, 0x66, 0x8e,
	0xdd, 0xec, 0x0f, 0x72, 0x1b, 0xb3, 0x1c, 0x05, 0xff, 0x06, 0xdb, 0x07, 0xd9, 0x19, 0x70, 0xf1,
	0x71, 0x43, 0x0c, 0xc3, 0x48, 0xb0, 0x7c, 0x7f, 0x90, 0xcb, 0xce, 0x52, 0x14, 0x23, 0x2f, 0xbe,
	0x4b, 0x83, 0x08, 0xb2, 0x9c, 0x7c, 0x57, 0x10, 0x13, 0x89, 0x2e, 0x56, 0x7e, 0x7a, 0x93, 0x8d,
	0xbf, 0x7a, 0x93, 0x8d, 0xff, 0xf6, 0x26, 0x1b, 0xff, 0xf6, 0x6d, 0x36, 0xf6, 0xea, 0x6d, 0x36,
	0xf6, 0xcb, 0xdb, 0x6c, 0xec, 0x2b, 0x21, 0x7a, 0x8a, 0xdd, 0x5a, 0x9d, 0x9d, 0x92, 0x6e, 0x47,
	0xa3, 0xe2, 0x17, 0xfc, 0x7f, 0x80, 0x4f, 0xbd, 0xff, 0x80, 0xf4, 0x30, 0x37, 0x17, 0x68, 0x47,
	0x7e, 0xf0, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xac, 0x46, 0x62, 0x1f, 0x0e, 0x00, 0x00,
}

func (m *Certifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeneralCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneralCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CertCertifier) > 0 {
		i -= len(m.CertCertifier)
		copy(dAtA[i:], m.CertCertifier)
		i = encodeVarintCert(dAtA, i, uint64(len(m.CertCertifier)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CertDescription) > 0 {
		i -= len(m.CertDescription)
		copy(dAtA[i:], m.CertDescription)
		i = encodeVarintCert(dAtA, i, uint64(len(m.CertDescription)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReqContent != nil {
		{
			size, err := m.ReqContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCert(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CertType != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.CertType))
		i--
		dAtA[i] = 0x10
	}
	if m.CertId != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.CertId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CompilationCertificateContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilationCertificateContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompilationCertificateContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BytecodeHash) > 0 {
		i -= len(m.BytecodeHash)
		copy(dAtA[i:], m.BytecodeHash)
		i = encodeVarintCert(dAtA, i, uint64(len(m.BytecodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Compiler) > 0 {
		i -= len(m.Compiler)
		copy(dAtA[i:], m.Compiler)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Compiler)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompilationCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompilationCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompilationCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CertCertifier) > 0 {
		i -= len(m.CertCertifier)
		copy(dAtA[i:], m.CertCertifier)
		i = encodeVarintCert(dAtA, i, uint64(len(m.CertCertifier)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CertDescription) > 0 {
		i -= len(m.CertDescription)
		copy(dAtA[i:], m.CertDescription)
		i = encodeVarintCert(dAtA, i, uint64(len(m.CertDescription)))
		i--
		dAtA[i] = 0x32
	}
	if m.CertContent != nil {
		{
			size, err := m.CertContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCert(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ReqContent != nil {
		{
			size, err := m.ReqContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCert(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CertType != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.CertType))
		i--
		dAtA[i] = 0x18
	}
	if m.CertId != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.CertId))
		i--
		dAtA[i] = 0x10
	}
	if m.IssueBlockHeight != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.IssueBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Certifier) > 0 {
		i -= len(m.Certifier)
		copy(dAtA[i:], m.Certifier)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Certifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCert(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Library) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Library) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Library) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Publisher) > 0 {
		i -= len(m.Publisher)
		copy(dAtA[i:], m.Publisher)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Publisher)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Compilation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compilation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Compilation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Auditing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auditing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auditing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Identity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Identity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Identity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCert(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertificateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Certificate != nil {
		{
			size, err := m.Certificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCert(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertifierUpdateProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertifierUpdateProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertifierUpdateProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddOrRemove {
		i--
		if m.AddOrRemove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Certifier) > 0 {
		i -= len(m.Certifier)
		copy(dAtA[i:], m.Certifier)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Certifier)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KVPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCert(dAtA []byte, offset int, v uint64) int {
	offset -= sovCert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Certifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *GeneralCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CertId != 0 {
		n += 1 + sovCert(uint64(m.CertId))
	}
	if m.CertType != 0 {
		n += 1 + sovCert(uint64(m.CertType))
	}
	if m.ReqContent != nil {
		l = m.ReqContent.Size()
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.CertDescription)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.CertCertifier)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *CompilationCertificateContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Compiler)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.BytecodeHash)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *CompilationCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueBlockHeight != 0 {
		n += 1 + sovCert(uint64(m.IssueBlockHeight))
	}
	if m.CertId != 0 {
		n += 1 + sovCert(uint64(m.CertId))
	}
	if m.CertType != 0 {
		n += 1 + sovCert(uint64(m.CertType))
	}
	if m.ReqContent != nil {
		l = m.ReqContent.Size()
		n += 1 + l + sovCert(uint64(l))
	}
	if m.CertContent != nil {
		l = m.CertContent.Size()
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.CertDescription)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.CertCertifier)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Certifier)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *Library) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *Compilation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCert(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *Auditing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCert(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *Identity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCert(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *ContentProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *CertificateProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Certificate != nil {
		l = m.Certificate.Size()
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *CertifierUpdateProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Certifier)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	if m.AddOrRemove {
		n += 2
	}
	return n
}

func (m *KVPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func sovCert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCert(x uint64) (n int) {
	return sovCert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Certifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneralCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertId", wireType)
			}
			m.CertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertType", wireType)
			}
			m.CertType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertType |= CertificateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqContent == nil {
				m.ReqContent = &types.Any{}
			}
			if err := m.ReqContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertCertifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertCertifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilationCertificateContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilationCertificateContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilationCertificateContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compiler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compiler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytecodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytecodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompilationCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompilationCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompilationCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueBlockHeight", wireType)
			}
			m.IssueBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertId", wireType)
			}
			m.CertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertType", wireType)
			}
			m.CertType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertType |= CertificateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqContent == nil {
				m.ReqContent = &types.Any{}
			}
			if err := m.ReqContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertContent == nil {
				m.CertContent = &CompilationCertificateContent{}
			}
			if err := m.CertContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertCertifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertCertifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Library) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Library: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Library: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Compilation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compilation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compilation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RequestContentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Auditing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auditing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auditing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RequestContentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Identity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Identity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Identity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RequestContentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &types.Any{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Certificate == nil {
				m.Certificate = &types.Any{}
			}
			if err := m.Certificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertifierUpdateProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertifierUpdateProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertifierUpdateProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOrRemove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddOrRemove = AddOrRemove(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCert
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCert
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCert
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCert        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCert          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCert = fmt.Errorf("proto: unexpected end of group")
)
