// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/oracle/v1alpha1/oracle.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TaskStatus enumerates the valid statuses of a task.
type TaskStatus int32

const (
	TaskStatusNil       TaskStatus = 0
	TaskStatusPending   TaskStatus = 1
	TaskStatusSucceeded TaskStatus = 2
	TaskStatusFailed    TaskStatus = 3
)

var TaskStatus_name = map[int32]string{
	0: "TASK_STATUS_UNSPECIFIED",
	1: "TASK_STATUS_PENDING",
	2: "TASK_STATUS_SUCCEEDED",
	3: "TASK_STATUS_FAILED",
}

var TaskStatus_value = map[string]int32{
	"TASK_STATUS_UNSPECIFIED": 0,
	"TASK_STATUS_PENDING":     1,
	"TASK_STATUS_SUCCEEDED":   2,
	"TASK_STATUS_FAILED":      3,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}

func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{0}
}

// Withdraw stores a withdraw of "Amount" scheduled for a given "DueBlock."
type Withdraw struct {
	Address  string                                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Amount   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	DueBlock int64                                    `protobuf:"varint,3,opt,name=due_block,json=dueBlock,proto3" json:"due_block,omitempty" yaml:"due_block"`
}

func (m *Withdraw) Reset()         { *m = Withdraw{} }
func (m *Withdraw) String() string { return proto.CompactTextString(m) }
func (*Withdraw) ProtoMessage()    {}
func (*Withdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{0}
}
func (m *Withdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdraw.Merge(m, src)
}
func (m *Withdraw) XXX_Size() int {
	return m.Size()
}
func (m *Withdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdraw.DiscardUnknown(m)
}

var xxx_messageInfo_Withdraw proto.InternalMessageInfo

type Task struct {
	Contract      string                                   `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty" yaml:"contract"`
	Function      string                                   `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty" yaml:"function"`
	BeginBlock    int64                                    `protobuf:"varint,3,opt,name=begin_block,json=beginBlock,proto3" json:"begin_block,omitempty" yaml:"begin_block"`
	Bounty        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=bounty,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"bounty" yaml:"bounty"`
	Description   string                                   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Expiration    time.Time                                `protobuf:"bytes,6,opt,name=expiration,proto3,stdtime" json:"expiration" yaml:"expiration"`
	Creator       string                                   `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	Responses     Responses                                `protobuf:"bytes,8,rep,name=responses,proto3,castrepeated=Responses" json:"responses" yaml:"responses"`
	Result        github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,9,opt,name=result,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"result" yaml:"result"`
	ExpireHeight  int64                                    `protobuf:"varint,10,opt,name=expire_height,json=expireHeight,proto3" json:"expire_height,omitempty" yaml:"expire_height"`
	WaitingBlocks int64                                    `protobuf:"varint,11,opt,name=waiting_blocks,json=waitingBlocks,proto3" json:"waiting_blocks,omitempty" yaml:"waiting_blocks"`
	Status        TaskStatus                               `protobuf:"varint,12,opt,name=status,proto3,enum=shentu.oracle.v1alpha1.TaskStatus" json:"status,omitempty" yaml:"status"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{1}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

type Response struct {
	Operator string                                   `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty" yaml:"operator"`
	Score    github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,2,opt,name=score,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"score" yaml:"score"`
	Weight   github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,3,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"weight" yaml:"weight"`
	Reward   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward" yaml:"reward"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

type Operator struct {
	Address            string                                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Proposer           string                                   `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
	Collateral         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=collateral,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"collateral" yaml:"collateral"`
	AccumulatedRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=accumulated_rewards,json=accumulatedRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"accumulated_rewards" yaml:"accumulated_rewards"`
	Name               string                                   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
}

func (m *Operator) Reset()         { *m = Operator{} }
func (m *Operator) String() string { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()    {}
func (*Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{3}
}
func (m *Operator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operator.Merge(m, src)
}
func (m *Operator) XXX_Size() int {
	return m.Size()
}
func (m *Operator) XXX_DiscardUnknown() {
	xxx_messageInfo_Operator.DiscardUnknown(m)
}

var xxx_messageInfo_Operator proto.InternalMessageInfo

type TaskParams struct {
	ExpirationDuration time.Duration                          `protobuf:"bytes,1,opt,name=expiration_duration,json=expirationDuration,proto3,stdduration" json:"expiration_duration" yaml:"expiration_duration"`
	AggregationWindow  int64                                  `protobuf:"varint,2,opt,name=aggregation_window,json=aggregationWindow,proto3" json:"aggregation_window,omitempty" yaml:"aggregation_window"`
	AggregationResult  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=aggregation_result,json=aggregationResult,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"aggregation_result" yaml:"aggregation_result"`
	ThresholdScore     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=threshold_score,json=thresholdScore,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"threshold_score" yaml:"threshold_score"`
	Epsilon1           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=epsilon1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"epsilon1" yaml:"epsilon1"`
	Epsilon2           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=epsilon2,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"epsilon2" yaml:"epsilon2"`
	ShortcutQuorum     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=shortcut_quorum,json=shortcutQuorum,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shortcut_quorum" yaml:"shortcut_quorum"`
}

func (m *TaskParams) Reset()         { *m = TaskParams{} }
func (m *TaskParams) String() string { return proto.CompactTextString(m) }
func (*TaskParams) ProtoMessage()    {}
func (*TaskParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{4}
}
func (m *TaskParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskParams.Merge(m, src)
}
func (m *TaskParams) XXX_Size() int {
	return m.Size()
}
func (m *TaskParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskParams.DiscardUnknown(m)
}

var xxx_messageInfo_TaskParams proto.InternalMessageInfo

type LockedPoolParams struct {
	LockedInBlocks    int64 `protobuf:"varint,1,opt,name=locked_in_blocks,json=lockedInBlocks,proto3" json:"locked_in_blocks,omitempty" yaml:"locked_in_blocks"`
	MinimumCollateral int64 `protobuf:"varint,2,opt,name=minimum_collateral,json=minimumCollateral,proto3" json:"minimum_collateral,omitempty" yaml:"minimum_collateral"`
}

func (m *LockedPoolParams) Reset()         { *m = LockedPoolParams{} }
func (m *LockedPoolParams) String() string { return proto.CompactTextString(m) }
func (*LockedPoolParams) ProtoMessage()    {}
func (*LockedPoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{5}
}
func (m *LockedPoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedPoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedPoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedPoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedPoolParams.Merge(m, src)
}
func (m *LockedPoolParams) XXX_Size() int {
	return m.Size()
}
func (m *LockedPoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedPoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_LockedPoolParams proto.InternalMessageInfo

type TaskID struct {
	Tid []byte `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty" yaml:"tid"`
}

func (m *TaskID) Reset()         { *m = TaskID{} }
func (m *TaskID) String() string { return proto.CompactTextString(m) }
func (*TaskID) ProtoMessage()    {}
func (*TaskID) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{6}
}
func (m *TaskID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskID.Merge(m, src)
}
func (m *TaskID) XXX_Size() int {
	return m.Size()
}
func (m *TaskID) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskID.DiscardUnknown(m)
}

var xxx_messageInfo_TaskID proto.InternalMessageInfo

type TaskIDs struct {
	TaskIds []TaskID `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids"`
}

func (m *TaskIDs) Reset()         { *m = TaskIDs{} }
func (m *TaskIDs) String() string { return proto.CompactTextString(m) }
func (*TaskIDs) ProtoMessage()    {}
func (*TaskIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{7}
}
func (m *TaskIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskIDs.Merge(m, src)
}
func (m *TaskIDs) XXX_Size() int {
	return m.Size()
}
func (m *TaskIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskIDs.DiscardUnknown(m)
}

var xxx_messageInfo_TaskIDs proto.InternalMessageInfo

func (m *TaskIDs) GetTaskIds() []TaskID {
	if m != nil {
		return m.TaskIds
	}
	return nil
}

type CoinsProto struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins" yaml:"amount"`
}

func (m *CoinsProto) Reset()         { *m = CoinsProto{} }
func (m *CoinsProto) String() string { return proto.CompactTextString(m) }
func (*CoinsProto) ProtoMessage()    {}
func (*CoinsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{8}
}
func (m *CoinsProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinsProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinsProto.Merge(m, src)
}
func (m *CoinsProto) XXX_Size() int {
	return m.Size()
}
func (m *CoinsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinsProto.DiscardUnknown(m)
}

var xxx_messageInfo_CoinsProto proto.InternalMessageInfo

func (m *CoinsProto) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type TxTask struct {
	TxHash     []byte                                   `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" yaml:"tx_hash"`
	Creator    string                                   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	Bounty     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=bounty,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"bounty" yaml:"bounty"`
	ValidTime  time.Time                                `protobuf:"bytes,4,opt,name=valid_time,json=validTime,proto3,stdtime" json:"valid_time" yaml:"valid_time"`
	Expiration time.Time                                `protobuf:"bytes,5,opt,name=expiration,proto3,stdtime" json:"expiration" yaml:"expiration"`
	Responses  Responses                                `protobuf:"bytes,6,rep,name=responses,proto3,castrepeated=Responses" json:"responses" yaml:"responses"`
	Score      int64                                    `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty" yaml:"score"`
	Status     TaskStatus                               `protobuf:"varint,8,opt,name=status,proto3,enum=shentu.oracle.v1alpha1.TaskStatus" json:"status,omitempty" yaml:"status"`
}

func (m *TxTask) Reset()         { *m = TxTask{} }
func (m *TxTask) String() string { return proto.CompactTextString(m) }
func (*TxTask) ProtoMessage()    {}
func (*TxTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{9}
}
func (m *TxTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxTask.Merge(m, src)
}
func (m *TxTask) XXX_Size() int {
	return m.Size()
}
func (m *TxTask) XXX_DiscardUnknown() {
	xxx_messageInfo_TxTask.DiscardUnknown(m)
}

var xxx_messageInfo_TxTask proto.InternalMessageInfo

type LeftBounty struct {
	Address string                                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Amount  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *LeftBounty) Reset()         { *m = LeftBounty{} }
func (m *LeftBounty) String() string { return proto.CompactTextString(m) }
func (*LeftBounty) ProtoMessage()    {}
func (*LeftBounty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a60831f9c2fed90, []int{10}
}
func (m *LeftBounty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeftBounty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeftBounty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeftBounty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeftBounty.Merge(m, src)
}
func (m *LeftBounty) XXX_Size() int {
	return m.Size()
}
func (m *LeftBounty) XXX_DiscardUnknown() {
	xxx_messageInfo_LeftBounty.DiscardUnknown(m)
}

var xxx_messageInfo_LeftBounty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("shentu.oracle.v1alpha1.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterType((*Withdraw)(nil), "shentu.oracle.v1alpha1.Withdraw")
	proto.RegisterType((*Task)(nil), "shentu.oracle.v1alpha1.Task")
	proto.RegisterType((*Response)(nil), "shentu.oracle.v1alpha1.Response")
	proto.RegisterType((*Operator)(nil), "shentu.oracle.v1alpha1.Operator")
	proto.RegisterType((*TaskParams)(nil), "shentu.oracle.v1alpha1.TaskParams")
	proto.RegisterType((*LockedPoolParams)(nil), "shentu.oracle.v1alpha1.LockedPoolParams")
	proto.RegisterType((*TaskID)(nil), "shentu.oracle.v1alpha1.TaskID")
	proto.RegisterType((*TaskIDs)(nil), "shentu.oracle.v1alpha1.TaskIDs")
	proto.RegisterType((*CoinsProto)(nil), "shentu.oracle.v1alpha1.CoinsProto")
	proto.RegisterType((*TxTask)(nil), "shentu.oracle.v1alpha1.TxTask")
	proto.RegisterType((*LeftBounty)(nil), "shentu.oracle.v1alpha1.LeftBounty")
}

func init() {
	proto.RegisterFile("shentu/oracle/v1alpha1/oracle.proto", fileDescriptor_8a60831f9c2fed90)
}

var fileDescriptor_8a60831f9c2fed90 = []byte{
	// 1556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6b, 0x1b, 0xd7,
	0x16, 0xd7, 0x58, 0xb6, 0x2c, 0x5f, 0x7f, 0x44, 0xbe, 0x76, 0x12, 0x59, 0xbc, 0xa7, 0x11, 0x37,
	0xbc, 0x60, 0xde, 0x4b, 0x24, 0xec, 0xf7, 0xe0, 0xb5, 0x81, 0x34, 0xb5, 0x2c, 0xa5, 0x51, 0x93,
	0xba, 0xee, 0xc8, 0x21, 0x6d, 0xa1, 0x88, 0xd1, 0xcc, 0xb5, 0x34, 0x78, 0x34, 0x57, 0x99, 0x7b,
	0x27, 0xb6, 0xbb, 0xea, 0x32, 0x78, 0x95, 0x65, 0x28, 0x18, 0x02, 0xdd, 0x75, 0xdd, 0x45, 0xe9,
	0x5f, 0x90, 0x65, 0x28, 0x5d, 0x94, 0x2e, 0x94, 0x92, 0x6c, 0x4a, 0xba, 0x28, 0x88, 0xee, 0x5b,
	0xee, 0xc7, 0x68, 0xc6, 0xb2, 0xd3, 0x54, 0x24, 0x29, 0x74, 0x65, 0xdd, 0xf3, 0xf1, 0xbb, 0xf7,
	0xfc, 0xee, 0x39, 0xe7, 0x9e, 0x31, 0x38, 0x47, 0xdb, 0xd8, 0x63, 0x41, 0x89, 0xf8, 0xa6, 0xe5,
	0xe2, 0xd2, 0x9d, 0x15, 0xd3, 0xed, 0xb6, 0xcd, 0x15, 0xb5, 0x2e, 0x76, 0x7d, 0xc2, 0x08, 0x3c,
	0x23, 0x8d, 0x8a, 0x4a, 0x18, 0x1a, 0xe5, 0x16, 0x5b, 0xa4, 0x45, 0x84, 0x49, 0x89, 0xff, 0x92,
	0xd6, 0xb9, 0xbc, 0x45, 0x68, 0x87, 0xd0, 0x52, 0xd3, 0xa4, 0x1c, 0xb0, 0x89, 0x99, 0xb9, 0x52,
	0xb2, 0x88, 0xe3, 0x29, 0xfd, 0x92, 0xd4, 0x37, 0xa4, 0xa3, 0x5c, 0x28, 0x95, 0xde, 0x22, 0xa4,
	0xe5, 0xe2, 0x92, 0x58, 0x35, 0x83, 0xed, 0x12, 0x73, 0x3a, 0x98, 0x32, 0xb3, 0xd3, 0x0d, 0xb1,
	0x87, 0x0d, 0xec, 0xc0, 0x37, 0x99, 0x43, 0x14, 0x36, 0xfa, 0x59, 0x03, 0xe9, 0x5b, 0x0e, 0x6b,
	0xdb, 0xbe, 0xb9, 0x0b, 0x2f, 0x80, 0x49, 0xd3, 0xb6, 0x7d, 0x4c, 0x69, 0x56, 0x2b, 0x68, 0xcb,
	0x53, 0x65, 0xd8, 0xef, 0xe9, 0x73, 0xfb, 0x66, 0xc7, 0xbd, 0x84, 0x94, 0x02, 0x19, 0xa1, 0x09,
	0x64, 0x20, 0x65, 0x76, 0x48, 0xe0, 0xb1, 0xec, 0x58, 0x21, 0xb9, 0x3c, 0xbd, 0xba, 0x54, 0x54,
	0x47, 0xe3, 0x71, 0x14, 0x55, 0x1c, 0xc5, 0x75, 0xe2, 0x78, 0xe5, 0xb5, 0x87, 0x3d, 0x3d, 0xd1,
	0xef, 0xe9, 0xb3, 0x0a, 0x4b, 0xb8, 0xa1, 0x2f, 0x1f, 0xeb, 0xcb, 0x2d, 0x87, 0xb5, 0x83, 0x66,
	0xd1, 0x22, 0x1d, 0x15, 0x98, 0xfa, 0x73, 0x91, 0xda, 0x3b, 0x25, 0xb6, 0xdf, 0xc5, 0x54, 0x20,
	0x50, 0x43, 0xed, 0x05, 0x57, 0xc0, 0x94, 0x1d, 0xe0, 0x46, 0xd3, 0x25, 0xd6, 0x4e, 0x36, 0x59,
	0xd0, 0x96, 0x93, 0xe5, 0xc5, 0x7e, 0x4f, 0xcf, 0x48, 0xe4, 0x81, 0x0a, 0x19, 0x69, 0x3b, 0xc0,
	0x65, 0xfe, 0xf3, 0x52, 0xfa, 0xee, 0x03, 0x3d, 0xf1, 0xd3, 0x03, 0x3d, 0x81, 0x7e, 0x4d, 0x81,
	0xf1, 0x2d, 0x93, 0xee, 0xc0, 0x12, 0x48, 0x5b, 0xc4, 0x63, 0xbe, 0x69, 0x31, 0x15, 0xea, 0x42,
	0xbf, 0xa7, 0x9f, 0x92, 0x20, 0xa1, 0x06, 0x19, 0x03, 0x23, 0xee, 0xb0, 0x1d, 0x78, 0x16, 0x67,
	0x2e, 0x3b, 0x36, 0xec, 0x10, 0x6a, 0x90, 0x31, 0x30, 0x82, 0xff, 0x07, 0xd3, 0x4d, 0xdc, 0x72,
	0xbc, 0x23, 0x27, 0x3d, 0xd3, 0xef, 0xe9, 0x50, 0xfa, 0xc4, 0x94, 0xc8, 0x00, 0x62, 0x25, 0x4e,
	0xcb, 0x69, 0x6d, 0xf2, 0x48, 0xf7, 0xb3, 0xe3, 0x23, 0xd2, 0x2a, 0xdd, 0x46, 0xa4, 0x55, 0x3a,
	0xc1, 0x37, 0xc0, 0xb4, 0x8d, 0xa9, 0xe5, 0x3b, 0x5d, 0x11, 0xe2, 0x84, 0x08, 0x31, 0x76, 0xdc,
	0x98, 0x12, 0x19, 0x71, 0x53, 0xf8, 0x11, 0x00, 0x78, 0xaf, 0xeb, 0xc8, 0xac, 0xca, 0xa6, 0x0a,
	0xda, 0xf2, 0xf4, 0x6a, 0xae, 0x28, 0xd3, 0xae, 0x18, 0xa6, 0x5d, 0x71, 0x2b, 0xcc, 0xcb, 0xf2,
	0x3f, 0xd5, 0xa1, 0xe7, 0x25, 0x70, 0xe4, 0x8b, 0xee, 0x3d, 0xd6, 0x35, 0x23, 0x06, 0xc6, 0xf3,
	0xd1, 0xf2, 0xb1, 0xc9, 0x88, 0x9f, 0x9d, 0x1c, 0xce, 0x47, 0xa5, 0x40, 0x46, 0x68, 0x02, 0x31,
	0x98, 0xf2, 0x31, 0xed, 0x12, 0x8f, 0x62, 0x9a, 0x4d, 0x0b, 0xee, 0x0a, 0xc5, 0x93, 0x0b, 0xb1,
	0x68, 0x28, 0xc3, 0xf2, 0xbf, 0xd4, 0x69, 0x54, 0xfe, 0x0c, 0x00, 0x38, 0x8b, 0x53, 0xa1, 0x15,
	0x35, 0x22, 0x64, 0x78, 0x0b, 0xa4, 0x7c, 0x4c, 0x03, 0x97, 0x65, 0xa7, 0xc4, 0x99, 0xae, 0x70,
	0x84, 0x1f, 0x7a, 0xfa, 0xf9, 0x3f, 0xc1, 0x79, 0xcd, 0x63, 0xd1, 0x75, 0x49, 0x14, 0x64, 0x28,
	0x38, 0x78, 0x19, 0xcc, 0x8a, 0xd8, 0x71, 0xa3, 0x8d, 0x9d, 0x56, 0x9b, 0x65, 0x81, 0xc8, 0x99,
	0x6c, 0xbf, 0xa7, 0x2f, 0xc6, 0xb8, 0x0a, 0xd5, 0xc8, 0x98, 0x91, 0xeb, 0x6b, 0x62, 0x09, 0xdf,
	0x06, 0x73, 0xbb, 0xa6, 0xc3, 0x1c, 0xaf, 0x25, 0xb3, 0x8a, 0x66, 0xa7, 0x85, 0xff, 0x52, 0xbf,
	0xa7, 0x9f, 0x96, 0xfe, 0x47, 0xf5, 0xc8, 0x98, 0x55, 0x02, 0x91, 0x78, 0x14, 0xbe, 0x07, 0x52,
	0x94, 0x99, 0x2c, 0xa0, 0xd9, 0x99, 0x82, 0xb6, 0x3c, 0xb7, 0x8a, 0x9e, 0xc7, 0x1e, 0x2f, 0xa1,
	0xba, 0xb0, 0x2c, 0xcf, 0x47, 0xf1, 0x48, 0x5f, 0x64, 0x28, 0x90, 0x58, 0xd9, 0x3d, 0x1b, 0x03,
	0xe9, 0x90, 0x4b, 0x5e, 0x49, 0xa4, 0x8b, 0x7d, 0x71, 0xab, 0xc7, 0x4a, 0x2f, 0xd4, 0x20, 0x63,
	0x60, 0x04, 0xb7, 0xc0, 0x04, 0xb5, 0x88, 0x8f, 0x55, 0xdd, 0xbd, 0x35, 0x32, 0xdf, 0x33, 0xea,
	0x7c, 0x1c, 0x04, 0x19, 0x12, 0x8c, 0x5f, 0xe3, 0xae, 0xa4, 0x39, 0xf9, 0x72, 0xd7, 0xb8, 0xab,
	0x6e, 0x43, 0xc1, 0xf1, 0xfa, 0xf5, 0xf1, 0xae, 0xe9, 0xdb, 0x23, 0xd7, 0xaf, 0x74, 0x1b, 0xb1,
	0x7e, 0xa5, 0x53, 0x8c, 0xec, 0xaf, 0x93, 0x20, 0xfd, 0x7e, 0xc8, 0xdd, 0x68, 0x1d, 0xbd, 0x04,
	0xd2, 0x5d, 0x9f, 0x74, 0x09, 0xc5, 0xfe, 0xf1, 0x26, 0x17, 0x6a, 0x90, 0x31, 0x30, 0x82, 0x9f,
	0x69, 0x00, 0x58, 0xc4, 0x75, 0x4d, 0x86, 0x7d, 0xd3, 0xcd, 0x26, 0x5f, 0x14, 0x70, 0xf5, 0x68,
	0xed, 0x47, 0xae, 0xa3, 0x05, 0x1d, 0xdb, 0x13, 0x7e, 0xae, 0x81, 0x05, 0xd3, 0xb2, 0x82, 0x4e,
	0xc0, 0x25, 0x76, 0x43, 0xf2, 0x41, 0x5f, 0x4c, 0xfe, 0x86, 0x3a, 0x4b, 0x4e, 0xb1, 0x71, 0x1c,
	0x63, 0xb4, 0x43, 0xc1, 0x18, 0x82, 0x21, 0x01, 0xe0, 0x39, 0x30, 0xee, 0x99, 0x1d, 0xac, 0xda,
	0xe9, 0xa9, 0x7e, 0x4f, 0x9f, 0x96, 0xbb, 0x71, 0x29, 0x32, 0x84, 0x32, 0x76, 0x75, 0xf7, 0x53,
	0x00, 0xf0, 0xda, 0xda, 0x34, 0x7d, 0xb3, 0x43, 0xa1, 0x0f, 0x16, 0xa2, 0x66, 0xd8, 0x08, 0x1f,
	0x6e, 0x71, 0x91, 0x3c, 0xb2, 0xe1, 0x16, 0x5b, 0x51, 0x06, 0xe5, 0xf3, 0x47, 0x23, 0x3b, 0x01,
	0x03, 0xdd, 0xe7, 0xad, 0x16, 0x46, 0x9a, 0xd0, 0x17, 0xba, 0x00, 0x9a, 0xad, 0x96, 0x8f, 0x5b,
	0xd2, 0x61, 0xd7, 0xf1, 0x6c, 0xb2, 0x2b, 0x92, 0x21, 0x59, 0xbe, 0xfc, 0xac, 0xa7, 0xff, 0xe3,
	0xb8, 0xf6, 0x02, 0xe9, 0x38, 0x0c, 0x77, 0xba, 0x6c, 0xbf, 0xdf, 0xd3, 0x97, 0x14, 0x9b, 0xc7,
	0xac, 0x90, 0x31, 0x1f, 0x13, 0xde, 0x12, 0x32, 0xf8, 0xe9, 0xd1, 0xdd, 0x54, 0x5f, 0x95, 0x05,
	0x79, 0x7d, 0xe4, 0x82, 0x3c, 0x61, 0xef, 0xb0, 0xc7, 0xc6, 0xf7, 0x36, 0x64, 0xbb, 0xbd, 0x0d,
	0x4e, 0xb1, 0xb6, 0x8f, 0x69, 0x9b, 0xb8, 0x76, 0x43, 0x36, 0x98, 0x71, 0xb1, 0xf1, 0xb5, 0x91,
	0x37, 0x3e, 0x23, 0x37, 0x1e, 0x82, 0x43, 0xc6, 0xdc, 0x40, 0x52, 0x17, 0x3d, 0xe7, 0x13, 0x90,
	0xc6, 0x5d, 0xea, 0xb8, 0xc4, 0x5b, 0x51, 0x29, 0xb1, 0x36, 0xf2, 0x5e, 0xaa, 0x1a, 0x43, 0x1c,
	0x64, 0x0c, 0x20, 0x63, 0xf0, 0xab, 0xe2, 0x1d, 0x7e, 0x79, 0xf8, 0xd5, 0x08, 0x7e, 0x95, 0x13,
	0x46, 0xdb, 0xc4, 0x67, 0x56, 0xc0, 0x1a, 0xb7, 0x03, 0xe2, 0x07, 0x1d, 0xf1, 0x2a, 0xcf, 0x8c,
	0x44, 0x58, 0x05, 0x5b, 0x11, 0x61, 0x43, 0x70, 0xc8, 0x98, 0x0b, 0x25, 0x1f, 0x08, 0x41, 0xac,
	0x34, 0x7e, 0xd1, 0x40, 0xe6, 0x06, 0xb1, 0x76, 0xb0, 0xbd, 0x49, 0x88, 0xab, 0x0a, 0xc4, 0x02,
	0x19, 0x57, 0xc8, 0x1a, 0xe1, 0x28, 0x25, 0xdb, 0x5c, 0xb2, 0xfc, 0xe6, 0xb3, 0x9e, 0x9e, 0x1b,
	0xd6, 0x1d, 0x49, 0xd4, 0xb3, 0xf2, 0x08, 0xc3, 0x36, 0xc8, 0x98, 0x93, 0xa2, 0x9a, 0xa7, 0x5e,
	0x45, 0x17, 0xc0, 0x8e, 0xe3, 0x39, 0x9d, 0xa0, 0xd3, 0x88, 0xb5, 0xba, 0x58, 0x45, 0x1c, 0xd7,
	0x9e, 0x54, 0x11, 0xc7, 0xad, 0x90, 0x31, 0xaf, 0x84, 0xeb, 0x03, 0x59, 0x2c, 0xe2, 0xff, 0x81,
	0x14, 0xef, 0x05, 0xb5, 0x0a, 0x2c, 0x80, 0x24, 0x73, 0x6c, 0x11, 0xd9, 0x4c, 0x79, 0xae, 0xdf,
	0xd3, 0x81, 0xca, 0x37, 0xc7, 0x46, 0x06, 0x57, 0xc5, 0xbc, 0xde, 0x05, 0x93, 0xd2, 0x8b, 0xc2,
	0x2b, 0x20, 0xcd, 0x4c, 0xba, 0xd3, 0x70, 0x6c, 0xce, 0x0a, 0xef, 0x86, 0xf9, 0x3f, 0x7a, 0xd0,
	0x6b, 0x95, 0xf2, 0x38, 0xbf, 0x48, 0x63, 0x92, 0x7b, 0xd5, 0x6c, 0x8a, 0x78, 0x77, 0x17, 0xbd,
	0x6d, 0x53, 0x7c, 0xd4, 0xf8, 0x60, 0x82, 0x7f, 0x94, 0x84, 0x60, 0xaf, 0x77, 0xdc, 0x97, 0x5b,
	0xa1, 0xdf, 0xc6, 0x41, 0x6a, 0x6b, 0x4f, 0x8c, 0xec, 0xff, 0x01, 0x93, 0x6c, 0xaf, 0xd1, 0x36,
	0x69, 0x5b, 0x31, 0x11, 0x7b, 0xca, 0x94, 0x02, 0x19, 0x29, 0xb6, 0x77, 0xcd, 0xa4, 0xed, 0xf8,
	0xe4, 0x38, 0xf6, 0xe2, 0xc9, 0x31, 0x1a, 0xb9, 0x93, 0x7f, 0xe1, 0xc8, 0xfd, 0x21, 0x00, 0x77,
	0x4c, 0xd7, 0xb1, 0x1b, 0xfc, 0x9b, 0x4d, 0xf4, 0x9e, 0x91, 0x06, 0xe7, 0xc8, 0x57, 0x0e, 0xce,
	0x53, 0x42, 0xc0, 0xcd, 0x87, 0x46, 0xf2, 0x89, 0x57, 0x39, 0x92, 0x1f, 0x19, 0xb2, 0x53, 0xaf,
	0x6d, 0xc8, 0x3e, 0x1f, 0xce, 0x7c, 0x93, 0xa2, 0xce, 0x32, 0xcf, 0x9b, 0xe2, 0xa2, 0x91, 0x35,
	0xfd, 0x2a, 0x46, 0xd6, 0xf9, 0xb0, 0x8e, 0xbe, 0xfd, 0xea, 0xe2, 0x84, 0x28, 0x0a, 0xf4, 0x8d,
	0x06, 0xc0, 0x0d, 0xbc, 0xcd, 0xca, 0xf2, 0xd2, 0xfe, 0x06, 0x9f, 0xc8, 0x51, 0x37, 0xf8, 0xf7,
	0x77, 0x9a, 0x1c, 0x28, 0x64, 0xe4, 0xb0, 0x08, 0xce, 0x6e, 0xad, 0xd5, 0xaf, 0x37, 0xea, 0x5b,
	0x6b, 0x5b, 0x37, 0xeb, 0x8d, 0x9b, 0x1b, 0xf5, 0xcd, 0xea, 0x7a, 0xed, 0x6a, 0xad, 0x5a, 0xc9,
	0x24, 0x72, 0xf3, 0x07, 0x87, 0x85, 0xd9, 0xc8, 0x78, 0xc3, 0x71, 0x61, 0x11, 0x2c, 0xc4, 0xed,
	0x37, 0xab, 0x1b, 0x95, 0xda, 0xc6, 0x3b, 0x19, 0x2d, 0x77, 0xfa, 0xe0, 0xb0, 0x30, 0x1f, 0xd9,
	0x6e, 0x62, 0xcf, 0x76, 0xbc, 0x16, 0x5c, 0x05, 0xa7, 0xe3, 0xf6, 0xf5, 0x9b, 0xeb, 0xeb, 0xd5,
	0x6a, 0xa5, 0x5a, 0xc9, 0x8c, 0xe5, 0xce, 0x1e, 0x1c, 0x16, 0x16, 0x22, 0x8f, 0x7a, 0x60, 0x59,
	0x18, 0xdb, 0xd8, 0x86, 0x17, 0x00, 0x8c, 0xfb, 0x5c, 0x5d, 0xab, 0xdd, 0xa8, 0x56, 0x32, 0xc9,
	0xdc, 0xe2, 0xc1, 0x61, 0x21, 0x13, 0x39, 0x5c, 0x35, 0x1d, 0x17, 0xdb, 0xb9, 0xf1, 0xbb, 0x5f,
	0xe4, 0x13, 0xe5, 0xeb, 0x0f, 0x9f, 0xe4, 0xb5, 0x47, 0x4f, 0xf2, 0xda, 0x8f, 0x4f, 0xf2, 0xda,
	0xbd, 0xa7, 0xf9, 0xc4, 0xa3, 0xa7, 0xf9, 0xc4, 0xf7, 0x4f, 0xf3, 0x89, 0x8f, 0x57, 0x62, 0x64,
	0xc9, 0x4c, 0xd8, 0x26, 0x81, 0x67, 0x8b, 0xdc, 0x55, 0x82, 0xd2, 0x5e, 0xf8, 0xbf, 0x1b, 0xc1,
	0x5d, 0x33, 0x25, 0x0a, 0xe2, 0xbf, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x1a, 0x23, 0xbf,
	0xd9, 0x11, 0x00, 0x00,
}

func (m *Withdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DueBlock != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.DueBlock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if m.WaitingBlocks != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.WaitingBlocks))
		i--
		dAtA[i] = 0x58
	}
	if m.ExpireHeight != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.ExpireHeight))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.Result.Size()
		i -= size
		if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOracle(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bounty) > 0 {
		for iNdEx := len(m.Bounty) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bounty[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BeginBlock != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.BeginBlock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Function) > 0 {
		i -= len(m.Function)
		copy(dAtA[i:], m.Function)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Function)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Score.Size()
		i -= size
		if _, err := m.Score.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AccumulatedRewards) > 0 {
		for iNdEx := len(m.AccumulatedRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccumulatedRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ShortcutQuorum.Size()
		i -= size
		if _, err := m.ShortcutQuorum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Epsilon2.Size()
		i -= size
		if _, err := m.Epsilon2.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Epsilon1.Size()
		i -= size
		if _, err := m.Epsilon1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ThresholdScore.Size()
		i -= size
		if _, err := m.ThresholdScore.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AggregationResult.Size()
		i -= size
		if _, err := m.AggregationResult.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AggregationWindow != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.AggregationWindow))
		i--
		dAtA[i] = 0x10
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ExpirationDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ExpirationDuration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintOracle(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LockedPoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedPoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedPoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinimumCollateral != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.MinimumCollateral))
		i--
		dAtA[i] = 0x10
	}
	if m.LockedInBlocks != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.LockedInBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tid) > 0 {
		i -= len(m.Tid)
		copy(dAtA[i:], m.Tid)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Tid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskIds) > 0 {
		for iNdEx := len(m.TaskIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinsProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinsProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TxTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Score != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintOracle(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ValidTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintOracle(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if len(m.Bounty) > 0 {
		for iNdEx := len(m.Bounty) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bounty[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeftBounty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeftBounty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeftBounty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if m.DueBlock != 0 {
		n += 1 + sovOracle(uint64(m.DueBlock))
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.BeginBlock != 0 {
		n += 1 + sovOracle(uint64(m.BeginBlock))
	}
	if len(m.Bounty) > 0 {
		for _, e := range m.Bounty {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration)
	n += 1 + l + sovOracle(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	l = m.Result.Size()
	n += 1 + l + sovOracle(uint64(l))
	if m.ExpireHeight != 0 {
		n += 1 + sovOracle(uint64(m.ExpireHeight))
	}
	if m.WaitingBlocks != 0 {
		n += 1 + sovOracle(uint64(m.WaitingBlocks))
	}
	if m.Status != 0 {
		n += 1 + sovOracle(uint64(m.Status))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.Score.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Weight.Size()
	n += 1 + l + sovOracle(uint64(l))
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *Operator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if len(m.AccumulatedRewards) > 0 {
		for _, e := range m.AccumulatedRewards {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *TaskParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ExpirationDuration)
	n += 1 + l + sovOracle(uint64(l))
	if m.AggregationWindow != 0 {
		n += 1 + sovOracle(uint64(m.AggregationWindow))
	}
	l = m.AggregationResult.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.ThresholdScore.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Epsilon1.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.Epsilon2.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.ShortcutQuorum.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *LockedPoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockedInBlocks != 0 {
		n += 1 + sovOracle(uint64(m.LockedInBlocks))
	}
	if m.MinimumCollateral != 0 {
		n += 1 + sovOracle(uint64(m.MinimumCollateral))
	}
	return n
}

func (m *TaskID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tid)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *TaskIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskIds) > 0 {
		for _, e := range m.TaskIds {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *CoinsProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *TxTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if len(m.Bounty) > 0 {
		for _, e := range m.Bounty {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ValidTime)
	n += 1 + l + sovOracle(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration)
	n += 1 + l + sovOracle(uint64(l))
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	if m.Score != 0 {
		n += 1 + sovOracle(uint64(m.Score))
	}
	if m.Status != 0 {
		n += 1 + sovOracle(uint64(m.Status))
	}
	return n
}

func (m *LeftBounty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Withdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueBlock", wireType)
			}
			m.DueBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
			}
			m.BeginBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bounty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bounty = append(m.Bounty, types.Coin{})
			if err := m.Bounty[len(m.Bounty)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, Response{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireHeight", wireType)
			}
			m.ExpireHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingBlocks", wireType)
			}
			m.WaitingBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitingBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types.Coin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatedRewards = append(m.AccumulatedRewards, types.Coin{})
			if err := m.AccumulatedRewards[len(m.AccumulatedRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ExpirationDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationWindow", wireType)
			}
			m.AggregationWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregationWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregationResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ThresholdScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epsilon1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epsilon1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epsilon2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epsilon2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortcutQuorum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShortcutQuorum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedPoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedPoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedPoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedInBlocks", wireType)
			}
			m.LockedInBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedInBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCollateral", wireType)
			}
			m.MinimumCollateral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumCollateral |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tid = append(m.Tid[:0], dAtA[iNdEx:postIndex]...)
			if m.Tid == nil {
				m.Tid = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskIds = append(m.TaskIds, TaskID{})
			if err := m.TaskIds[len(m.TaskIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bounty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bounty = append(m.Bounty, types.Coin{})
			if err := m.Bounty[len(m.Bounty)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ValidTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, Response{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeftBounty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeftBounty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeftBounty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
