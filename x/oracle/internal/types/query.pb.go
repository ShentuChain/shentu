// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/oracle/v1alpha1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryOperatorRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryOperatorRequest) Reset()         { *m = QueryOperatorRequest{} }
func (m *QueryOperatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorRequest) ProtoMessage()    {}
func (*QueryOperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{0}
}
func (m *QueryOperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorRequest.Merge(m, src)
}
func (m *QueryOperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorRequest proto.InternalMessageInfo

func (m *QueryOperatorRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryOperatorResponse struct {
	Operator Operator `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator"`
}

func (m *QueryOperatorResponse) Reset()         { *m = QueryOperatorResponse{} }
func (m *QueryOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorResponse) ProtoMessage()    {}
func (*QueryOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{1}
}
func (m *QueryOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorResponse.Merge(m, src)
}
func (m *QueryOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorResponse proto.InternalMessageInfo

func (m *QueryOperatorResponse) GetOperator() Operator {
	if m != nil {
		return m.Operator
	}
	return Operator{}
}

type QueryOperatorsRequest struct {
}

func (m *QueryOperatorsRequest) Reset()         { *m = QueryOperatorsRequest{} }
func (m *QueryOperatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorsRequest) ProtoMessage()    {}
func (*QueryOperatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{2}
}
func (m *QueryOperatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorsRequest.Merge(m, src)
}
func (m *QueryOperatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorsRequest proto.InternalMessageInfo

type QueryOperatorsResponse struct {
	Operators []Operator `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators"`
}

func (m *QueryOperatorsResponse) Reset()         { *m = QueryOperatorsResponse{} }
func (m *QueryOperatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorsResponse) ProtoMessage()    {}
func (*QueryOperatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{3}
}
func (m *QueryOperatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorsResponse.Merge(m, src)
}
func (m *QueryOperatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorsResponse proto.InternalMessageInfo

func (m *QueryOperatorsResponse) GetOperators() []Operator {
	if m != nil {
		return m.Operators
	}
	return nil
}

type QueryWithdrawsRequest struct {
}

func (m *QueryWithdrawsRequest) Reset()         { *m = QueryWithdrawsRequest{} }
func (m *QueryWithdrawsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawsRequest) ProtoMessage()    {}
func (*QueryWithdrawsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{4}
}
func (m *QueryWithdrawsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawsRequest.Merge(m, src)
}
func (m *QueryWithdrawsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawsRequest proto.InternalMessageInfo

type QueryWithdrawsResponse struct {
	Withdraws []Withdraw `protobuf:"bytes,1,rep,name=withdraws,proto3" json:"withdraws"`
}

func (m *QueryWithdrawsResponse) Reset()         { *m = QueryWithdrawsResponse{} }
func (m *QueryWithdrawsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawsResponse) ProtoMessage()    {}
func (*QueryWithdrawsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{5}
}
func (m *QueryWithdrawsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawsResponse.Merge(m, src)
}
func (m *QueryWithdrawsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawsResponse proto.InternalMessageInfo

func (m *QueryWithdrawsResponse) GetWithdraws() []Withdraw {
	if m != nil {
		return m.Withdraws
	}
	return nil
}

type QueryTaskRequest struct {
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (m *QueryTaskRequest) Reset()         { *m = QueryTaskRequest{} }
func (m *QueryTaskRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTaskRequest) ProtoMessage()    {}
func (*QueryTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{6}
}
func (m *QueryTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaskRequest.Merge(m, src)
}
func (m *QueryTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaskRequest proto.InternalMessageInfo

func (m *QueryTaskRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *QueryTaskRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

type QueryTaskResponse struct {
	Task Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task"`
}

func (m *QueryTaskResponse) Reset()         { *m = QueryTaskResponse{} }
func (m *QueryTaskResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTaskResponse) ProtoMessage()    {}
func (*QueryTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{7}
}
func (m *QueryTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaskResponse.Merge(m, src)
}
func (m *QueryTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaskResponse proto.InternalMessageInfo

func (m *QueryTaskResponse) GetTask() Task {
	if m != nil {
		return m.Task
	}
	return Task{}
}

type QueryResponseRequest struct {
	Contract        string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Function        string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	OperatorAddress string `protobuf:"bytes,3,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *QueryResponseRequest) Reset()         { *m = QueryResponseRequest{} }
func (m *QueryResponseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryResponseRequest) ProtoMessage()    {}
func (*QueryResponseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{8}
}
func (m *QueryResponseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponseRequest.Merge(m, src)
}
func (m *QueryResponseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponseRequest proto.InternalMessageInfo

func (m *QueryResponseRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *QueryResponseRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *QueryResponseRequest) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

type QueryResponseResponse struct {
	Response Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response"`
}

func (m *QueryResponseResponse) Reset()         { *m = QueryResponseResponse{} }
func (m *QueryResponseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponseResponse) ProtoMessage()    {}
func (*QueryResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb973146e7d7bfc4, []int{9}
}
func (m *QueryResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponseResponse.Merge(m, src)
}
func (m *QueryResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponseResponse proto.InternalMessageInfo

func (m *QueryResponseResponse) GetResponse() Response {
	if m != nil {
		return m.Response
	}
	return Response{}
}

func init() {
	proto.RegisterType((*QueryOperatorRequest)(nil), "shentu.oracle.v1alpha1.QueryOperatorRequest")
	proto.RegisterType((*QueryOperatorResponse)(nil), "shentu.oracle.v1alpha1.QueryOperatorResponse")
	proto.RegisterType((*QueryOperatorsRequest)(nil), "shentu.oracle.v1alpha1.QueryOperatorsRequest")
	proto.RegisterType((*QueryOperatorsResponse)(nil), "shentu.oracle.v1alpha1.QueryOperatorsResponse")
	proto.RegisterType((*QueryWithdrawsRequest)(nil), "shentu.oracle.v1alpha1.QueryWithdrawsRequest")
	proto.RegisterType((*QueryWithdrawsResponse)(nil), "shentu.oracle.v1alpha1.QueryWithdrawsResponse")
	proto.RegisterType((*QueryTaskRequest)(nil), "shentu.oracle.v1alpha1.QueryTaskRequest")
	proto.RegisterType((*QueryTaskResponse)(nil), "shentu.oracle.v1alpha1.QueryTaskResponse")
	proto.RegisterType((*QueryResponseRequest)(nil), "shentu.oracle.v1alpha1.QueryResponseRequest")
	proto.RegisterType((*QueryResponseResponse)(nil), "shentu.oracle.v1alpha1.QueryResponseResponse")
}

func init() {
	proto.RegisterFile("shentu/oracle/v1alpha1/query.proto", fileDescriptor_cb973146e7d7bfc4)
}

var fileDescriptor_cb973146e7d7bfc4 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0xb3, 0x6d, 0xad, 0xe9, 0x78, 0xb0, 0x0e, 0xb5, 0x86, 0xa5, 0xac, 0x75, 0x7b, 0x69,
	0x4a, 0xdd, 0x31, 0x11, 0x3c, 0x78, 0xb3, 0x14, 0x0f, 0x2a, 0x88, 0xa1, 0x20, 0x28, 0x28, 0x93,
	0xcd, 0x64, 0xb3, 0x24, 0xdd, 0xd9, 0xee, 0xcc, 0xb6, 0x86, 0x90, 0x8b, 0x9f, 0x40, 0x10, 0x4f,
	0x7e, 0x02, 0xbf, 0x49, 0x8f, 0x05, 0x11, 0xf4, 0x22, 0x92, 0xf8, 0x41, 0x64, 0x67, 0xe7, 0xdd,
	0x84, 0x6d, 0xd3, 0x8d, 0xf4, 0x36, 0x7f, 0xde, 0xe7, 0x7d, 0x7f, 0x99, 0x3c, 0x0f, 0x8b, 0x6c,
	0xd1, 0x61, 0x81, 0x8c, 0x09, 0x8f, 0xa8, 0xdb, 0x63, 0xe4, 0xb8, 0x46, 0x7b, 0x61, 0x87, 0xd6,
	0xc8, 0x51, 0xcc, 0xa2, 0xbe, 0x13, 0x46, 0x5c, 0x72, 0xbc, 0x9e, 0xd6, 0x38, 0x69, 0x8d, 0x03,
	0x35, 0xe6, 0x8e, 0xcb, 0xc5, 0x21, 0x17, 0xa4, 0x49, 0x05, 0x4b, 0x05, 0xe4, 0xb8, 0xd6, 0x64,
	0x92, 0xd6, 0x48, 0x48, 0x3d, 0x3f, 0xa0, 0xd2, 0xe7, 0x41, 0xda, 0xc3, 0x5c, 0xf3, 0xb8, 0xc7,
	0xd5, 0x92, 0x24, 0x2b, 0x7d, 0xba, 0xe1, 0x71, 0xee, 0xf5, 0x18, 0xa1, 0xa1, 0x4f, 0x68, 0x10,
	0x70, 0xa9, 0x24, 0x42, 0xdf, 0x6e, 0xcd, 0x60, 0xd3, 0x1c, 0xaa, 0xc8, 0x7e, 0x80, 0xd6, 0x5e,
	0x25, 0xa3, 0x5f, 0x86, 0x2c, 0xa2, 0x92, 0x47, 0x0d, 0x76, 0x14, 0x33, 0x21, 0x71, 0x05, 0x5d,
	0xa7, 0xad, 0x56, 0xc4, 0x84, 0xa8, 0x18, 0x9b, 0xc6, 0xf6, 0x4a, 0x03, 0xb6, 0xf6, 0x5b, 0x74,
	0x3b, 0xa7, 0x10, 0x21, 0x0f, 0x04, 0xc3, 0x7b, 0xa8, 0xcc, 0xf5, 0x99, 0xd2, 0xdc, 0xa8, 0x6f,
	0x3a, 0x17, 0xff, 0x74, 0x07, 0xb4, 0x7b, 0x4b, 0xa7, 0xbf, 0xef, 0x96, 0x1a, 0x99, 0xce, 0xbe,
	0x93, 0x6b, 0x2e, 0x34, 0x8f, 0xfd, 0x0e, 0xad, 0xe7, 0x2f, 0xf4, 0xd8, 0x7d, 0xb4, 0x02, 0xf2,
	0x84, 0x75, 0xf1, 0x3f, 0xe6, 0x4e, 0x84, 0xd9, 0xe0, 0xd7, 0xbe, 0xec, 0xb4, 0x22, 0x7a, 0x72,
	0x6e, 0xf0, 0xd4, 0xc5, 0x64, 0xf0, 0x09, 0x1c, 0x16, 0x0d, 0x06, 0x35, 0x0c, 0xce, 0x84, 0xf6,
	0x33, 0xb4, 0xaa, 0xfa, 0x1f, 0x50, 0xd1, 0x85, 0xc7, 0x37, 0x51, 0xd9, 0xe5, 0x81, 0x8c, 0xa8,
	0x2b, 0xf5, 0xeb, 0x67, 0xfb, 0xe4, 0xae, 0x1d, 0x07, 0x6e, 0xf2, 0x47, 0x57, 0x16, 0xd2, 0x3b,
	0xd8, 0xdb, 0xcf, 0xd1, 0xad, 0xa9, 0x5e, 0x1a, 0xf3, 0x11, 0x5a, 0x92, 0x54, 0x74, 0xf5, 0x5f,
	0xb2, 0x31, 0x8b, 0x30, 0xd1, 0x68, 0x3a, 0x55, 0x6f, 0xf7, 0xb5, 0x33, 0xa0, 0xd1, 0x15, 0xe1,
	0x70, 0x15, 0xad, 0xc2, 0x73, 0xbf, 0x07, 0x6b, 0x2d, 0xaa, 0x9a, 0x9b, 0x70, 0xfe, 0x24, 0x67,
	0xb1, 0xc9, 0xe8, 0x89, 0xc5, 0x22, 0xbd, 0x2e, 0xb2, 0x18, 0x68, 0xc0, 0x62, 0xa0, 0xab, 0xff,
	0x5a, 0x46, 0xd7, 0x54, 0x77, 0xfc, 0xd5, 0x40, 0x65, 0x70, 0x04, 0xde, 0x9d, 0xd5, 0xe8, 0xa2,
	0x78, 0x98, 0xf7, 0xe7, 0xac, 0x4e, 0x67, 0xda, 0xf5, 0x8f, 0xdf, 0xff, 0x7e, 0x5e, 0xd8, 0xc5,
	0x3b, 0x64, 0x56, 0x26, 0xb5, 0x82, 0x0c, 0xf4, 0xd3, 0x0c, 0xf1, 0x17, 0x03, 0xad, 0x64, 0x6e,
	0xc7, 0xf3, 0x0d, 0x04, 0xd7, 0x9a, 0xce, 0xbc, 0xe5, 0x1a, 0xb0, 0xaa, 0x00, 0xb7, 0xf0, 0xbd,
	0x22, 0x40, 0xa1, 0xb8, 0xb2, 0x30, 0x14, 0x70, 0xe5, 0xd3, 0x54, 0xc0, 0x75, 0x2e, 0x63, 0xc5,
	0x5c, 0x59, 0x90, 0xf0, 0x37, 0x03, 0x2d, 0x25, 0x26, 0xc6, 0xdb, 0x97, 0xce, 0x98, 0xca, 0x99,
	0x59, 0x9d, 0xa3, 0x52, 0x83, 0xbc, 0x50, 0x20, 0x4f, 0xf1, 0xfe, 0x2c, 0x10, 0xc8, 0x00, 0x19,
	0xc0, 0x6a, 0x48, 0xc0, 0xfb, 0x64, 0x00, 0xab, 0x21, 0x49, 0xb2, 0x85, 0x7f, 0x18, 0xa8, 0x9c,
	0x99, 0xfa, 0x72, 0xe7, 0xe5, 0xe2, 0x57, 0xe0, 0xbc, 0x7c, 0x62, 0xec, 0x9e, 0xe2, 0x6e, 0xe3,
	0xd6, 0x55, 0xb9, 0x27, 0x0e, 0xcd, 0xa7, 0x78, 0x48, 0xb2, 0xac, 0x1d, 0x9c, 0x8e, 0x2c, 0xe3,
	0x6c, 0x64, 0x19, 0x7f, 0x46, 0x96, 0xf1, 0x69, 0x6c, 0x95, 0xce, 0xc6, 0x56, 0xe9, 0xe7, 0xd8,
	0x2a, 0xbd, 0x79, 0xec, 0xf9, 0xb2, 0x13, 0x37, 0x1d, 0x97, 0x1f, 0x12, 0x97, 0x45, 0xd2, 0xef,
	0xb6, 0x79, 0x1c, 0xb4, 0xd4, 0x07, 0x0b, 0xd0, 0x3e, 0x00, 0x9c, 0x1f, 0x48, 0x16, 0x05, 0xb4,
	0x47, 0x64, 0x3f, 0x64, 0xa2, 0xb9, 0xac, 0x3e, 0x55, 0x0f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x97, 0x08, 0x4a, 0x6d, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Operator(ctx context.Context, in *QueryOperatorRequest, opts ...grpc.CallOption) (*QueryOperatorResponse, error)
	Operators(ctx context.Context, in *QueryOperatorsRequest, opts ...grpc.CallOption) (*QueryOperatorsResponse, error)
	Withdraws(ctx context.Context, in *QueryWithdrawsRequest, opts ...grpc.CallOption) (*QueryWithdrawsResponse, error)
	Task(ctx context.Context, in *QueryTaskRequest, opts ...grpc.CallOption) (*QueryTaskResponse, error)
	Response(ctx context.Context, in *QueryResponseRequest, opts ...grpc.CallOption) (*QueryResponseResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Operator(ctx context.Context, in *QueryOperatorRequest, opts ...grpc.CallOption) (*QueryOperatorResponse, error) {
	out := new(QueryOperatorResponse)
	err := c.cc.Invoke(ctx, "/shentu.oracle.v1alpha1.Query/Operator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Operators(ctx context.Context, in *QueryOperatorsRequest, opts ...grpc.CallOption) (*QueryOperatorsResponse, error) {
	out := new(QueryOperatorsResponse)
	err := c.cc.Invoke(ctx, "/shentu.oracle.v1alpha1.Query/Operators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Withdraws(ctx context.Context, in *QueryWithdrawsRequest, opts ...grpc.CallOption) (*QueryWithdrawsResponse, error) {
	out := new(QueryWithdrawsResponse)
	err := c.cc.Invoke(ctx, "/shentu.oracle.v1alpha1.Query/Withdraws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Task(ctx context.Context, in *QueryTaskRequest, opts ...grpc.CallOption) (*QueryTaskResponse, error) {
	out := new(QueryTaskResponse)
	err := c.cc.Invoke(ctx, "/shentu.oracle.v1alpha1.Query/Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Response(ctx context.Context, in *QueryResponseRequest, opts ...grpc.CallOption) (*QueryResponseResponse, error) {
	out := new(QueryResponseResponse)
	err := c.cc.Invoke(ctx, "/shentu.oracle.v1alpha1.Query/Response", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Operator(context.Context, *QueryOperatorRequest) (*QueryOperatorResponse, error)
	Operators(context.Context, *QueryOperatorsRequest) (*QueryOperatorsResponse, error)
	Withdraws(context.Context, *QueryWithdrawsRequest) (*QueryWithdrawsResponse, error)
	Task(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error)
	Response(context.Context, *QueryResponseRequest) (*QueryResponseResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Operator(ctx context.Context, req *QueryOperatorRequest) (*QueryOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operator not implemented")
}
func (*UnimplementedQueryServer) Operators(ctx context.Context, req *QueryOperatorsRequest) (*QueryOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operators not implemented")
}
func (*UnimplementedQueryServer) Withdraws(ctx context.Context, req *QueryWithdrawsRequest) (*QueryWithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraws not implemented")
}
func (*UnimplementedQueryServer) Task(ctx context.Context, req *QueryTaskRequest) (*QueryTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (*UnimplementedQueryServer) Response(ctx context.Context, req *QueryResponseRequest) (*QueryResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Response not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Operator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Operator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.oracle.v1alpha1.Query/Operator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Operator(ctx, req.(*QueryOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Operators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Operators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.oracle.v1alpha1.Query/Operators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Operators(ctx, req.(*QueryOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Withdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Withdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.oracle.v1alpha1.Query/Withdraws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Withdraws(ctx, req.(*QueryWithdrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.oracle.v1alpha1.Query/Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Task(ctx, req.(*QueryTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Response_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Response(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.oracle.v1alpha1.Query/Response",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Response(ctx, req.(*QueryResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.oracle.v1alpha1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Operator",
			Handler:    _Query_Operator_Handler,
		},
		{
			MethodName: "Operators",
			Handler:    _Query_Operators_Handler,
		},
		{
			MethodName: "Withdraws",
			Handler:    _Query_Withdraws_Handler,
		},
		{
			MethodName: "Task",
			Handler:    _Query_Task_Handler,
		},
		{
			MethodName: "Response",
			Handler:    _Query_Response_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/oracle/v1alpha1/query.proto",
}

func (m *QueryOperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Operator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOperatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operators) > 0 {
		for iNdEx := len(m.Operators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Withdraws) > 0 {
		for iNdEx := len(m.Withdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Function) > 0 {
		i -= len(m.Function)
		copy(dAtA[i:], m.Function)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Function)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryResponseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Function) > 0 {
		i -= len(m.Function)
		copy(dAtA[i:], m.Function)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Function)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Operator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOperatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOperatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Operators) > 0 {
		for _, e := range m.Operators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryWithdrawsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWithdrawsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Withdraws) > 0 {
		for _, e := range m.Withdraws {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Task.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryResponseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Response.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operators = append(m.Operators, Operator{})
			if err := m.Operators[len(m.Operators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraws = append(m.Withdraws, Withdraw{})
			if err := m.Withdraws[len(m.Withdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
