// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/shield/v1alpha1/shield.proto

package v1beta1

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Pool contains a shield project pool's data.
type Pool struct {
	Id          uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Description string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	SponsorAddr string                                 `protobuf:"bytes,3,opt,name=sponsor_addr,json=sponsorAddr,proto3" json:"sponsor_addr,omitempty" yaml:"sponsor_addr"`
	Active      bool                                   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty" yaml:"active"`
	Shield      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=shield,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shield" yaml:"shield"`
	ShieldRate  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=shield_rate,json=shieldRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shield_rate" yaml:"shield_rate"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

// Reserve defines Shield Reserve.
type Reserve struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *Reserve) Reset()         { *m = Reserve{} }
func (m *Reserve) String() string { return proto.CompactTextString(m) }
func (*Reserve) ProtoMessage()    {}
func (*Reserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{1}
}
func (m *Reserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reserve.Merge(m, src)
}
func (m *Reserve) XXX_Size() int {
	return m.Size()
}
func (m *Reserve) XXX_DiscardUnknown() {
	xxx_messageInfo_Reserve.DiscardUnknown(m)
}

var xxx_messageInfo_Reserve proto.InternalMessageInfo

// ServiceFees is a wrapper for DecCoins object.
type Fees struct {
	Amount github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"amount" yaml:"amount"`
}

func (m *Fees) Reset()         { *m = Fees{} }
func (m *Fees) String() string { return proto.CompactTextString(m) }
func (*Fees) ProtoMessage()    {}
func (*Fees) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{2}
}
func (m *Fees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fees.Merge(m, src)
}
func (m *Fees) XXX_Size() int {
	return m.Size()
}
func (m *Fees) XXX_DiscardUnknown() {
	xxx_messageInfo_Fees.DiscardUnknown(m)
}

var xxx_messageInfo_Fees proto.InternalMessageInfo

// Provider tracks total delegation, total collateral, and rewards of a provider.
type Provider struct {
	// Address is the address of the provider.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// DelegationBonded is the amount of bonded delegation.
	DelegationBonded github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=delegation_bonded,json=delegationBonded,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"delegation_bonded" yaml:"provider"`
	// Collateral is amount of all collaterals for the provider, including
	// those in withdraw queue but excluding those currently locked, in all
	// pools.
	Collateral github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=collateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral" yaml:"collateral"`
	// TotalLocked is the amount locked for pending claims.
	TotalLocked github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_locked,json=totalLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_locked" yaml:"total_locked"`
	// Withdrawing is the amount of collateral in withdraw queues.
	Withdrawing github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=withdrawing,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"withdrawing" yaml:"withdrawing"`
	// Rewards is the pooling rewards to be collected.
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,6,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards" yaml:"rewards"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{3}
}
func (m *Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return m.Size()
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

// Withdraw stores an ongoing withdraw of pool collateral.
type Withdraw struct {
	// Address is the chain address of the provider withdrawing.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// Amount is the amount of withdraw.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	// CompletionTime is the scheduled withdraw completion time.
	CompletionTime time.Time `protobuf:"bytes,3,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time" yaml:"completion_time"`
}

func (m *Withdraw) Reset()         { *m = Withdraw{} }
func (m *Withdraw) String() string { return proto.CompactTextString(m) }
func (*Withdraw) ProtoMessage()    {}
func (*Withdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{4}
}
func (m *Withdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdraw.Merge(m, src)
}
func (m *Withdraw) XXX_Size() int {
	return m.Size()
}
func (m *Withdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdraw.DiscardUnknown(m)
}

var xxx_messageInfo_Withdraw proto.InternalMessageInfo

// Withdraws defines an array of Withdraw objects.
type Withdraws struct {
	Withdraws []Withdraw `protobuf:"bytes,1,rep,name=withdraws,proto3" json:"withdraws"`
}

func (m *Withdraws) Reset()         { *m = Withdraws{} }
func (m *Withdraws) String() string { return proto.CompactTextString(m) }
func (*Withdraws) ProtoMessage()    {}
func (*Withdraws) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{5}
}
func (m *Withdraws) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdraws) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdraws.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdraws) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdraws.Merge(m, src)
}
func (m *Withdraws) XXX_Size() int {
	return m.Size()
}
func (m *Withdraws) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdraws.DiscardUnknown(m)
}

var xxx_messageInfo_Withdraws proto.InternalMessageInfo

func (m *Withdraws) GetWithdraws() []Withdraw {
	if m != nil {
		return m.Withdraws
	}
	return nil
}

type Purchase struct {
	PoolId            uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Purchaser         string                                 `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty" yaml:"purchaser"`
	Amount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Description       string                                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	StartTime         time.Time                              `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	Shield            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=shield,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shield" yaml:"shield"`
	RecoveringEntries []RecoveringEntry                      `protobuf:"bytes,7,rep,name=recovering_entries,json=recoveringEntries,proto3" json:"recovering_entries"`
	Locked            bool                                   `protobuf:"varint,8,opt,name=locked,proto3" json:"locked,omitempty" yaml:"locked"`
}

func (m *Purchase) Reset()         { *m = Purchase{} }
func (m *Purchase) String() string { return proto.CompactTextString(m) }
func (*Purchase) ProtoMessage()    {}
func (*Purchase) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{6}
}
func (m *Purchase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Purchase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Purchase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Purchase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Purchase.Merge(m, src)
}
func (m *Purchase) XXX_Size() int {
	return m.Size()
}
func (m *Purchase) XXX_DiscardUnknown() {
	xxx_messageInfo_Purchase.DiscardUnknown(m)
}

var xxx_messageInfo_Purchase proto.InternalMessageInfo

type RecoveringEntry struct {
	RecoverTime time.Time                                `protobuf:"bytes,1,opt,name=recover_time,json=recoverTime,proto3,stdtime" json:"recover_time"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *RecoveringEntry) Reset()         { *m = RecoveringEntry{} }
func (m *RecoveringEntry) String() string { return proto.CompactTextString(m) }
func (*RecoveringEntry) ProtoMessage()    {}
func (*RecoveringEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{7}
}
func (m *RecoveringEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoveringEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecoveringEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecoveringEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoveringEntry.Merge(m, src)
}
func (m *RecoveringEntry) XXX_Size() int {
	return m.Size()
}
func (m *RecoveringEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoveringEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RecoveringEntry proto.InternalMessageInfo

func (m *RecoveringEntry) GetRecoverTime() time.Time {
	if m != nil {
		return m.RecoverTime
	}
	return time.Time{}
}

func (m *RecoveringEntry) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type ShieldClaimProposal struct {
	ProposalId  uint64                                   `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	PoolId      uint64                                   `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Loss        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=loss,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"loss" yaml:"loss"`
	Evidence    string                                   `protobuf:"bytes,4,opt,name=evidence,proto3" json:"evidence,omitempty" yaml:"evidence"`
	Description string                                   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Proposer    string                                   `protobuf:"bytes,6,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
}

func (m *ShieldClaimProposal) Reset()      { *m = ShieldClaimProposal{} }
func (*ShieldClaimProposal) ProtoMessage() {}
func (*ShieldClaimProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{8}
}
func (m *ShieldClaimProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShieldClaimProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShieldClaimProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShieldClaimProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShieldClaimProposal.Merge(m, src)
}
func (m *ShieldClaimProposal) XXX_Size() int {
	return m.Size()
}
func (m *ShieldClaimProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ShieldClaimProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ShieldClaimProposal proto.InternalMessageInfo

type PendingPayout struct {
	ProposalId uint64                                 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	Amount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *PendingPayout) Reset()         { *m = PendingPayout{} }
func (m *PendingPayout) String() string { return proto.CompactTextString(m) }
func (*PendingPayout) ProtoMessage()    {}
func (*PendingPayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{9}
}
func (m *PendingPayout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingPayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingPayout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingPayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingPayout.Merge(m, src)
}
func (m *PendingPayout) XXX_Size() int {
	return m.Size()
}
func (m *PendingPayout) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingPayout.DiscardUnknown(m)
}

var xxx_messageInfo_PendingPayout proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Pool)(nil), "shentu.shield.v1alpha1.Pool")
	proto.RegisterType((*Reserve)(nil), "shentu.shield.v1alpha1.Reserve")
	proto.RegisterType((*Fees)(nil), "shentu.shield.v1alpha1.Fees")
	proto.RegisterType((*Provider)(nil), "shentu.shield.v1alpha1.Provider")
	proto.RegisterType((*Withdraw)(nil), "shentu.shield.v1alpha1.Withdraw")
	proto.RegisterType((*Withdraws)(nil), "shentu.shield.v1alpha1.Withdraws")
	proto.RegisterType((*Purchase)(nil), "shentu.shield.v1alpha1.Purchase")
	proto.RegisterType((*RecoveringEntry)(nil), "shentu.shield.v1alpha1.RecoveringEntry")
	proto.RegisterType((*ShieldClaimProposal)(nil), "shentu.shield.v1alpha1.ShieldClaimProposal")
	proto.RegisterType((*PendingPayout)(nil), "shentu.shield.v1alpha1.PendingPayout")
}

func init() {
	proto.RegisterFile("shentu/shield/v1alpha1/shield.proto", fileDescriptor_d5263cf0ba18829d)
}

var fileDescriptor_d5263cf0ba18829d = []byte{
	// 1120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xc1, 0x6f, 0xe3, 0xc4,
	0x17, 0x8e, 0x93, 0x6c, 0x9a, 0x4c, 0xb6, 0xdb, 0xed, 0x74, 0xd5, 0x5f, 0xb6, 0xfa, 0x11, 0x57,
	0x83, 0x04, 0x45, 0xcb, 0xda, 0xb4, 0x1c, 0x40, 0x15, 0xd2, 0xaa, 0x69, 0x0b, 0xaa, 0xe0, 0x50,
	0x0c, 0xd2, 0x4a, 0x08, 0x29, 0x9a, 0xd8, 0x53, 0xc7, 0xaa, 0xe3, 0xb1, 0x66, 0x26, 0xe9, 0x16,
	0x89, 0x1b, 0x07, 0x0e, 0x1c, 0x7a, 0xe4, 0xd8, 0x33, 0x1c, 0xb8, 0xf0, 0x2f, 0x20, 0xed, 0xb1,
	0xe2, 0x84, 0x38, 0x64, 0x51, 0x7b, 0xd9, 0x73, 0xfe, 0x02, 0xe4, 0x99, 0x71, 0x3d, 0x2d, 0x5d,
	0xda, 0x40, 0x39, 0xd5, 0xe3, 0xf7, 0xde, 0xf7, 0xfc, 0xbe, 0xf7, 0xbd, 0x79, 0x0d, 0x78, 0x9d,
	0xf7, 0x49, 0x22, 0x86, 0x2e, 0xef, 0x47, 0x24, 0x0e, 0xdc, 0xd1, 0x2a, 0x8e, 0xd3, 0x3e, 0x5e,
	0xd5, 0x67, 0x27, 0x65, 0x54, 0x50, 0xb8, 0xa8, 0x9c, 0x1c, 0xfd, 0x32, 0x77, 0x5a, 0x7a, 0x10,
	0xd2, 0x90, 0x4a, 0x17, 0x37, 0x7b, 0x52, 0xde, 0x4b, 0x6d, 0x9f, 0xf2, 0x01, 0xe5, 0x6e, 0x0f,
	0x73, 0xe2, 0x8e, 0x56, 0x7b, 0x44, 0xe0, 0x55, 0xd7, 0xa7, 0x51, 0xa2, 0xed, 0x0f, 0x95, 0xbd,
	0xab, 0x02, 0xd5, 0x41, 0x9b, 0xec, 0x90, 0xd2, 0x30, 0x26, 0xae, 0x3c, 0xf5, 0x86, 0x7b, 0xae,
	0x88, 0x06, 0x84, 0x0b, 0x3c, 0x48, 0x95, 0x03, 0x3a, 0xaa, 0x80, 0xea, 0x2e, 0xa5, 0x31, 0x7c,
	0x0d, 0x94, 0xa3, 0xa0, 0x65, 0x2d, 0x5b, 0x2b, 0xd5, 0xce, 0xec, 0x64, 0x6c, 0x37, 0x0e, 0xf1,
	0x20, 0x5e, 0x47, 0x51, 0x80, 0xbc, 0x72, 0x14, 0xc0, 0xf7, 0x41, 0x33, 0x20, 0xdc, 0x67, 0x51,
	0x2a, 0x22, 0x9a, 0xb4, 0xca, 0xcb, 0xd6, 0x4a, 0xa3, 0xb3, 0x38, 0x19, 0xdb, 0x50, 0xf9, 0x19,
	0x46, 0xe4, 0x99, 0xae, 0x70, 0x1d, 0xdc, 0xe5, 0x29, 0x4d, 0x38, 0x65, 0x5d, 0x1c, 0x04, 0xac,
	0x55, 0x91, 0xa1, 0xff, 0x9b, 0x8c, 0xed, 0x05, 0x15, 0x6a, 0x5a, 0x91, 0xd7, 0xd4, 0xc7, 0x8d,
	0x20, 0x60, 0xf0, 0x2d, 0x50, 0xc3, 0xbe, 0x88, 0x46, 0xa4, 0x55, 0x5d, 0xb6, 0x56, 0xea, 0x9d,
	0xf9, 0xc9, 0xd8, 0x9e, 0x55, 0x51, 0xea, 0x3d, 0xf2, 0xb4, 0x03, 0x7c, 0x0a, 0x6a, 0x8a, 0xcd,
	0xd6, 0x1d, 0x99, 0xe0, 0xc9, 0xf3, 0xb1, 0x5d, 0xfa, 0x7d, 0x6c, 0xbf, 0x11, 0x46, 0xa2, 0x3f,
	0xec, 0x39, 0x3e, 0x1d, 0x68, 0x6a, 0xf4, 0x9f, 0xc7, 0x3c, 0xd8, 0x77, 0xc5, 0x61, 0x4a, 0xb8,
	0xb3, 0x93, 0x88, 0x02, 0x58, 0xa1, 0x20, 0x4f, 0xc3, 0x41, 0x02, 0x9a, 0xea, 0xa9, 0xcb, 0xb0,
	0x20, 0xad, 0x9a, 0x44, 0xdf, 0x9a, 0x02, 0x7d, 0x8b, 0xf8, 0x05, 0x4f, 0x06, 0x14, 0xf2, 0x80,
	0x3a, 0x79, 0x58, 0x90, 0xf5, 0xfa, 0xb7, 0xc7, 0x76, 0xe9, 0xe5, 0xb1, 0x5d, 0x42, 0x31, 0x98,
	0xf1, 0x08, 0x27, 0x4c, 0x15, 0x85, 0x07, 0x74, 0x98, 0x08, 0xd9, 0x98, 0x7f, 0x51, 0x94, 0x42,
	0xc9, 0xd8, 0x92, 0x0f, 0x46, 0xb6, 0xef, 0x2c, 0x50, 0xfd, 0x90, 0x10, 0x0e, 0xbf, 0x32, 0x72,
	0x55, 0x56, 0x9a, 0x6b, 0xff, 0x77, 0xb4, 0x92, 0x32, 0xd9, 0x39, 0x5a, 0x76, 0x59, 0x31, 0x9b,
	0x34, 0x4a, 0x14, 0x01, 0x7f, 0xc1, 0xff, 0xe1, 0x85, 0xfd, 0xe8, 0x66, 0x8c, 0x64, 0x20, 0xfc,
	0x8a, 0xcf, 0x79, 0x59, 0x05, 0xf5, 0x5d, 0x46, 0x47, 0x51, 0x40, 0x18, 0x7c, 0x1b, 0xcc, 0x64,
	0xa2, 0x20, 0x9c, 0xeb, 0xfa, 0xe1, 0x64, 0x6c, 0xdf, 0xd3, 0x19, 0x95, 0x01, 0x79, 0xb9, 0x0b,
	0x4c, 0xc0, 0x7c, 0x40, 0x62, 0x12, 0xe2, 0x4c, 0x76, 0xdd, 0x1e, 0x4d, 0x02, 0x12, 0x68, 0xa1,
	0x6e, 0x4c, 0xcd, 0xdb, 0x9c, 0xca, 0x92, 0xea, 0x4f, 0x41, 0xde, 0xfd, 0x02, 0xbb, 0x23, 0xa1,
	0xa1, 0x0f, 0x80, 0x4f, 0xe3, 0x18, 0x0b, 0xc2, 0x70, 0xac, 0x65, 0xbd, 0x39, 0x75, 0xa2, 0x79,
	0x95, 0xa8, 0x40, 0x42, 0x9e, 0x01, 0x0b, 0xfb, 0xe0, 0xae, 0xa0, 0x02, 0xc7, 0xdd, 0x98, 0xfa,
	0xfb, 0x24, 0x90, 0x73, 0xd0, 0xe8, 0x6c, 0x4f, 0x9d, 0x46, 0xcf, 0x9a, 0x89, 0x85, 0xbc, 0xa6,
	0x3c, 0x7e, 0x22, 0x4f, 0x70, 0x0f, 0x34, 0x0f, 0x22, 0xd1, 0x0f, 0x18, 0x3e, 0x88, 0x92, 0x50,
	0x4f, 0xd1, 0xd6, 0xd4, 0x89, 0xb4, 0xce, 0x0d, 0x28, 0xe4, 0x99, 0xc0, 0xf0, 0x6b, 0x30, 0xc3,
	0xc8, 0x01, 0x66, 0x01, 0x6f, 0xd5, 0x6e, 0x20, 0xb4, 0x6d, 0x2d, 0x34, 0xdd, 0x76, 0x1d, 0x3a,
	0xb5, 0xd2, 0xf2, 0x9c, 0x86, 0xd4, 0xbe, 0x29, 0x83, 0xfa, 0x53, 0xfd, 0x61, 0x53, 0x4a, 0xad,
	0x98, 0xcb, 0xf2, 0xad, 0xce, 0x25, 0x0c, 0xc1, 0x9c, 0x4f, 0x07, 0x69, 0x4c, 0xa4, 0x86, 0xb3,
	0xcb, 0x5a, 0x0a, 0xab, 0xb9, 0xb6, 0xe4, 0xa8, 0x9b, 0xdc, 0xc9, 0x6f, 0x72, 0xe7, 0xf3, 0xfc,
	0x26, 0xef, 0x20, 0x4d, 0xd1, 0x62, 0x2e, 0xa5, 0x0b, 0x00, 0xe8, 0xe8, 0x85, 0x6d, 0x79, 0xf7,
	0x8a, 0xb7, 0x59, 0xa0, 0x41, 0xc3, 0xa7, 0xa0, 0x91, 0xb3, 0xc0, 0xe1, 0x16, 0x68, 0xe4, 0xbd,
	0xe2, 0xfa, 0x1e, 0x58, 0x76, 0xae, 0x5e, 0x56, 0x4e, 0x1e, 0xd5, 0xa9, 0x66, 0xf9, 0xbd, 0x22,
	0x10, 0xfd, 0x94, 0x0d, 0xf1, 0x90, 0xf9, 0x7d, 0xcc, 0x09, 0x7c, 0x04, 0x66, 0x52, 0x4a, 0xe3,
	0xee, 0xf9, 0x76, 0x31, 0x98, 0xd5, 0x06, 0xe4, 0xd5, 0xb2, 0xa7, 0x9d, 0x00, 0xae, 0x81, 0x46,
	0xaa, 0x03, 0x99, 0xe6, 0xf6, 0xc1, 0x64, 0x6c, 0xdf, 0xd7, 0xee, 0xb9, 0x09, 0x79, 0x85, 0x9b,
	0xd1, 0x8c, 0xca, 0xed, 0x36, 0xe3, 0xd2, 0xce, 0xab, 0xde, 0x7c, 0xe7, 0x6d, 0x02, 0xc0, 0x05,
	0x66, 0x42, 0x75, 0xf0, 0xce, 0xb5, 0x1d, 0xac, 0x67, 0x9f, 0x2c, 0xfb, 0xd4, 0x90, 0x71, 0x99,
	0xc5, 0xd8, 0x68, 0xb5, 0xdb, 0xdd, 0x68, 0x5f, 0x02, 0xc8, 0x88, 0x4f, 0x47, 0x84, 0x45, 0x49,
	0xd8, 0x25, 0x89, 0x60, 0x11, 0xe1, 0xad, 0x19, 0xd9, 0xed, 0x37, 0x5f, 0xd5, 0x6d, 0xef, 0x3c,
	0x62, 0x3b, 0x11, 0xec, 0x50, 0x37, 0x7d, 0x9e, 0x5d, 0x78, 0x1d, 0x11, 0x9e, 0xed, 0x6c, 0x7d,
	0x57, 0xd5, 0x2f, 0xef, 0xec, 0xfc, 0xde, 0xd1, 0x0e, 0x86, 0x08, 0x4f, 0x2c, 0x30, 0x77, 0x29,
	0x03, 0xfc, 0x08, 0xdc, 0xd5, 0xe8, 0x8a, 0x46, 0x6b, 0x0a, 0x1a, 0x9b, 0x3a, 0x52, 0x12, 0x29,
	0x8c, 0x69, 0xcd, 0x6a, 0x7c, 0x78, 0xe5, 0x85, 0x23, 0x6f, 0x9b, 0x8d, 0x57, 0xad, 0xb5, 0x95,
	0x1b, 0x90, 0x7e, 0x61, 0xa7, 0xa1, 0x5f, 0x2a, 0x60, 0xe1, 0x33, 0x49, 0xe2, 0x66, 0x8c, 0xa3,
	0xc1, 0x2e, 0xa3, 0x29, 0xe5, 0x38, 0x86, 0xef, 0x81, 0x66, 0xaa, 0x9f, 0x8b, 0x99, 0x30, 0x54,
	0x65, 0x18, 0x91, 0x07, 0xf2, 0xd3, 0x4e, 0x60, 0x0e, 0x52, 0xf9, 0xda, 0x41, 0x4a, 0x40, 0x35,
	0xa6, 0x9c, 0xb7, 0x2a, 0xd7, 0x55, 0xfc, 0x44, 0x57, 0xdc, 0xcc, 0x5b, 0xc4, 0xf9, 0x74, 0xf5,
	0xca, 0x3c, 0xd0, 0x05, 0x75, 0x92, 0x6d, 0xca, 0xc4, 0x27, 0x7a, 0x50, 0x16, 0x8a, 0x2d, 0x9a,
	0x5b, 0x90, 0x77, 0xee, 0x74, 0x79, 0xb8, 0xee, 0xdc, 0x7c, 0xb8, 0x5c, 0x50, 0x57, 0xac, 0x10,
	0xa6, 0x27, 0x63, 0xe1, 0xc2, 0xc2, 0x96, 0x16, 0xe4, 0x9d, 0x3b, 0xad, 0x7f, 0x90, 0xc9, 0xec,
	0xfb, 0x63, 0xbb, 0xf4, 0xeb, 0xcf, 0x8f, 0xdf, 0xf9, 0xdb, 0xba, 0x9e, 0xb9, 0x21, 0x1d, 0x9d,
	0x57, 0x97, 0x08, 0x92, 0x08, 0xf4, 0xa3, 0x05, 0x66, 0x77, 0x49, 0x12, 0x44, 0x49, 0xb8, 0x8b,
	0x0f, 0xe9, 0x50, 0xfc, 0xf3, 0x0e, 0xfe, 0x57, 0x6b, 0xa3, 0x18, 0xa4, 0xce, 0xc7, 0xcf, 0x4f,
	0xdb, 0xd6, 0xc9, 0x69, 0xdb, 0xfa, 0xe3, 0xb4, 0x6d, 0x1d, 0x9d, 0xb5, 0x4b, 0x27, 0x67, 0xed,
	0xd2, 0x6f, 0x67, 0xed, 0xd2, 0x17, 0xab, 0x66, 0x12, 0xc2, 0x44, 0xb4, 0xbf, 0x47, 0x87, 0x49,
	0x20, 0xff, 0xa3, 0x71, 0xf5, 0x8f, 0x96, 0x67, 0xf9, 0xcf, 0x16, 0x99, 0xb3, 0x57, 0x93, 0x33,
	0xf6, 0xee, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x99, 0x5e, 0x54, 0xd4, 0x0c, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ShieldRate.Size()
		i -= size
		if _, err := m.ShieldRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Shield.Size()
		i -= size
		if _, err := m.Shield.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.SponsorAddr) > 0 {
		i -= len(m.SponsorAddr)
		copy(dAtA[i:], m.SponsorAddr)
		i = encodeVarintShield(dAtA, i, uint64(len(m.SponsorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Reserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Fees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Provider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Provider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.Withdrawing.Size()
		i -= size
		if _, err := m.Withdrawing.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalLocked.Size()
		i -= size
		if _, err := m.TotalLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Collateral.Size()
		i -= size
		if _, err := m.Collateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.DelegationBonded.Size()
		i -= size
		if _, err := m.DelegationBonded.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Withdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintShield(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Withdraws) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdraws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdraws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Withdraws) > 0 {
		for iNdEx := len(m.Withdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Purchase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Purchase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Purchase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Locked {
		i--
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.RecoveringEntries) > 0 {
		for iNdEx := len(m.RecoveringEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecoveringEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.Shield.Size()
		i -= size
		if _, err := m.Shield.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintShield(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecoveringEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoveringEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoveringEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.RecoverTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.RecoverTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintShield(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ShieldClaimProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShieldClaimProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShieldClaimProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Loss) > 0 {
		for iNdEx := len(m.Loss) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loss[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProposalId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingPayout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingPayout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingPayout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ProposalId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShield(dAtA []byte, offset int, v uint64) int {
	offset -= sovShield(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShield(uint64(m.Id))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = len(m.SponsorAddr)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	if m.Active {
		n += 2
	}
	l = m.Shield.Size()
	n += 1 + l + sovShield(uint64(l))
	l = m.ShieldRate.Size()
	n += 1 + l + sovShield(uint64(l))
	return n
}

func (m *Reserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovShield(uint64(l))
	return n
}

func (m *Fees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = m.DelegationBonded.Size()
	n += 1 + l + sovShield(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovShield(uint64(l))
	l = m.TotalLocked.Size()
	n += 1 + l + sovShield(uint64(l))
	l = m.Withdrawing.Size()
	n += 1 + l + sovShield(uint64(l))
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovShield(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovShield(uint64(l))
	return n
}

func (m *Withdraws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Withdraws) > 0 {
		for _, e := range m.Withdraws {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *Purchase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovShield(uint64(m.PoolId))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovShield(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovShield(uint64(l))
	l = m.Shield.Size()
	n += 1 + l + sovShield(uint64(l))
	if len(m.RecoveringEntries) > 0 {
		for _, e := range m.RecoveringEntries {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	if m.Locked {
		n += 2
	}
	return n
}

func (m *RecoveringEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.RecoverTime)
	n += 1 + l + sovShield(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *ShieldClaimProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovShield(uint64(m.ProposalId))
	}
	if m.PoolId != 0 {
		n += 1 + sovShield(uint64(m.PoolId))
	}
	if len(m.Loss) > 0 {
		for _, e := range m.Loss {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	return n
}

func (m *PendingPayout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovShield(uint64(m.ProposalId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovShield(uint64(l))
	return n
}

func sovShield(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShield(x uint64) (n int) {
	return sovShield(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SponsorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SponsorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShieldRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.DecCoin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Provider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationBonded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationBonded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdrawing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdraws) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdraws: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdraws: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraws = append(m.Withdraws, Withdraw{})
			if err := m.Withdraws[len(m.Withdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Purchase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Purchase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Purchase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveringEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveringEntries = append(m.RecoveringEntries, RecoveringEntry{})
			if err := m.RecoveringEntries[len(m.RecoveringEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoveringEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoveringEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoveringEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.RecoverTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShieldClaimProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShieldClaimProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShieldClaimProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loss = append(m.Loss, types.Coin{})
			if err := m.Loss[len(m.Loss)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingPayout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingPayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingPayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShield(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShield
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShield
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShield
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShield
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShield
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShield
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShield        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShield          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShield = fmt.Errorf("proto: unexpected end of group")
)
