// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/shield/v1alpha1/shield.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Pool contains a shield project pool's data.
type Pool struct {
	Id          uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Description string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Sponsor     string                                 `protobuf:"bytes,3,opt,name=sponsor,proto3" json:"sponsor,omitempty" yaml:"sponsor"`
	SponsorAddr string                                 `protobuf:"bytes,4,opt,name=sponsor_addr,json=sponsorAddr,proto3" json:"sponsor_addr,omitempty" yaml:"sponsor_addr"`
	ShieldLimit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=shield_limit,json=shieldLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shield_limit" yaml:"shield_limit"`
	Active      bool                                   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty" yaml:"active"`
	Shield      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=shield,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shield" yaml:"shield"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

// Purchase record an individual purchase.
type Purchase struct {
	// PurchaseID is the purchase_id.
	PurchaseId uint64 `protobuf:"varint,1,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id,omitempty" yaml:"purchase_id"`
	// ProtectionEndTime is the time when the protection of the shield ends.
	ProtectionEndTime time.Time `protobuf:"bytes,2,opt,name=protection_end_time,json=protectionEndTime,proto3,stdtime" json:"protection_end_time" yaml:"protection_end_time"`
	// DeletionTime is the time when the purchase should be deleted.
	DeletionTime time.Time `protobuf:"bytes,3,opt,name=deletion_time,json=deletionTime,proto3,stdtime" json:"deletion_time" yaml:"deletion_time"`
	// Description is the information about the protected asset.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// Shield is the unused amount of shield purchased.
	Shield github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=shield,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shield" yaml:"shield"`
	// NativeServiceFee is the native service fee paid by this purchase
	NativeServiceFee github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,6,rep,name=native_service_fee,json=nativeServiceFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"native_service_fee"`
	// ForeignServiceFee is the native service fee paid by this purchase
	ForeignServiceFee github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,7,rep,name=foreign_service_fee,json=foreignServiceFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"foreign_service_fee"`
}

func (m *Purchase) Reset()         { *m = Purchase{} }
func (m *Purchase) String() string { return proto.CompactTextString(m) }
func (*Purchase) ProtoMessage()    {}
func (*Purchase) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{1}
}
func (m *Purchase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Purchase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Purchase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Purchase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Purchase.Merge(m, src)
}
func (m *Purchase) XXX_Size() int {
	return m.Size()
}
func (m *Purchase) XXX_DiscardUnknown() {
	xxx_messageInfo_Purchase.DiscardUnknown(m)
}

var xxx_messageInfo_Purchase proto.InternalMessageInfo

// PurchaseList is a collection of purchase.
type PurchaseList struct {
	// PoolID is the id of the shield of the purchase.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	// Purchaser is the address making the purchase.
	Purchaser string `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty" yaml:"purchaser"`
	// Entries stores all purchases by the purchaser in the pool.
	Entries []Purchase `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries" yaml:"entries"`
}

func (m *PurchaseList) Reset()         { *m = PurchaseList{} }
func (m *PurchaseList) String() string { return proto.CompactTextString(m) }
func (*PurchaseList) ProtoMessage()    {}
func (*PurchaseList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{2}
}
func (m *PurchaseList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurchaseList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PurchaseList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PurchaseList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseList.Merge(m, src)
}
func (m *PurchaseList) XXX_Size() int {
	return m.Size()
}
func (m *PurchaseList) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseList.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseList proto.InternalMessageInfo

// Provider tracks total delegation, total collateral, and rewards of a provider.
type Provider struct {
	// Address is the address of the provider.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// DelegationBonded is the amount of bonded delegation.
	DelegationBonded github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=delegation_bonded,json=delegationBonded,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"delegation_bonded" yaml:"provider"`
	// Collateral is amount of all collaterals for the provider, including
	// those in withdraw queue but excluding those currently locked, in all
	// pools.
	Collateral github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=collateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral" yaml:"collateral"`
	// TotalLocked is the amount locked for pending claims.
	TotalLocked github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_locked,json=totalLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_locked" yaml:"total_locked"`
	// Withdrawing is the amount of collateral in withdraw queues.
	Withdrawing github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=withdrawing,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"withdrawing" yaml:"withdrawing"`
	// Rewards is the pooling rewards to be collected.
	// NativeReward is the pooling reward to be collected on the native coin
	NativeReward github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,6,rep,name=native_reward,json=nativeReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"native_reward"`
	// ForeignReward is the pooling reward to be collected on the foreign coin
	ForeignReward github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,7,rep,name=foreign_reward,json=foreignReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"foreign_reward"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{3}
}
func (m *Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return m.Size()
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

// PoolPurchase is a pair of pool id and purchaser.
type PoolPurchaser struct {
	// PoolID is the id of the shield pool.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	// Purchaser is the chain address of the purchaser.
	Purchaser string `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty" yaml:"purchaser"`
}

func (m *PoolPurchaser) Reset()         { *m = PoolPurchaser{} }
func (m *PoolPurchaser) String() string { return proto.CompactTextString(m) }
func (*PoolPurchaser) ProtoMessage()    {}
func (*PoolPurchaser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{4}
}
func (m *PoolPurchaser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolPurchaser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolPurchaser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolPurchaser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolPurchaser.Merge(m, src)
}
func (m *PoolPurchaser) XXX_Size() int {
	return m.Size()
}
func (m *PoolPurchaser) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolPurchaser.DiscardUnknown(m)
}

var xxx_messageInfo_PoolPurchaser proto.InternalMessageInfo

// PoolPurchaserPairs defines an array of PoolPurchaser objects.
type PoolPurchaserPairs struct {
	Pairs []PoolPurchaser `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *PoolPurchaserPairs) Reset()         { *m = PoolPurchaserPairs{} }
func (m *PoolPurchaserPairs) String() string { return proto.CompactTextString(m) }
func (*PoolPurchaserPairs) ProtoMessage()    {}
func (*PoolPurchaserPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{5}
}
func (m *PoolPurchaserPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolPurchaserPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolPurchaserPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolPurchaserPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolPurchaserPairs.Merge(m, src)
}
func (m *PoolPurchaserPairs) XXX_Size() int {
	return m.Size()
}
func (m *PoolPurchaserPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolPurchaserPairs.DiscardUnknown(m)
}

var xxx_messageInfo_PoolPurchaserPairs proto.InternalMessageInfo

func (m *PoolPurchaserPairs) GetPairs() []PoolPurchaser {
	if m != nil {
		return m.Pairs
	}
	return nil
}

// Withdraw stores an ongoing withdraw of pool collateral.
type Withdraw struct {
	// Address is the chain address of the provider withdrawing.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// Amount is the amount of withdraw.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	// CompletionTime is the scheduled withdraw completion time.
	CompletionTime time.Time `protobuf:"bytes,3,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time" yaml:"completion_time"`
}

func (m *Withdraw) Reset()         { *m = Withdraw{} }
func (m *Withdraw) String() string { return proto.CompactTextString(m) }
func (*Withdraw) ProtoMessage()    {}
func (*Withdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{6}
}
func (m *Withdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdraw.Merge(m, src)
}
func (m *Withdraw) XXX_Size() int {
	return m.Size()
}
func (m *Withdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdraw.DiscardUnknown(m)
}

var xxx_messageInfo_Withdraw proto.InternalMessageInfo

// Withdraws defines an array of Withdraw objects.
type Withdraws struct {
	Withdraws []Withdraw `protobuf:"bytes,1,rep,name=withdraws,proto3" json:"withdraws"`
}

func (m *Withdraws) Reset()         { *m = Withdraws{} }
func (m *Withdraws) String() string { return proto.CompactTextString(m) }
func (*Withdraws) ProtoMessage()    {}
func (*Withdraws) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{7}
}
func (m *Withdraws) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdraws) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdraws.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdraws) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdraws.Merge(m, src)
}
func (m *Withdraws) XXX_Size() int {
	return m.Size()
}
func (m *Withdraws) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdraws.DiscardUnknown(m)
}

var xxx_messageInfo_Withdraws proto.InternalMessageInfo

func (m *Withdraws) GetWithdraws() []Withdraw {
	if m != nil {
		return m.Withdraws
	}
	return nil
}

type ShieldStaking struct {
	PoolId            uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Purchaser         string                                 `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty" yaml:"purchaser"`
	Amount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	WithdrawRequested github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=withdraw_requested,json=withdrawRequested,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"withdraw_requested" yaml:"withdraw_requested"`
}

func (m *ShieldStaking) Reset()         { *m = ShieldStaking{} }
func (m *ShieldStaking) String() string { return proto.CompactTextString(m) }
func (*ShieldStaking) ProtoMessage()    {}
func (*ShieldStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{8}
}
func (m *ShieldStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShieldStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShieldStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShieldStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShieldStaking.Merge(m, src)
}
func (m *ShieldStaking) XXX_Size() int {
	return m.Size()
}
func (m *ShieldStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_ShieldStaking.DiscardUnknown(m)
}

var xxx_messageInfo_ShieldStaking proto.InternalMessageInfo

type LastUpdateTime struct {
	Time *time.Time `protobuf:"bytes,1,opt,name=time,proto3,stdtime" json:"time,omitempty" yaml:"time"`
}

func (m *LastUpdateTime) Reset()         { *m = LastUpdateTime{} }
func (m *LastUpdateTime) String() string { return proto.CompactTextString(m) }
func (*LastUpdateTime) ProtoMessage()    {}
func (*LastUpdateTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{9}
}
func (m *LastUpdateTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastUpdateTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastUpdateTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastUpdateTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastUpdateTime.Merge(m, src)
}
func (m *LastUpdateTime) XXX_Size() int {
	return m.Size()
}
func (m *LastUpdateTime) XXX_DiscardUnknown() {
	xxx_messageInfo_LastUpdateTime.DiscardUnknown(m)
}

var xxx_messageInfo_LastUpdateTime proto.InternalMessageInfo

type ShieldClaimProposal struct {
	ProposalId  uint64                                   `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	PoolId      uint64                                   `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	PurchaseId  uint64                                   `protobuf:"varint,3,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id,omitempty" yaml:"purchase_id"`
	Loss        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=loss,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"loss" yaml:"loss"`
	Evidence    string                                   `protobuf:"bytes,5,opt,name=evidence,proto3" json:"evidence,omitempty" yaml:"evidence"`
	Description string                                   `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Proposer    string                                   `protobuf:"bytes,7,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
}

func (m *ShieldClaimProposal) Reset()      { *m = ShieldClaimProposal{} }
func (*ShieldClaimProposal) ProtoMessage() {}
func (*ShieldClaimProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5263cf0ba18829d, []int{10}
}
func (m *ShieldClaimProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShieldClaimProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShieldClaimProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShieldClaimProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShieldClaimProposal.Merge(m, src)
}
func (m *ShieldClaimProposal) XXX_Size() int {
	return m.Size()
}
func (m *ShieldClaimProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ShieldClaimProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ShieldClaimProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Pool)(nil), "shentu.shield.v1alpha1.Pool")
	proto.RegisterType((*Purchase)(nil), "shentu.shield.v1alpha1.Purchase")
	proto.RegisterType((*PurchaseList)(nil), "shentu.shield.v1alpha1.PurchaseList")
	proto.RegisterType((*Provider)(nil), "shentu.shield.v1alpha1.Provider")
	proto.RegisterType((*PoolPurchaser)(nil), "shentu.shield.v1alpha1.PoolPurchaser")
	proto.RegisterType((*PoolPurchaserPairs)(nil), "shentu.shield.v1alpha1.PoolPurchaserPairs")
	proto.RegisterType((*Withdraw)(nil), "shentu.shield.v1alpha1.Withdraw")
	proto.RegisterType((*Withdraws)(nil), "shentu.shield.v1alpha1.Withdraws")
	proto.RegisterType((*ShieldStaking)(nil), "shentu.shield.v1alpha1.ShieldStaking")
	proto.RegisterType((*LastUpdateTime)(nil), "shentu.shield.v1alpha1.LastUpdateTime")
	proto.RegisterType((*ShieldClaimProposal)(nil), "shentu.shield.v1alpha1.ShieldClaimProposal")
}

func init() {
	proto.RegisterFile("shentu/shield/v1alpha1/shield.proto", fileDescriptor_d5263cf0ba18829d)
}

var fileDescriptor_d5263cf0ba18829d = []byte{
	// 1271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xc6, 0x8e, 0x93, 0x8c, 0xe3, 0xb4, 0x19, 0x57, 0xf9, 0xba, 0xd1, 0x17, 0x6f, 0x34,
	0x88, 0x2a, 0xa8, 0x74, 0x97, 0xb4, 0x07, 0x50, 0x84, 0x54, 0xd5, 0x69, 0x91, 0xa2, 0xe6, 0x10,
	0xa6, 0xa0, 0x48, 0x5c, 0xac, 0xc9, 0xce, 0xc4, 0x5e, 0x65, 0xbd, 0xb3, 0xec, 0x8c, 0xdd, 0x1f,
	0x17, 0x84, 0xc4, 0x81, 0x63, 0x8f, 0x1c, 0x7b, 0xee, 0x99, 0x23, 0x17, 0x6e, 0xbd, 0x20, 0x2a,
	0x4e, 0x08, 0x24, 0x17, 0xb5, 0x17, 0xce, 0xfe, 0x03, 0x10, 0x9a, 0x1f, 0xeb, 0x5d, 0x97, 0x96,
	0xc4, 0x55, 0x73, 0xf2, 0xcc, 0xbe, 0x1f, 0x9f, 0x37, 0xf3, 0x3e, 0xef, 0xcd, 0x33, 0x78, 0x57,
	0xf4, 0x58, 0x2c, 0x07, 0xbe, 0xe8, 0x85, 0x2c, 0xa2, 0xfe, 0x70, 0x8b, 0x44, 0x49, 0x8f, 0x6c,
	0xd9, 0xbd, 0x97, 0xa4, 0x5c, 0x72, 0xb8, 0x66, 0x94, 0x3c, 0xfb, 0x31, 0x53, 0x5a, 0xbf, 0xd0,
	0xe5, 0x5d, 0xae, 0x55, 0x7c, 0xb5, 0x32, 0xda, 0xeb, 0xad, 0x80, 0x8b, 0x3e, 0x17, 0xfe, 0x21,
	0x11, 0xcc, 0x1f, 0x6e, 0x1d, 0x32, 0x49, 0xb6, 0xfc, 0x80, 0x87, 0xb1, 0x95, 0x5f, 0x34, 0xf2,
	0x8e, 0x31, 0x34, 0x1b, 0x2b, 0x72, 0xbb, 0x9c, 0x77, 0x23, 0xe6, 0xeb, 0xdd, 0xe1, 0xe0, 0xc8,
	0x97, 0x61, 0x9f, 0x09, 0x49, 0xfa, 0x89, 0x51, 0x40, 0x3f, 0x95, 0x41, 0x65, 0x9f, 0xf3, 0x08,
	0xbe, 0x03, 0xe6, 0x42, 0xda, 0x74, 0x36, 0x9c, 0xcd, 0x4a, 0xbb, 0x3e, 0x1e, 0xb9, 0x4b, 0xf7,
	0x49, 0x3f, 0xda, 0x46, 0x21, 0x45, 0x78, 0x2e, 0xa4, 0xf0, 0x63, 0x50, 0xa3, 0x4c, 0x04, 0x69,
	0x98, 0xc8, 0x90, 0xc7, 0xcd, 0xb9, 0x0d, 0x67, 0x73, 0xa9, 0xbd, 0x36, 0x1e, 0xb9, 0xd0, 0xe8,
	0x15, 0x84, 0x08, 0x17, 0x55, 0xe1, 0x07, 0x60, 0x41, 0x24, 0x3c, 0x16, 0x3c, 0x6d, 0x96, 0xb5,
	0x15, 0x1c, 0x8f, 0xdc, 0x15, 0x63, 0x65, 0x05, 0x08, 0x67, 0x2a, 0x70, 0x1b, 0x2c, 0xdb, 0x65,
	0x87, 0x50, 0x9a, 0x36, 0x2b, 0xda, 0xe4, 0x7f, 0xe3, 0x91, 0xdb, 0x98, 0x32, 0xd1, 0x52, 0x84,
	0x6b, 0x76, 0x7b, 0x83, 0xd2, 0x14, 0xf6, 0xc0, 0xb2, 0xb9, 0xd0, 0x4e, 0x14, 0xf6, 0x43, 0xd9,
	0x9c, 0xd7, 0xb6, 0xb7, 0x9e, 0x8c, 0xdc, 0xd2, 0xef, 0x23, 0xf7, 0x52, 0x37, 0x94, 0xbd, 0xc1,
	0xa1, 0x17, 0xf0, 0xbe, 0xbd, 0x23, 0xfb, 0x73, 0x45, 0xd0, 0x63, 0x5f, 0xde, 0x4f, 0x98, 0xf0,
	0x76, 0x63, 0x59, 0x40, 0x2a, 0xf8, 0x52, 0x48, 0x7a, 0xbb, 0xa7, 0x76, 0xf0, 0x7d, 0x50, 0x25,
	0x81, 0x0c, 0x87, 0xac, 0x59, 0xdd, 0x70, 0x36, 0x17, 0xdb, 0xab, 0xe3, 0x91, 0x5b, 0x37, 0x56,
	0xe6, 0x3b, 0xc2, 0x56, 0x01, 0x1e, 0x80, 0xaa, 0xb1, 0x6c, 0x2e, 0xe8, 0x70, 0xae, 0xcf, 0x1c,
	0x4e, 0xbd, 0x18, 0x0e, 0xc2, 0xd6, 0xdd, 0xf6, 0xe2, 0x77, 0x8f, 0xdc, 0xd2, 0x5f, 0x8f, 0xdc,
	0x12, 0xfa, 0x71, 0x1e, 0x2c, 0xee, 0x0f, 0xd2, 0xa0, 0x47, 0x04, 0x83, 0x1f, 0x81, 0x5a, 0x62,
	0xd7, 0x9d, 0x49, 0x42, 0x0b, 0x89, 0x2a, 0x08, 0x11, 0x06, 0xd9, 0x6e, 0x97, 0xc2, 0x14, 0x34,
	0x14, 0x25, 0x58, 0xa0, 0xb2, 0xd6, 0x61, 0x31, 0xed, 0x28, 0xae, 0xe8, 0x4c, 0xd7, 0xae, 0xae,
	0x7b, 0x86, 0x48, 0x5e, 0x46, 0x24, 0xef, 0xf3, 0x8c, 0x48, 0xed, 0x4b, 0xea, 0x44, 0xe3, 0x91,
	0xbb, 0x6e, 0x01, 0xfe, 0xed, 0x04, 0x3d, 0x7c, 0xe6, 0x3a, 0x78, 0x35, 0x97, 0xdc, 0x8a, 0xa9,
	0xb2, 0x87, 0x04, 0xd4, 0x29, 0x8b, 0x98, 0x56, 0xd6, 0x68, 0xe5, 0x13, 0xd1, 0x36, 0x2c, 0xda,
	0x85, 0x8c, 0x77, 0x05, 0x73, 0x83, 0xb3, 0x9c, 0x7d, 0xd3, 0x10, 0x2f, 0x11, 0xb7, 0x72, 0x7a,
	0xe2, 0xe6, 0x99, 0x9b, 0x7f, 0xab, 0x99, 0x83, 0x5f, 0x03, 0x18, 0x13, 0x45, 0x8e, 0x8e, 0x60,
	0xe9, 0x30, 0x0c, 0x58, 0xe7, 0x88, 0x29, 0x26, 0x95, 0x37, 0x6b, 0x57, 0xff, 0xef, 0xd9, 0xfa,
	0x55, 0xc5, 0xee, 0xd9, 0x62, 0xf7, 0x6e, 0xb2, 0x60, 0x87, 0x87, 0x71, 0xfb, 0x9a, 0x0a, 0xe1,
	0xf1, 0x33, 0xf7, 0xf2, 0x29, 0x42, 0xb0, 0x36, 0x02, 0x9f, 0x37, 0x60, 0x77, 0x0c, 0xd6, 0xa7,
	0x8c, 0xc1, 0x6f, 0x1c, 0xd0, 0x38, 0xe2, 0x29, 0x0b, 0xbb, 0xf1, 0x54, 0x08, 0x0b, 0x67, 0x15,
	0xc2, 0xaa, 0x45, 0xcb, 0x63, 0x28, 0xd0, 0xf7, 0x67, 0x07, 0x2c, 0x67, 0xf4, 0xdd, 0x0b, 0x85,
	0x84, 0x97, 0xc1, 0x42, 0xc2, 0x79, 0x94, 0xd3, 0xb7, 0xd0, 0x31, 0xac, 0x00, 0xe1, 0xaa, 0x5a,
	0xed, 0x52, 0x78, 0x15, 0x2c, 0x65, 0x24, 0x4e, 0x6d, 0x5b, 0xba, 0x30, 0x1e, 0xb9, 0xe7, 0xa7,
	0xd9, 0x9e, 0x22, 0x9c, 0xab, 0x41, 0x0c, 0x16, 0x58, 0x2c, 0xd3, 0x90, 0x89, 0x66, 0x59, 0x1f,
	0x79, 0xc3, 0x7b, 0x75, 0x43, 0xf6, 0xb2, 0xb8, 0xda, 0x6b, 0x96, 0x76, 0x36, 0x0c, 0x6b, 0x8e,
	0x70, 0xe6, 0xa8, 0x70, 0x9e, 0x3f, 0x54, 0x39, 0xa6, 0x7c, 0x18, 0x52, 0x96, 0xaa, 0xee, 0xa7,
	0x3a, 0x15, 0x13, 0x42, 0x9f, 0x65, 0xaa, 0xfb, 0x59, 0x01, 0xc2, 0x99, 0x0a, 0x8c, 0xc1, 0xaa,
	0x22, 0x6f, 0x97, 0x68, 0x4a, 0x1f, 0xf2, 0x98, 0x32, 0x6a, 0x0f, 0x75, 0x63, 0x66, 0xf6, 0x9d,
	0x9b, 0xd4, 0xa3, 0x0e, 0x05, 0xe1, 0xf3, 0xb9, 0xef, 0xb6, 0x76, 0x0d, 0x03, 0x00, 0x02, 0x1e,
	0x45, 0x44, 0xb2, 0x94, 0x44, 0xb6, 0x3d, 0xef, 0xcc, 0x0c, 0xb4, 0x6a, 0x80, 0x72, 0x4f, 0x08,
	0x17, 0xdc, 0xaa, 0xb6, 0x2c, 0xb9, 0x24, 0x51, 0x27, 0xe2, 0xc1, 0x31, 0xa3, 0xb6, 0x04, 0xdf,
	0xb8, 0x2d, 0x17, 0x7d, 0x21, 0x5c, 0xd3, 0xdb, 0x3d, 0xbd, 0x83, 0x47, 0xa0, 0x76, 0x37, 0x94,
	0x3d, 0x9a, 0x92, 0xbb, 0x61, 0xdc, 0xb5, 0x65, 0x7b, 0x73, 0x66, 0x20, 0xdb, 0x19, 0x0a, 0xae,
	0x10, 0x2e, 0x3a, 0x86, 0x43, 0x50, 0xb7, 0x05, 0x9c, 0xb2, 0xbb, 0x24, 0xa5, 0x67, 0x57, 0xbb,
	0xcb, 0x06, 0x07, 0x6b, 0x18, 0x78, 0x0f, 0xac, 0x64, 0x65, 0x6b, 0x81, 0xcf, 0xac, 0x62, 0xeb,
	0x16, 0xc8, 0x20, 0x17, 0xd8, 0xfd, 0x00, 0xd4, 0xd5, 0xbc, 0xb0, 0x3f, 0x29, 0xa6, 0xb3, 0xae,
	0xd6, 0x02, 0xf6, 0x01, 0x80, 0x53, 0xd8, 0xfb, 0x24, 0x4c, 0x05, 0xbc, 0x01, 0xe6, 0x13, 0xb5,
	0x68, 0x3a, 0xfa, 0x32, 0xde, 0x7b, 0x6d, 0x2d, 0x17, 0x4d, 0xdb, 0x15, 0x75, 0x2b, 0xd8, 0x58,
	0xa2, 0x6f, 0xe7, 0xc0, 0xe2, 0x81, 0x4d, 0xf0, 0x8c, 0x25, 0x7b, 0x00, 0xaa, 0xa4, 0xcf, 0x07,
	0xb1, 0xb4, 0xc7, 0x79, 0xe3, 0x57, 0xc2, 0x78, 0x51, 0x83, 0x83, 0x5e, 0xc0, 0x2e, 0x38, 0x17,
	0xf0, 0x7e, 0x32, 0xdb, 0xeb, 0x88, 0x6c, 0x9b, 0x5a, 0xcb, 0x4a, 0x72, 0xca, 0x81, 0x79, 0x1f,
	0x57, 0xf2, 0xaf, 0xca, 0xb0, 0x70, 0xbf, 0x9f, 0x81, 0xa5, 0xec, 0x16, 0x04, 0xbc, 0x09, 0x96,
	0x32, 0xce, 0x67, 0x57, 0xfb, 0xda, 0x36, 0x99, 0x59, 0xd9, 0x5b, 0xcd, 0x0d, 0xd1, 0x2f, 0x73,
	0xa0, 0x7e, 0x47, 0x6b, 0xdf, 0x91, 0xe4, 0x58, 0x15, 0xcf, 0x99, 0x77, 0xf7, 0x3c, 0x23, 0xe5,
	0xb7, 0x9b, 0x91, 0x07, 0x00, 0x66, 0x07, 0xeb, 0xa4, 0xec, 0xab, 0x01, 0x13, 0x72, 0xd2, 0xce,
	0x6e, 0xcf, 0x0c, 0x72, 0x71, 0xba, 0xcb, 0xe4, 0x1e, 0x11, 0x5e, 0xcd, 0x3e, 0xe2, 0xec, 0x5b,
	0x21, 0x49, 0x1d, 0xb0, 0xb2, 0x47, 0x84, 0xfc, 0x22, 0xa1, 0x44, 0x32, 0x3d, 0xe2, 0xec, 0x80,
	0x8a, 0xa6, 0x87, 0x73, 0x22, 0x3d, 0x1a, 0xe3, 0x91, 0x5b, 0xb3, 0x6d, 0x74, 0xc2, 0x07, 0x6d,
	0x5c, 0x00, 0xf8, 0xbb, 0x0c, 0x1a, 0x26, 0x65, 0x3b, 0x11, 0x09, 0xfb, 0xfb, 0x29, 0x4f, 0xb8,
	0x20, 0x91, 0x9e, 0x2c, 0xed, 0xfa, 0xd5, 0x93, 0x65, 0x2e, 0x54, 0x93, 0xa5, 0xdd, 0xed, 0xd2,
	0x62, 0xc6, 0xe7, 0x4e, 0xcc, 0xf8, 0x4b, 0xf3, 0x6b, 0xf9, 0xd4, 0xf3, 0x6b, 0x0c, 0x2a, 0x11,
	0x17, 0xa2, 0x59, 0xd1, 0x54, 0xbd, 0xf8, 0xca, 0x96, 0xa8, 0xfb, 0xe1, 0x75, 0x5b, 0x23, 0xf6,
	0x22, 0x94, 0x11, 0x7a, 0xfc, 0xcc, 0xdd, 0x3c, 0x45, 0xe6, 0x4c, 0x6f, 0xd4, 0x38, 0xd0, 0x07,
	0x8b, 0x4c, 0x3d, 0xac, 0x71, 0xc0, 0xec, 0x4b, 0xd3, 0xc8, 0x1f, 0xdd, 0x4c, 0x82, 0xf0, 0x44,
	0xe9, 0xe5, 0x49, 0xb4, 0x7a, 0xfa, 0x49, 0xd4, 0x07, 0x8b, 0xe6, 0x3a, 0x59, 0x6a, 0xff, 0x45,
	0x34, 0xa6, 0xde, 0x77, 0x2d, 0x41, 0x78, 0xa2, 0xb4, 0xfd, 0x89, 0x4a, 0xe6, 0xf7, 0x8f, 0xdc,
	0xd2, 0xaf, 0x3f, 0x5c, 0xf9, 0xf0, 0x3f, 0xcf, 0x75, 0xcf, 0xef, 0xf2, 0xe1, 0xe4, 0x74, 0xb1,
	0x64, 0xb1, 0x6c, 0xdf, 0x7e, 0xf2, 0xbc, 0xe5, 0x3c, 0x7d, 0xde, 0x72, 0xfe, 0x7c, 0xde, 0x72,
	0x1e, 0xbe, 0x68, 0x95, 0x9e, 0xbe, 0x68, 0x95, 0x7e, 0x7b, 0xd1, 0x2a, 0x7d, 0xb9, 0x55, 0xf4,
	0xc5, 0x52, 0x19, 0x1e, 0x1f, 0xf1, 0x41, 0x4c, 0xf5, 0x48, 0xe1, 0xdb, 0x3f, 0xbe, 0xf7, 0xb2,
	0xbf, 0xbe, 0xda, 0xe9, 0x61, 0x55, 0xd3, 0xf0, 0xda, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x89,
	0xb5, 0xc1, 0x77, 0x18, 0x0f, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shield.Size()
		i -= size
		if _, err := m.Shield.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.ShieldLimit.Size()
		i -= size
		if _, err := m.ShieldLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.SponsorAddr) > 0 {
		i -= len(m.SponsorAddr)
		copy(dAtA[i:], m.SponsorAddr)
		i = encodeVarintShield(dAtA, i, uint64(len(m.SponsorAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Purchase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Purchase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Purchase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForeignServiceFee) > 0 {
		for iNdEx := len(m.ForeignServiceFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForeignServiceFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NativeServiceFee) > 0 {
		for iNdEx := len(m.NativeServiceFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NativeServiceFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.Shield.Size()
		i -= size
		if _, err := m.Shield.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DeletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintShield(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ProtectionEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ProtectionEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintShield(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.PurchaseId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.PurchaseId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PurchaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurchaseList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurchaseList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Provider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Provider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForeignReward) > 0 {
		for iNdEx := len(m.ForeignReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForeignReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NativeReward) > 0 {
		for iNdEx := len(m.NativeReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NativeReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.Withdrawing.Size()
		i -= size
		if _, err := m.Withdrawing.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalLocked.Size()
		i -= size
		if _, err := m.TotalLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Collateral.Size()
		i -= size
		if _, err := m.Collateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.DelegationBonded.Size()
		i -= size
		if _, err := m.DelegationBonded.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolPurchaser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolPurchaser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolPurchaser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolPurchaserPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolPurchaserPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolPurchaserPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Withdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintShield(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Withdraws) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdraws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdraws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Withdraws) > 0 {
		for iNdEx := len(m.Withdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShieldStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShieldStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShieldStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WithdrawRequested.Size()
		i -= size
		if _, err := m.WithdrawRequested.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintShield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LastUpdateTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastUpdateTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastUpdateTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintShield(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShieldClaimProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShieldClaimProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShieldClaimProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintShield(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Loss) > 0 {
		for iNdEx := len(m.Loss) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loss[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PurchaseId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.PurchaseId))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProposalId != 0 {
		i = encodeVarintShield(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShield(dAtA []byte, offset int, v uint64) int {
	offset -= sovShield(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShield(uint64(m.Id))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = len(m.SponsorAddr)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = m.ShieldLimit.Size()
	n += 1 + l + sovShield(uint64(l))
	if m.Active {
		n += 2
	}
	l = m.Shield.Size()
	n += 1 + l + sovShield(uint64(l))
	return n
}

func (m *Purchase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PurchaseId != 0 {
		n += 1 + sovShield(uint64(m.PurchaseId))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ProtectionEndTime)
	n += 1 + l + sovShield(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletionTime)
	n += 1 + l + sovShield(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = m.Shield.Size()
	n += 1 + l + sovShield(uint64(l))
	if len(m.NativeServiceFee) > 0 {
		for _, e := range m.NativeServiceFee {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	if len(m.ForeignServiceFee) > 0 {
		for _, e := range m.ForeignServiceFee {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *PurchaseList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovShield(uint64(m.PoolId))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = m.DelegationBonded.Size()
	n += 1 + l + sovShield(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovShield(uint64(l))
	l = m.TotalLocked.Size()
	n += 1 + l + sovShield(uint64(l))
	l = m.Withdrawing.Size()
	n += 1 + l + sovShield(uint64(l))
	if len(m.NativeReward) > 0 {
		for _, e := range m.NativeReward {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	if len(m.ForeignReward) > 0 {
		for _, e := range m.ForeignReward {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *PoolPurchaser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovShield(uint64(m.PoolId))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	return n
}

func (m *PoolPurchaserPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovShield(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovShield(uint64(l))
	return n
}

func (m *Withdraws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Withdraws) > 0 {
		for _, e := range m.Withdraws {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	return n
}

func (m *ShieldStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovShield(uint64(m.PoolId))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovShield(uint64(l))
	l = m.WithdrawRequested.Size()
	n += 1 + l + sovShield(uint64(l))
	return n
}

func (m *LastUpdateTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Time)
		n += 1 + l + sovShield(uint64(l))
	}
	return n
}

func (m *ShieldClaimProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovShield(uint64(m.ProposalId))
	}
	if m.PoolId != 0 {
		n += 1 + sovShield(uint64(m.PoolId))
	}
	if m.PurchaseId != 0 {
		n += 1 + sovShield(uint64(m.PurchaseId))
	}
	if len(m.Loss) > 0 {
		for _, e := range m.Loss {
			l = e.Size()
			n += 1 + l + sovShield(uint64(l))
		}
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovShield(uint64(l))
	}
	return n
}

func sovShield(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShield(x uint64) (n int) {
	return sovShield(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SponsorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SponsorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShieldLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Purchase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Purchase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Purchase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseId", wireType)
			}
			m.PurchaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaseId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectionEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ProtectionEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DeletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeServiceFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeServiceFee = append(m.NativeServiceFee, types.DecCoin{})
			if err := m.NativeServiceFee[len(m.NativeServiceFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignServiceFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignServiceFee = append(m.ForeignServiceFee, types.DecCoin{})
			if err := m.ForeignServiceFee[len(m.ForeignServiceFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurchaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurchaseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurchaseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Purchase{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Provider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationBonded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationBonded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdrawing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeReward = append(m.NativeReward, types.DecCoin{})
			if err := m.NativeReward[len(m.NativeReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignReward = append(m.ForeignReward, types.DecCoin{})
			if err := m.ForeignReward[len(m.ForeignReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolPurchaser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolPurchaser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolPurchaser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolPurchaserPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolPurchaserPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolPurchaserPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, PoolPurchaser{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdraws) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdraws: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdraws: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraws = append(m.Withdraws, Withdraw{})
			if err := m.Withdraws[len(m.Withdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShieldStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShieldStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShieldStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawRequested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawRequested.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastUpdateTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastUpdateTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastUpdateTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShieldClaimProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShieldClaimProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShieldClaimProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseId", wireType)
			}
			m.PurchaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaseId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loss = append(m.Loss, types.Coin{})
			if err := m.Loss[len(m.Loss)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShield(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShield
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShield
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShield
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShield
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShield
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShield
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShield        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShield          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShield = fmt.Errorf("proto: unexpected end of group")
)
