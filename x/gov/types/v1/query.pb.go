// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/gov/v1/query.proto

package v1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryCertVotedRequest struct {
	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *QueryCertVotedRequest) Reset()         { *m = QueryCertVotedRequest{} }
func (m *QueryCertVotedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCertVotedRequest) ProtoMessage()    {}
func (*QueryCertVotedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54d1918b998d725b, []int{0}
}
func (m *QueryCertVotedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCertVotedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCertVotedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCertVotedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCertVotedRequest.Merge(m, src)
}
func (m *QueryCertVotedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCertVotedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCertVotedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCertVotedRequest proto.InternalMessageInfo

func (m *QueryCertVotedRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
type QueryCertVotedResponse struct {
	CertVoted bool `protobuf:"varint,1,opt,name=cert_voted,json=certVoted,proto3" json:"cert_voted,omitempty"`
}

func (m *QueryCertVotedResponse) Reset()         { *m = QueryCertVotedResponse{} }
func (m *QueryCertVotedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCertVotedResponse) ProtoMessage()    {}
func (*QueryCertVotedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54d1918b998d725b, []int{1}
}
func (m *QueryCertVotedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCertVotedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCertVotedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCertVotedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCertVotedResponse.Merge(m, src)
}
func (m *QueryCertVotedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCertVotedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCertVotedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCertVotedResponse proto.InternalMessageInfo

func (m *QueryCertVotedResponse) GetCertVoted() bool {
	if m != nil {
		return m.CertVoted
	}
	return false
}

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	CustomParams *CustomParams `protobuf:"bytes,1,opt,name=custom_params,json=customParams,proto3" json:"custom_params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54d1918b998d725b, []int{2}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetCustomParams() *CustomParams {
	if m != nil {
		return m.CustomParams
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryCertVotedRequest)(nil), "shentu.gov.v1.QueryCertVotedRequest")
	proto.RegisterType((*QueryCertVotedResponse)(nil), "shentu.gov.v1.QueryCertVotedResponse")
	proto.RegisterType((*QueryParamsResponse)(nil), "shentu.gov.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("shentu/gov/v1/query.proto", fileDescriptor_54d1918b998d725b) }

var fileDescriptor_54d1918b998d725b = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4b, 0xe3, 0x40,
	0x18, 0x6e, 0xca, 0xb2, 0x6c, 0xa7, 0xed, 0x65, 0xf6, 0xa3, 0xdb, 0x6c, 0x37, 0x6a, 0xa8, 0xa8,
	0x97, 0x0c, 0xa9, 0x07, 0x3d, 0x8a, 0x3d, 0x89, 0x17, 0xed, 0x41, 0xc1, 0x4b, 0x49, 0x93, 0x31,
	0x0d, 0x34, 0x79, 0xd3, 0xcc, 0x24, 0x58, 0x8a, 0x17, 0x6f, 0xde, 0x04, 0xc1, 0xdf, 0xe4, 0xb1,
	0xe0, 0xc5, 0xa3, 0xb4, 0xfe, 0x10, 0xc9, 0x24, 0xa9, 0x49, 0x29, 0x78, 0x4b, 0xe6, 0xf9, 0x98,
	0x67, 0x9e, 0xf7, 0x45, 0x4d, 0x36, 0xa4, 0x1e, 0x0f, 0x89, 0x0d, 0x11, 0x89, 0x74, 0x32, 0x0e,
	0x69, 0x30, 0xd1, 0xfc, 0x00, 0x38, 0xe0, 0x7a, 0x02, 0x69, 0x36, 0x44, 0x5a, 0xa4, 0xcb, 0xbf,
	0x6c, 0xb0, 0x41, 0x20, 0x24, 0xfe, 0x4a, 0x48, 0x72, 0xcb, 0x06, 0xb0, 0x47, 0x94, 0x18, 0xbe,
	0x43, 0x0c, 0xcf, 0x03, 0x6e, 0x70, 0x07, 0x3c, 0x96, 0xa2, 0x0d, 0x13, 0x98, 0x0b, 0x2c, 0x73,
	0x8f, 0x9d, 0x12, 0xa0, 0x59, 0x04, 0x72, 0xd7, 0xca, 0x8d, 0x62, 0xa2, 0xa5, 0x46, 0x3d, 0x44,
	0xbf, 0xcf, 0x63, 0x5e, 0x97, 0x06, 0xfc, 0x02, 0x38, 0xb5, 0x7a, 0x74, 0x1c, 0x52, 0xc6, 0xf1,
	0x06, 0xaa, 0xfa, 0x01, 0xf8, 0xc0, 0x8c, 0x51, 0xdf, 0xb1, 0xfe, 0x4a, 0x9b, 0xd2, 0xee, 0xb7,
	0x1e, 0xca, 0x8e, 0x4e, 0x2c, 0xf5, 0x00, 0xfd, 0x59, 0x55, 0x32, 0x1f, 0x3c, 0x46, 0xf1, 0x7f,
	0x84, 0x4c, 0x1a, 0xf0, 0x7e, 0x14, 0x9f, 0x0a, 0xe5, 0x8f, 0x5e, 0xc5, 0xcc, 0x68, 0xea, 0x25,
	0xfa, 0x29, 0x84, 0x67, 0x46, 0x60, 0xb8, 0x6c, 0xa9, 0x3a, 0x42, 0x75, 0x33, 0x64, 0x1c, 0xdc,
	0xbe, 0x2f, 0x00, 0x21, 0xac, 0x76, 0xfe, 0x69, 0x85, 0xc6, 0xb4, 0xae, 0xe0, 0xa4, 0xda, 0x9a,
	0x99, 0xfb, 0xeb, 0x3c, 0x95, 0x51, 0x35, 0x81, 0x85, 0x3f, 0x9e, 0xa2, 0x5a, 0x9e, 0x8d, 0xb7,
	0xb4, 0xa4, 0xa0, 0xcc, 0xaa, 0x90, 0x42, 0xbc, 0x5a, 0x56, 0x57, 0x6e, 0x5b, 0x13, 0x54, 0x6d,
	0xdf, 0xbd, 0xbc, 0x3f, 0x96, 0x15, 0xdc, 0x22, 0xc5, 0xbe, 0x93, 0x2c, 0x24, 0x49, 0x8f, 0xef,
	0x25, 0x54, 0x59, 0x56, 0x83, 0xdb, 0xeb, 0x7c, 0x57, 0x3b, 0x97, 0xb7, 0xbf, 0x60, 0xa5, 0x01,
	0x88, 0x08, 0xb0, 0x87, 0x77, 0x48, 0x71, 0xaa, 0x9f, 0xa5, 0x93, 0x69, 0x6e, 0x76, 0xb7, 0xc7,
	0xa7, 0xcf, 0x73, 0x45, 0x9a, 0xcd, 0x15, 0xe9, 0x6d, 0xae, 0x48, 0x0f, 0x0b, 0xa5, 0x34, 0x5b,
	0x28, 0xa5, 0xd7, 0x85, 0x52, 0xba, 0xd2, 0x6d, 0x87, 0x0f, 0xc3, 0x81, 0x66, 0x82, 0x9b, 0x9a,
	0x5d, 0x43, 0xe8, 0x59, 0x62, 0xdf, 0x32, 0xf7, 0x1b, 0xe1, 0xcf, 0x27, 0x3e, 0x65, 0x24, 0xd2,
	0x07, 0xdf, 0xc5, 0xe2, 0xec, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x74, 0x37, 0xb9, 0x5f, 0xe5,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomQueryClient is the client API for CustomQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomQueryClient interface {
	// Params queries all parameters of the gov module.
	CustomParams(ctx context.Context, in *v1.QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Proposal queries proposal details based on ProposalID.
	CertVoted(ctx context.Context, in *QueryCertVotedRequest, opts ...grpc.CallOption) (*QueryCertVotedResponse, error)
}

type customQueryClient struct {
	cc grpc1.ClientConn
}

func NewCustomQueryClient(cc grpc1.ClientConn) CustomQueryClient {
	return &customQueryClient{cc}
}

func (c *customQueryClient) CustomParams(ctx context.Context, in *v1.QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/shentu.gov.v1.CustomQuery/CustomParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customQueryClient) CertVoted(ctx context.Context, in *QueryCertVotedRequest, opts ...grpc.CallOption) (*QueryCertVotedResponse, error) {
	out := new(QueryCertVotedResponse)
	err := c.cc.Invoke(ctx, "/shentu.gov.v1.CustomQuery/CertVoted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomQueryServer is the server API for CustomQuery service.
type CustomQueryServer interface {
	// Params queries all parameters of the gov module.
	CustomParams(context.Context, *v1.QueryParamsRequest) (*QueryParamsResponse, error)
	// Proposal queries proposal details based on ProposalID.
	CertVoted(context.Context, *QueryCertVotedRequest) (*QueryCertVotedResponse, error)
}

// UnimplementedCustomQueryServer can be embedded to have forward compatible implementations.
type UnimplementedCustomQueryServer struct {
}

func (*UnimplementedCustomQueryServer) CustomParams(ctx context.Context, req *v1.QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomParams not implemented")
}
func (*UnimplementedCustomQueryServer) CertVoted(ctx context.Context, req *QueryCertVotedRequest) (*QueryCertVotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertVoted not implemented")
}

func RegisterCustomQueryServer(s grpc1.Server, srv CustomQueryServer) {
	s.RegisterService(&_CustomQuery_serviceDesc, srv)
}

func _CustomQuery_CustomParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomQueryServer).CustomParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.gov.v1.CustomQuery/CustomParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomQueryServer).CustomParams(ctx, req.(*v1.QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomQuery_CertVoted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCertVotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomQueryServer).CertVoted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.gov.v1.CustomQuery/CertVoted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomQueryServer).CertVoted(ctx, req.(*QueryCertVotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.gov.v1.CustomQuery",
	HandlerType: (*CustomQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomParams",
			Handler:    _CustomQuery_CustomParams_Handler,
		},
		{
			MethodName: "CertVoted",
			Handler:    _CustomQuery_CertVoted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/gov/v1/query.proto",
}

func (m *QueryCertVotedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCertVotedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCertVotedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCertVotedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCertVotedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCertVotedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CertVoted {
		i--
		if m.CertVoted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CustomParams != nil {
		{
			size, err := m.CustomParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCertVotedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovQuery(uint64(m.ProposalId))
	}
	return n
}

func (m *QueryCertVotedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CertVoted {
		n += 2
	}
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomParams != nil {
		l = m.CustomParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCertVotedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCertVotedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCertVotedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCertVotedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCertVotedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCertVotedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertVoted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CertVoted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomParams == nil {
				m.CustomParams = &CustomParams{}
			}
			if err := m.CustomParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
