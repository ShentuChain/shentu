// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/gov/v1alpha1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/gov/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("shentu/gov/v1alpha1/tx.proto", fileDescriptor_f5034648f58c6e59) }

var fileDescriptor_f5034648f58c6e59 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x9b, 0xef, 0x43, 0x20, 0x65, 0x60, 0x30, 0x2c, 0xb8, 0xc8, 0x0b, 0x82, 0x0d, 0x5b,
	0x81, 0x37, 0x40, 0x0c, 0x0c, 0x54, 0xe2, 0x8f, 0xc4, 0xc0, 0x82, 0xec, 0xe0, 0x38, 0x16, 0x89,
	0xaf, 0x15, 0x3b, 0x51, 0xfb, 0x0a, 0x4c, 0x3c, 0x16, 0x63, 0xc7, 0x8e, 0x28, 0x79, 0x11, 0xd4,
	0x38, 0x41, 0x62, 0x68, 0xc5, 0xe6, 0xe3, 0xdf, 0x39, 0x47, 0x57, 0xf6, 0x8d, 0x8f, 0x5d, 0x2e,
	0x8d, 0xaf, 0x99, 0x82, 0x86, 0x35, 0x09, 0x2f, 0x6c, 0xce, 0x13, 0xe6, 0xe7, 0xd4, 0x56, 0xe0,
	0x01, 0x1d, 0x04, 0x4a, 0x15, 0x34, 0x74, 0xa4, 0x98, 0xa4, 0xe0, 0x4a, 0x70, 0x4c, 0x70, 0x27,
	0x59, 0x93, 0x08, 0xe9, 0x79, 0xc2, 0x52, 0xd0, 0x26, 0x84, 0xf0, 0x74, 0xe0, 0xa1, 0x32, 0xe0,
	0xb1, 0x11, 0x1f, 0x05, 0xf8, 0xd2, 0x2b, 0x16, 0xc4, 0x80, 0x0e, 0x15, 0x28, 0x08, 0xf7, 0xeb,
	0xd3, 0x18, 0x50, 0x00, 0xaa, 0x90, 0xac, 0x57, 0xa2, 0xce, 0x18, 0x37, 0x8b, 0x80, 0x2e, 0xde,
	0xff, 0xc5, 0xff, 0x67, 0x4e, 0xa1, 0x2c, 0xde, 0x7f, 0xac, 0x45, 0xa9, 0xfd, 0x5d, 0x05, 0x16,
	0x1c, 0x2f, 0xd0, 0x29, 0x1d, 0x9a, 0xc3, 0xe0, 0xfd, 0x0c, 0x74, 0xe6, 0xd4, 0x6f, 0x1b, 0x3e,
	0xff, 0x93, 0xed, 0x41, 0x3a, 0x0b, 0xc6, 0x49, 0x74, 0x13, 0xef, 0x3c, 0x81, 0x97, 0x68, 0xba,
	0x21, 0xb6, 0x86, 0xf8, 0x64, 0x0b, 0xfc, 0x69, 0xba, 0x8f, 0xf7, 0xae, 0xa5, 0x05, 0xa7, 0x3d,
	0x22, 0x1b, 0xfc, 0x03, 0xc7, 0x67, 0xdb, 0xf9, 0x58, 0x79, 0x75, 0xfb, 0xd9, 0x92, 0x68, 0xd9,
	0x92, 0x68, 0xd5, 0x92, 0xe8, 0xab, 0x25, 0xd1, 0x47, 0x47, 0x26, 0xcb, 0x8e, 0x4c, 0x56, 0x1d,
	0x99, 0x3c, 0x53, 0xa5, 0x7d, 0x5e, 0x0b, 0x9a, 0x42, 0xc9, 0x52, 0x59, 0x79, 0xfd, 0x96, 0x41,
	0x6d, 0x5e, 0xb9, 0xd7, 0x60, 0xd8, 0xb0, 0x02, 0xf3, 0xfe, 0xc7, 0xfc, 0xc2, 0x4a, 0x27, 0x76,
	0xfb, 0x17, 0xbe, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xcd, 0x04, 0x6e, 0x1f, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SubmitProposal defines a method to create new proposal given a content.
	SubmitProposal(ctx context.Context, in *types.MsgSubmitProposal, opts ...grpc.CallOption) (*types.MsgSubmitProposalResponse, error)
	// Vote defines a method to add a vote on a specific proposal.
	Vote(ctx context.Context, in *types.MsgVote, opts ...grpc.CallOption) (*types.MsgVoteResponse, error)
	// Deposit defines a method to add deposit on a specific proposal.
	Deposit(ctx context.Context, in *types.MsgDeposit, opts ...grpc.CallOption) (*types.MsgDepositResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitProposal(ctx context.Context, in *types.MsgSubmitProposal, opts ...grpc.CallOption) (*types.MsgSubmitProposalResponse, error) {
	out := new(types.MsgSubmitProposalResponse)
	err := c.cc.Invoke(ctx, "/shentu.gov.v1alpha1.Msg/SubmitProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Vote(ctx context.Context, in *types.MsgVote, opts ...grpc.CallOption) (*types.MsgVoteResponse, error) {
	out := new(types.MsgVoteResponse)
	err := c.cc.Invoke(ctx, "/shentu.gov.v1alpha1.Msg/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deposit(ctx context.Context, in *types.MsgDeposit, opts ...grpc.CallOption) (*types.MsgDepositResponse, error) {
	out := new(types.MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/shentu.gov.v1alpha1.Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SubmitProposal defines a method to create new proposal given a content.
	SubmitProposal(context.Context, *types.MsgSubmitProposal) (*types.MsgSubmitProposalResponse, error)
	// Vote defines a method to add a vote on a specific proposal.
	Vote(context.Context, *types.MsgVote) (*types.MsgVoteResponse, error)
	// Deposit defines a method to add deposit on a specific proposal.
	Deposit(context.Context, *types.MsgDeposit) (*types.MsgDepositResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitProposal(ctx context.Context, req *types.MsgSubmitProposal) (*types.MsgSubmitProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProposal not implemented")
}
func (*UnimplementedMsgServer) Vote(ctx context.Context, req *types.MsgVote) (*types.MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedMsgServer) Deposit(ctx context.Context, req *types.MsgDeposit) (*types.MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgSubmitProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.gov.v1alpha1.Msg/SubmitProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProposal(ctx, req.(*types.MsgSubmitProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.gov.v1alpha1.Msg/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Vote(ctx, req.(*types.MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.gov.v1alpha1.Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*types.MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.gov.v1alpha1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitProposal",
			Handler:    _Msg_SubmitProposal_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Msg_Vote_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/gov/v1alpha1/tx.proto",
}
