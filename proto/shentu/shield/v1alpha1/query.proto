syntax = "proto3";
package shentu.shield.v1alpha1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "shentu/shield/v1alpha1/shield.proto";
import "shentu/shield/v1alpha1/genesis.proto";

option go_package = "github.com/certikfoundation/shentu/x/shield/types";

// Query defines the gRPC querier service for shield module
service Query {
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/pool/{pool_id}";
  }

  rpc Sponsor(QuerySponsorRequest) returns (QuerySponsorResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/sponsor/{sponsor}";
  }

  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/pools";
  }

  rpc Provider(QueryProviderRequest) returns (QueryProviderResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/provider/{address}";
  }

  rpc Providers(QueryProvidersRequest) returns (QueryProvidersResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/providers";
  }

  rpc PoolParams(QueryPoolParamsRequest) returns (QueryPoolParamsResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/pool_params";
  }

  rpc ClaimParams(QueryClaimParamsRequest) returns (QueryClaimParamsResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/claim_params";
  }

  rpc ShieldStatus(QueryShieldStatusRequest) returns (QueryShieldStatusResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/status";
  }

  rpc Purchase(QueryPurchaseRequest) returns (QueryPurchaseResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/purchase/{pool_id}/{purchaser}";
  }

  rpc Donations(QueryDonationsRequest) returns (QueryDonationsResponse) {
    option (google.api.http).get = "/shentu/shield/v1alpha1/donations";
  }
}


message QueryPoolRequest {
  uint64 pool_id = 1;
}

message QueryPoolResponse {
 Pool pool = 1 [(gogoproto.nullable) = false];
}

message QuerySponsorRequest {
  string sponsor = 1;
}

message QuerySponsorResponse {
  repeated Pool pools = 1 [(gogoproto.nullable) = false];
}

message QueryPoolsRequest {
}

message QueryPoolsResponse {
  repeated Pool pools = 1 [(gogoproto.nullable) = false];
}

message QueryProviderRequest {
  string address = 1;
}

message QueryProviderResponse {
  Provider provider = 1 [(gogoproto.nullable) = false];
}


message QueryProvidersRequest {
}

message QueryProvidersResponse {
  repeated Provider providers = 1 [(gogoproto.nullable) = false];
}


message QueryPoolParamsRequest {
}

message QueryPoolParamsResponse {
  PoolParams params = 1 [(gogoproto.nullable) = false];
}


message QueryClaimParamsRequest {
}

message QueryClaimParamsResponse {
  ClaimProposalParams params = 1 [(gogoproto.nullable) = false];
}


message QueryShieldStatusRequest {
}

message QueryShieldStatusResponse {
  string total_collateral = 1 [ (gogoproto.moretags) = "yaml:\"total_collateral\"", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false ];
  string total_shield = 2 [ (gogoproto.moretags) = "yaml:\"total_shield\"", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false ];
  string total_withdrawing = 3 [ (gogoproto.moretags) = "yaml:\"total_withdrawing\"", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false ];
  repeated cosmos.base.v1beta1.DecCoin fees = 5 [ (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (gogoproto.moretags) = "yaml:\"fees\"", (gogoproto.nullable) = false ];
  string global_shield_staking_pool = 6 [ (gogoproto.moretags) = "yaml:\"global_shield_staking_pool\"", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false ];
}


message QueryPurchaseRequest {
  uint64 pool_id = 1;
  string purchaser = 2;
}

message QueryPurchaseResponse {
  Purchase purchase = 1 [(gogoproto.nullable) = false];
}

message QueryDonationsRequest {
}

message QueryDonationsResponse {
  DonationPool amount = 1 [ (gogoproto.nullable) = false ];
}
