syntax = "proto3";
package shentu.bounty.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "shentu/bounty/v1/bounty.proto";

option go_package = "github.com/shentufoundation/shentu/x/bounty/types";

// Msg defines the staking Msg service.
service Msg {
  // CreateProgram defines a method for creating a new program.
  rpc CreateProgram(MsgCreateProgram) returns (MsgCreateProgramResponse);
}

// MsgCreateProgram defines a SDK message for creating a new validator.
message MsgCreateProgram {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string     description = 1;
  string commission_rate = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];

  google.protobuf.Timestamp submission_end_time = 3
  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"submission_end_time\""];

  string                   creator_address  = 4 [(gogoproto.moretags) = "yaml:\"creator_address\""];
  google.protobuf.Any      encryption_key   = 5 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
  repeated cosmos.base.v1beta1.Coin deposit = 6 [(gogoproto.nullable) = false];
}

// MsgCreateProgramResponse defines the Msg/CreateValidator response type.
message MsgCreateProgramResponse {
  uint64 program_id = 1 [(gogoproto.jsontag) = "id", (gogoproto.moretags) = "yaml:\"id\""];
}
