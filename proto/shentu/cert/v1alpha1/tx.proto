syntax = "proto3";
package shentu.cert.v1alpha1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "shentu/cert/v1alpha1/cert.proto";

option go_package = "github.com/certikfoundation/shentu/x/cert/types";

// Msg defines the shield Msg service.
service Msg {
    rpc ProposeCertifier(MsgProposeCertifier) returns (MsgProposeCertifierResponse);
}

// MsgProposeCertifier is the message for proposing new certifier.
message MsgProposeCertifier {
    option (gogoproto.equal) = false;
    option (gogoproto.goproto_getters) = false;

    string proposer = 1 [ (gogoproto.moretags) = "yaml:\"proposer\"" ];
    string alias = 2 [ (gogoproto.moretags) = "yaml:\"alias\"" ];
    string certifier = 3 [ (gogoproto.moretags) = "yaml:\"certifier\"" ];
    string description = 4 [ (gogoproto.moretags) = "yaml:\"description\"" ];
}

message MsgProposeCertifierResponse {}